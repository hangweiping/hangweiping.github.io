<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>活着</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hangweiping.github.io/"/>
  <updated>2016-07-19T10:39:00.000Z</updated>
  <id>http://hangweiping.github.io/</id>
  
  <author>
    <name>hangweiping</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker安装Gitlab</title>
    <link href="http://hangweiping.github.io/2016/05/16/Docker%E5%AE%89%E8%A3%85Gitlab/"/>
    <id>http://hangweiping.github.io/2016/05/16/Docker安装Gitlab/</id>
    <published>2016-05-16T13:19:26.000Z</published>
    <updated>2016-07-19T10:39:00.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;此文为实践gitlab而成，通篇介绍了Docker下安装 Gitlab CE的过程及注意问题，顺便复习了一些docker和git的命令，由于原文比较简单，故没有翻译。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;GitLab-Docker-images&quot;&gt;&lt;a href=&quot;#GitLab-Docker-images&quot; class=&quot;headerlink&quot; title=&quot;GitLab Docker images&quot;&gt;&lt;/a&gt;GitLab Docker images&lt;/h1&gt;&lt;p&gt;这是镜像&lt;a href=&quot;https://registry.hub.docker.com/u/gitlab/gitlab-ce/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitLab CE docker image&lt;/a&gt;,You can also deploy to Docker Cloud using the &lt;a href=&quot;http://docs.gitlab.com/omnibus/docker/#install-gitlab-using-docker-compose&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;docker-compose config&lt;/a&gt;。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Run-the-image&quot;&gt;&lt;a href=&quot;#Run-the-image&quot; class=&quot;headerlink&quot; title=&quot;Run the image:&quot;&gt;&lt;/a&gt;Run the image:&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo docker run --detach \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --hostname gitlab.example.com \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --publish 443:443 --publish 80:80 --publish 22:22 \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --name gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --restart always \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --volume /srv/gitlab/config:/etc/gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --volume /srv/gitlab/logs:/var/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;/gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --volume /srv/gitlab/data:/var/opt/gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gitlab/gitlab-ce:latest&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This will download and start a GitLab CE container and publish ports needed to access SSH, HTTP and HTTPS. All GitLab data will be stored as subdirectories of /srv/gitlab/. The container will automatically restart after a system reboot.&lt;/p&gt;
&lt;p&gt;You can now login to the web interface as explained in After starting a container.&lt;/p&gt;
&lt;h2 id=&quot;After-starting-a-container&quot;&gt;&lt;a href=&quot;#After-starting-a-container&quot; class=&quot;headerlink&quot; title=&quot;After starting a container&quot;&gt;&lt;/a&gt;After starting a container&lt;/h2&gt;&lt;p&gt;After starting a container you can visit &lt;a href=&quot;http://localhost/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/&lt;/a&gt; or &lt;a href=&quot;http://192.168.59.103&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://192.168.59.103&lt;/a&gt; if you use boot2docker. It might take a while before the docker container starts to respond to queries.&lt;/p&gt;
&lt;p&gt;Login to GitLab with the following credentials:  &lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;`root`&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;password&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;`5iveL!fe`&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Next time, you can just use docker start and stop to run the container.  &lt;/p&gt;
&lt;h2 id=&quot;Where-is-the-data-stored&quot;&gt;&lt;a href=&quot;#Where-is-the-data-stored&quot; class=&quot;headerlink&quot; title=&quot;Where is the data stored?&quot;&gt;&lt;/a&gt;Where is the data stored?&lt;/h2&gt;&lt;p&gt;The GitLab container uses host mounted volumes to store persistent data:&lt;/p&gt;
&lt;p&gt;Local location    Container location    Usage  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;/srv/gitlab/data&lt;/th&gt;
&lt;th&gt;/var/opt/gitlab&lt;/th&gt;
&lt;th&gt;For storing application data&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/srv/gitlab/logs&lt;/td&gt;
&lt;td&gt;/var/log/gitlab&lt;/td&gt;
&lt;td&gt;For storing logs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/srv/gitlab/config&lt;/td&gt;
&lt;td&gt;/etc/gitlab&lt;/td&gt;
&lt;td&gt;For storing the GitLab configuration files&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can fine tune these directories to meet your requirements.  &lt;/p&gt;
&lt;h2 id=&quot;Configure-GitLab&quot;&gt;&lt;a href=&quot;#Configure-GitLab&quot; class=&quot;headerlink&quot; title=&quot;Configure GitLab&quot;&gt;&lt;/a&gt;Configure GitLab&lt;/h2&gt;&lt;p&gt;This container uses the official Omnibus GitLab package, so all configuration is done in the unique configuration file &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To access GitLab’s configuration file, you can start a shell session in the context of a running container. This will allow you to browse all directories and use your favorite text editor:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo docker exec -it gitlab /bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can also just edit &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo docker exec -it gitlab vi /etc/gitlab/gitlab.rb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once you open &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt; make sure to set the external_url to point to a valid URL.&lt;/p&gt;
&lt;p&gt;To receive e-mails from GitLab you have to configure the SMTP settings because the GitLab docker image doesn’t have an SMTP server installed.&lt;/p&gt;
&lt;p&gt;You may also be interested in Enabling HTTPS.&lt;/p&gt;
&lt;p&gt;After you make all the changes you want, you will need to restart the container in order to reconfigure GitLab:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo docker restart gitlab&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note: GitLab will reconfigure itself whenever the container starts.&lt;/p&gt;
&lt;p&gt;For more options about configuring GitLab please check the Omnibus GitLab documentation.&lt;/p&gt;
&lt;h2 id=&quot;Run-GitLab-CE-on-public-IP-address&quot;&gt;&lt;a href=&quot;#Run-GitLab-CE-on-public-IP-address&quot; class=&quot;headerlink&quot; title=&quot;Run GitLab CE on public IP address&quot;&gt;&lt;/a&gt;Run GitLab CE on public IP address&lt;/h2&gt;&lt;p&gt;You can make Docker to use your IP address and forward all traffic to the GitLab CE container by modifying the –publish flag.  &lt;/p&gt;
&lt;p&gt;To expose GitLab CE on IP 1.1.1.1:  &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo docker run --detach \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --hostname gitlab.example.com \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --publish 1.1.1.1:443:443 \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --publish 1.1.1.1:80:80 \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --publish 1.1.1.1:22:22 \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --name gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --restart always \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --volume /srv/gitlab/config:/etc/gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --volume /srv/gitlab/logs:/var/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;/gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --volume /srv/gitlab/data:/var/opt/gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gitlab/gitlab-ce:latest&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You can then access your GitLab instance at &lt;a href=&quot;http://1.1.1.1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://1.1.1.1/&lt;/a&gt; and &lt;a href=&quot;https://1.1.1.1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://1.1.1.1/&lt;/a&gt;.  &lt;/p&gt;
&lt;h2 id=&quot;Expose-GitLab-on-different-ports&quot;&gt;&lt;a href=&quot;#Expose-GitLab-on-different-ports&quot; class=&quot;headerlink&quot; title=&quot;Expose GitLab on different ports&quot;&gt;&lt;/a&gt;Expose GitLab on different ports&lt;/h2&gt;&lt;p&gt;If you want to use a different port than 80 (HTTP) or 443 (HTTPS), you need to add a separate –publish directive to the docker run command.&lt;/p&gt;
&lt;p&gt;For example, to expose the web interface on port 8929 and the SSH service on port 2289, use the following docker run command:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo docker run --detach \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --hostname gitlab.example.com \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --publish 8929:80 --publish 2289:22 \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --name gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --restart always \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --volume /srv/gitlab/config:/etc/gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --volume /srv/gitlab/logs:/var/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;/gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --volume /srv/gitlab/data:/var/opt/gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gitlab/gitlab-ce:latest&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You then need to appropriately configure gitlab.rb:&lt;/p&gt;
&lt;p&gt;Set external_url:&lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;For&lt;/span&gt; HTTP&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;external_url &lt;span class=&quot;string&quot;&gt;&quot;http://gitlab.example.com:8929&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;For&lt;/span&gt; HTTPS&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;external_url &lt;span class=&quot;string&quot;&gt;&quot;https://gitlab.example.com:8929&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Set&lt;/span&gt; gitlab_shell_ssh_port:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gitlab_rails[&lt;span class=&quot;string&quot;&gt;&#39;gitlab_shell_ssh_port&#39;&lt;/span&gt;] = 2289&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Diagnose &lt;span class=&quot;comment&quot;&gt;potential problems&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Read &lt;span class=&quot;comment&quot;&gt;container logs:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo &lt;span class=&quot;comment&quot;&gt;docker logs gitlab&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Enter &lt;span class=&quot;comment&quot;&gt;running container:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo &lt;span class=&quot;comment&quot;&gt;docker exec -it gitlab&lt;/span&gt; /bin/&lt;span class=&quot;comment&quot;&gt;bash&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;From within the container you can administer the GitLab container as you would normally administer an Omnibus installation&lt;/p&gt;
&lt;h2 id=&quot;Install-GitLab-using-docker-compose&quot;&gt;&lt;a href=&quot;#Install-GitLab-using-docker-compose&quot; class=&quot;headerlink&quot; title=&quot;Install GitLab using docker-compose&quot;&gt;&lt;/a&gt;Install GitLab using docker-compose&lt;/h2&gt;&lt;p&gt;With Docker compose you can easily configure, install, and upgrade your Docker-based GitLab installation.&lt;/p&gt;
&lt;p&gt;Install Docker Compose&lt;br&gt;Create a docker-compose.yml file (or download an example):  &lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;web:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  image: &#39;gitlab/gitlab-ce:latest&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  restart: always&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  hostname: &#39;gitlab.example.com&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  environment:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    GITLAB_OMNIBUS_CONFIG: |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      external_url &#39;https://gitlab.example.com&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      # Add any other gitlab.rb configuration here, each on its own line&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ports:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    -&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;string&quot;&gt;&#39;80:80&#39;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    -&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;string&quot;&gt;&#39;443:443&#39;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    -&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;string&quot;&gt;&#39;22:22&#39;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  volumes:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    -&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;string&quot;&gt;&#39;/srv/gitlab/config:/etc/gitlab&#39;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    -&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;string&quot;&gt;&#39;/srv/gitlab/logs:/var/log/gitlab&#39;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    -&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;string&quot;&gt;&#39;/srv/gitlab/data:/var/opt/gitlab&#39;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Make sure you are in the same directory as docker-compose.yml and run docker-compose up -d to start GitLab&lt;/p&gt;
&lt;p&gt;Read “Pre-configure Docker container” to see how the GITLAB_OMNIBUS_CONFIG variable works.&lt;/p&gt;
&lt;p&gt;Below is another docker-compose.yml example with GitLab running on a custom HTTP and SSH port. Notice how the GITLAB_OMNIBUS_CONFIG variables match the ports section:&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;we&lt;span class=&quot;variable&quot;&gt;b:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  image: &lt;span class=&quot;string&quot;&gt;&#39;gitlab/gitlab-ce:latest&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  restar&lt;span class=&quot;variable&quot;&gt;t:&lt;/span&gt; always&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;hostname&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;gitlab.example.com&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  environmen&lt;span class=&quot;variable&quot;&gt;t:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    GITLAB_OMNIBUS_CONFIG: |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      external_url &lt;span class=&quot;string&quot;&gt;&#39;http://gitlab.example.com:9090&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      gitlab_rails[&lt;span class=&quot;string&quot;&gt;&#39;gitlab_shell_ssh_port&#39;&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;2224&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  port&lt;span class=&quot;variable&quot;&gt;s:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&#39;9090:9090&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&#39;2224:22&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  volume&lt;span class=&quot;variable&quot;&gt;s:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&#39;/srv/gitlab/config:/etc/gitlab&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&#39;/srv/gitlab/logs:/var/log/gitlab&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&#39;/srv/gitlab/data:/var/opt/gitlab&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Update-GitLab-using-Docker-compose&quot;&gt;&lt;a href=&quot;#Update-GitLab-using-Docker-compose&quot; class=&quot;headerlink&quot; title=&quot;Update GitLab using Docker compose&quot;&gt;&lt;/a&gt;Update GitLab using Docker compose&lt;/h2&gt;&lt;p&gt;Provided you installed GitLab using docker-compose, all you have to do is run &lt;code&gt;docker-compose pull&lt;/code&gt; and &lt;code&gt;docker-compose up -d&lt;/code&gt; to download a new release and upgrade your GitLab instance.&lt;/p&gt;
&lt;h1 id=&quot;docker命令回顾&quot;&gt;&lt;a href=&quot;#docker命令回顾&quot; class=&quot;headerlink&quot; title=&quot;docker命令回顾&quot;&gt;&lt;/a&gt;docker命令回顾&lt;/h1&gt;&lt;h2 id=&quot;查看docker信息（version、info）&quot;&gt;&lt;a href=&quot;#查看docker信息（version、info）&quot; class=&quot;headerlink&quot; title=&quot;查看docker信息（version、info）&quot;&gt;&lt;/a&gt;查看docker信息（version、info）&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看docker版本  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker version  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 显示docker系统的信息  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker info&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;对image的操作（search、pull、images、rmi、history）&quot;&gt;&lt;a href=&quot;#对image的操作（search、pull、images、rmi、history）&quot; class=&quot;headerlink&quot; title=&quot;对image的操作（search、pull、images、rmi、history）&quot;&gt;&lt;/a&gt;对image的操作（search、pull、images、rmi、history）&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 检索image  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker search image_name  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载image  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker pull image_name  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列出镜像列表; -a, --all=false Show all images; --no-trunc=false Don&#39;t truncate output; -q, --quiet=false Only show numeric IDs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker images   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除一个或者多个镜像; -f, --force=false Force; --no-prune=false Do not delete untagged parents&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker rmi image_name  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 显示一个镜像的历史; --no-trunc=false Don&#39;t truncate output; -q, --quiet=false Only show numeric IDs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker &lt;span class=&quot;built_in&quot;&gt;history&lt;/span&gt; image_name&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;启动容器（run）&quot;&gt;&lt;a href=&quot;#启动容器（run）&quot; class=&quot;headerlink&quot; title=&quot;启动容器（run）&quot;&gt;&lt;/a&gt;启动容器（run）&lt;/h2&gt;&lt;p&gt;docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。  &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 在容器中运行&quot;echo&quot;命令，输出&quot;hello word&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker run image_name &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;hello word&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 交互式进入容器中&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker run -i -t image_name /bin/bash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 在容器中安装新的程序&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker run image_name apt-get install -y app_name&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note：  在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响应这种交互的。apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失。&lt;/p&gt;
&lt;h2 id=&quot;查看容器（ps）&quot;&gt;&lt;a href=&quot;#查看容器（ps）&quot; class=&quot;headerlink&quot; title=&quot;查看容器（ps）&quot;&gt;&lt;/a&gt;查看容器（ps）&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列出当前所有正在运行的container&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker ps  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列出所有的container  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker ps &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列出最近一次启动的container  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker ps &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;保存对容器的修改（commit）&quot;&gt;&lt;a href=&quot;#保存对容器的修改（commit）&quot; class=&quot;headerlink&quot; title=&quot;保存对容器的修改（commit）&quot;&gt;&lt;/a&gt;保存对容器的修改（commit）&lt;/h2&gt;&lt;p&gt;当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。  &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 保存对容器的修改; -a, --author=&quot;&quot; Author; -m, --message=&quot;&quot; Commit message  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker commit ID new_image_name&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note：  image相当于类，container相当于实例，不过可以动态给实例安装新软件，然后把这个container用commit命令固化成一个image。&lt;/p&gt;
&lt;h2 id=&quot;对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach）&quot;&gt;&lt;a href=&quot;#对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach）&quot; class=&quot;headerlink&quot; title=&quot;对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach）&quot;&gt;&lt;/a&gt;对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach）&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除所有容器  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker rm `docker ps &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -q`  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除单个容器; -f, --force=false; -l, --link=false Remove the specified link and not the underlying container; -v, --volumes=false Remove the volumes associated to the container&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker rm Name/ID  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 停止、启动、杀死一个容器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker stop Name/ID&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker start Name/ID&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker &lt;span class=&quot;built_in&quot;&gt;kill&lt;/span&gt; Name/ID&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 从一个容器中取日志; -f, --follow=false Follow log output; -t, --timestamps=false Show timestamps&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker logs Name/ID&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列出一个容器里面被改变的文件或者目录，list列表会显示出三种事件，A 增加的，D 删除的，C 被改变的&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker diff Name/ID&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 显示一个运行的容器里面的进程信息&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker top Name/ID&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 从容器里面拷贝文件/目录到本地一个路径&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker cp Name:/container_path to_path&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker cp ID:/container_path to_path&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 重启一个正在运行的容器; -t, --time=10 Number of seconds to try to stop for before killing the container, Default=10&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker restart Name/ID&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 附加到一个运行的容器上面; --no-stdin=false Do not attach stdin; --sig-proxy=true Proxify all received signal to the process&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker attach ID&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note： attach命令允许你查看或者影响一个运行的容器。你可以在同一时间attach同一个容器。你也可以从一个容器中脱离出来，是从CTRL-C。&lt;/p&gt;
&lt;h2 id=&quot;保存和加载镜像（save、load）&quot;&gt;&lt;a href=&quot;#保存和加载镜像（save、load）&quot; class=&quot;headerlink&quot; title=&quot;保存和加载镜像（save、load）&quot;&gt;&lt;/a&gt;保存和加载镜像（save、load）&lt;/h2&gt;&lt;p&gt;当需要把一台机器上的镜像迁移到另一台机器的时候，需要保存镜像与加载镜像。  &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 保存镜像到一个tar包; -o, --output=&quot;&quot; Write to an file&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker save image_name -o file_path&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 加载一个tar包格式的镜像; -i, --input=&quot;&quot; Read from a tar archive file&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker load -i file_path&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 机器a&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker save image_name &amp;gt; /home/save.tar&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用scp将save.tar拷到机器b上，然后：&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker load &amp;lt; /home/save.tar&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;git-初学解决错误&quot;&gt;&lt;a href=&quot;#git-初学解决错误&quot; class=&quot;headerlink&quot; title=&quot;git 初学解决错误&quot;&gt;&lt;/a&gt;git 初学解决错误&lt;/h1&gt;&lt;p&gt;error: src refspec master does not match any.&lt;br&gt;引起该错误的原因是，目录中没有文件，空目录是不能提交上去的  &lt;/p&gt;
&lt;p&gt;error: insufficient permission for adding an object to repository database ./objects&lt;br&gt;服务端没有可写目录的权限  &lt;/p&gt;
&lt;p&gt;错误提示：fatal: remote origin already exists.&lt;br&gt;解决办法：$ git remote rm origin  &lt;/p&gt;
&lt;p&gt;错误提示：error: failed to push som refs to ……..&lt;br&gt;解决办法：$ git pull origin master //先pull 下来 再push 上去  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;此文为实践gitlab而成，通篇介绍了Docker下安装 Gitlab CE的过程及注意问题，顺便复习了一些docker和git的命令，由于原文比较简单，故没有翻译。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;GitLab-Docker-images&quot;&gt;&lt;a href=&quot;#GitLab-Docker-images&quot; class=&quot;headerlink&quot; title=&quot;GitLab Docker images&quot;&gt;&lt;/a&gt;GitLab Docker images&lt;/h1&gt;&lt;p&gt;这是镜像&lt;a href=&quot;https://registry.hub.docker.com/u/gitlab/gitlab-ce/&quot;&gt;GitLab CE docker image&lt;/a&gt;,You can also deploy to Docker Cloud using the &lt;a href=&quot;http://docs.gitlab.com/omnibus/docker/#install-gitlab-using-docker-compose&quot;&gt;docker-compose config&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://hangweiping.github.io/tags/docker/"/>
    
      <category term="gitlab" scheme="http://hangweiping.github.io/tags/gitlab/"/>
    
      <category term="git" scheme="http://hangweiping.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>redis入门教程</title>
    <link href="http://hangweiping.github.io/2016/05/09/redis%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://hangweiping.github.io/2016/05/09/redis入门教程/</id>
    <published>2016-05-09T09:13:34.000Z</published>
    <updated>2016-07-15T09:44:35.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;redis是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库。&lt;br&gt;redis的官网地址，非常好记，是redis.io。（特意查了一下，域名后缀io属于国家域名，是british Indian Ocean territory，即英属印度洋领地）&lt;br&gt;目前，Vmware在资助着redis项目的开发和维护。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;学会启动redis&quot;&gt;&lt;a href=&quot;#学会启动redis&quot; class=&quot;headerlink&quot; title=&quot;学会启动redis&quot;&gt;&lt;/a&gt;学会启动redis&lt;/h2&gt;&lt;p&gt;启动redis非常简单，直接&lt;code&gt;redis-server&lt;/code&gt;就可以启动服务端了，还可以用下面的方法指定要加载的配置文件：&lt;br&gt;&lt;code&gt;redis-server ../redis.conf&lt;/code&gt;&lt;br&gt;默认情况下，redis-server会以非daemon的方式来运行，且默认服务端口为6379。  &lt;/p&gt;
&lt;h2 id=&quot;使用redis客户端&quot;&gt;&lt;a href=&quot;#使用redis客户端&quot; class=&quot;headerlink&quot; title=&quot;使用redis客户端&quot;&gt;&lt;/a&gt;使用redis客户端&lt;/h2&gt;&lt;p&gt;我们直接看一个例子：  &lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//这样来启动redis客户端了  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ redis-cli&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//用&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;指令来设置&lt;span class=&quot;keyword&quot;&gt;key&lt;/span&gt;、&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;roc&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//来获取&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;的值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;roc&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//通过客户端来关闭redis服务端&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;shutdown&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;redis数据结构-–-简介&quot;&gt;&lt;a href=&quot;#redis数据结构-–-简介&quot; class=&quot;headerlink&quot; title=&quot;redis数据结构 – 简介&quot;&gt;&lt;/a&gt;redis数据结构 – 简介&lt;/h2&gt;&lt;p&gt;redis是一种高级的key:value存储系统，其中value支持五种数据类型：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符串（strings）  &lt;/li&gt;
&lt;li&gt;字符串列表（lists）  &lt;/li&gt;
&lt;li&gt;字符串集合（sets）  &lt;/li&gt;
&lt;li&gt;有序字符串集合（sorted sets）  &lt;/li&gt;
&lt;li&gt;哈希（hashes）  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而关于key，有几个点要提醒大家：  &lt;/p&gt;
&lt;p&gt;key不要太长，尽量不要超过1024字节，这不仅消耗内存，而且会降低查找的效率；&lt;br&gt;key也不要太短，太短的话，key的可读性会降低；&lt;br&gt;在一个项目中，key最好使用统一的命名模式，例如user:10000:passwd。    &lt;/p&gt;
&lt;h2 id=&quot;redis数据结构-–-strings&quot;&gt;&lt;a href=&quot;#redis数据结构-–-strings&quot; class=&quot;headerlink&quot; title=&quot;redis数据结构 – strings&quot;&gt;&lt;/a&gt;redis数据结构 – strings&lt;/h2&gt;&lt;p&gt;有人说，如果只使用redis中的字符串类型，且不使用redis的持久化功能，那么，redis就和memcache非常非常的像了。这说明strings类型是一个很基础的数据类型，也是任何存储系统都必备的数据类型。  &lt;/p&gt;
&lt;p&gt;我们来看一个最简单的例子：    &lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; mystr &lt;span class=&quot;comment&quot;&gt;&quot;hello world!&quot;&lt;/span&gt; //设置字符串类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;get &lt;span class=&quot;comment&quot;&gt;mystr&lt;/span&gt; //读取字符串类型&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;字符串类型的用法就是这么简单，因为是二进制安全的，所以你完全可以把一个图片文件的内容作为字符串来存储。&lt;br&gt;另外，我们还可以通过字符串类型进行数值操作：  &lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;127&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;mynum&lt;/span&gt; &quot;2&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;OK&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;mynum&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&quot;2&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;incr&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;mynum&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;selector-tag&quot;&gt;integer&lt;/span&gt;) 3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;mynum&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&quot;3&quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看，在遇到数值操作时，redis会将字符串类型转换成数值。  &lt;/p&gt;
&lt;p&gt;由于INCR等指令本身就具有原子操作的特性，所以我们完全可以利用redis的INCR、INCRBY、DECR、DECRBY等指令来实现原子计数的效果，假如，在某种场景下有3个客户端同时读取了mynum的值（值为2），然后对其同时进行了加1的操作，那么，最后mynum的值一定是5。不少网站都利用redis的这个特性来实现业务上的统计计数需求。  &lt;/p&gt;
&lt;h2 id=&quot;redis数据结构-–-lists&quot;&gt;&lt;a href=&quot;#redis数据结构-–-lists&quot; class=&quot;headerlink&quot; title=&quot;redis数据结构 – lists&quot;&gt;&lt;/a&gt;redis数据结构 – lists&lt;/h2&gt;&lt;p&gt;redis的另一个重要的数据结构叫做lists，翻译成中文叫做“列表”。  &lt;/p&gt;
&lt;p&gt;首先要明确一点，redis中的lists在底层实现上并不是数组，而是链表，也就是说对于一个具有上百万个元素的lists来说，在头部和尾部插入一个新元素，其时间复杂度是常数级别的，比如用LPUSH在10个元素的lists头部插入新元素，和在上千万元素的lists头部插入新元素的速度应该是相同的。  &lt;/p&gt;
&lt;p&gt;虽然lists有这样的优势，但同样有其弊端，那就是，链表型lists的元素定位会比较慢，而数组型lists的元素定位就会快得多。  &lt;/p&gt;
&lt;p&gt;lists的常用操作包括LPUSH、RPUSH、LRANGE等。我们可以用LPUSH在lists的左侧插入一个新元素，用RPUSH在lists的右侧插入一个新元素，用LRANGE命令从lists中指定一个范围来提取元素。我们来看几个例子：  &lt;/p&gt;
&lt;figure class=&quot;highlight tcl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//新建一个&lt;span class=&quot;keyword&quot;&gt;list&lt;/span&gt;叫做mylist，并在列表头部插入元素&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; lpush mylist &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//返回当前mylist中的元素个数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//在mylist右侧插入元素&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; rpush mylist &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//在mylist左侧插入元素&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; lpush mylist &lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//列出mylist中从编号&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;到编号&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;的元素&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;lrange&lt;/span&gt; mylist &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//列出mylist中从编号&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;到倒数第一个元素&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;lrange&lt;/span&gt; mylist &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;lists的应用相当广泛，随便举几个例子：  &lt;/p&gt;
&lt;p&gt;我们可以利用lists来实现一个消息队列，而且可以确保先后顺序，不必像MySQL那样还需要通过ORDER BY来进行排序。&lt;br&gt;利用LRANGE还可以很方便的实现分页的功能。&lt;br&gt;在博客系统中，每片博文的评论也可以存入一个单独的list中。  &lt;/p&gt;
&lt;h2 id=&quot;redis数据结构-–-集合&quot;&gt;&lt;a href=&quot;#redis数据结构-–-集合&quot; class=&quot;headerlink&quot; title=&quot;redis数据结构 – 集合&quot;&gt;&lt;/a&gt;redis数据结构 – 集合&lt;/h2&gt;&lt;p&gt;redis的集合，是一种无序的集合，集合中的元素没有先后顺序。&lt;br&gt;集合相关的操作也很丰富，如添加新元素、删除已有元素、取交集、取并集、取差集等。我们来看例子：  &lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//向集合myset中加入一个新元素&lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; sadd myset &lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; sadd myset &lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//列出集合myset中的所有元素&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; smembers myset&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//判断元素&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;是否在集合myset中，返回&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;表示存在&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; sismember myset &lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//判断元素&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;是否在集合myset中，返回&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;表示不存在&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; sismember myset &lt;span class=&quot;string&quot;&gt;&quot;three&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//新建一个新的集合yourset&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; sadd yourset &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; sadd yourset &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; smembers yourset&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//对两个集合求并集&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; sunion myset yourset&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于集合的使用，也有一些常见的方式，比如，QQ有一个社交功能叫做“好友标签”，大家可以给你的好友贴标签，比如“大美女”、“土豪”、“欧巴”等等，这时就可以使用redis的集合来实现，把每一个用户的标签都存储在一个集合之中。  &lt;/p&gt;
&lt;h2 id=&quot;redis数据结构-–-有序集合&quot;&gt;&lt;a href=&quot;#redis数据结构-–-有序集合&quot; class=&quot;headerlink&quot; title=&quot;redis数据结构 – 有序集合&quot;&gt;&lt;/a&gt;redis数据结构 – 有序集合&lt;/h2&gt;&lt;p&gt;redis不但提供了无需集合（sets），还很体贴的提供了有序集合（sorted sets）。有序集合中的每个元素都关联一个序号（score），这便是排序的依据。  &lt;/p&gt;
&lt;p&gt;很多时候，我们都将redis中的有序集合叫做zsets，这是因为在redis中，有序集合相关的操作指令都是以z开头的，比如zrange、zadd、zrevrange、zrangebyscore等等  &lt;/p&gt;
&lt;p&gt;老规矩，我们来看几个生动的例子：  &lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//新增一个有序集合myzset，并加入一个元素baidu.com，给它赋予的序号是1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; zadd myzset &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; baidu&lt;span class=&quot;selector-class&quot;&gt;.com&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//向myzset中新增一个元素360.com，赋予它的序号是3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; zadd myzset &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.com&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//向myzset中新增一个元素google.com，赋予它的序号是2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; zadd myzset &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; google&lt;span class=&quot;selector-class&quot;&gt;.com&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//列出myzset的所有元素，同时列出其序号，可以看出myzset已经是有序的了。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; zrange myzset &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; with scores&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;baidu.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;google.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;360.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//只列出myzset的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; zrange myzset &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;baidu.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;google.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;360.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;redis数据结构-–-哈希&quot;&gt;&lt;a href=&quot;#redis数据结构-–-哈希&quot; class=&quot;headerlink&quot; title=&quot;redis数据结构 – 哈希&quot;&gt;&lt;/a&gt;redis数据结构 – 哈希&lt;/h2&gt;&lt;p&gt;最后要给大家介绍的是hashes，即哈希。哈希是从redis-2.0.0版本之后才有的数据结构。&lt;br&gt;hashes存的是字符串和字符串值之间的映射，比如一个用户要存储其全名、姓氏、年龄等等，就很适合使用哈希。&lt;br&gt;我们来看一个例子：   &lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//建立哈希，并赋值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; HMSET &lt;span class=&quot;string&quot;&gt;user:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;001&lt;/span&gt; username antirez password P1pp0 age &lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//列出哈希的内容&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; HGETALL &lt;span class=&quot;string&quot;&gt;user:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;001&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;antirez&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;P1pp0&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;34&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//更改哈希中的某一个值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; HSET &lt;span class=&quot;string&quot;&gt;user:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;001&lt;/span&gt; password &lt;span class=&quot;number&quot;&gt;12345&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//再次列出哈希的内容&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; HGETALL &lt;span class=&quot;string&quot;&gt;user:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;001&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;antirez&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;12345&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;34&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有关hashes的操作，同样很丰富，需要时，大家可以从这里查询。  &lt;/p&gt;
&lt;h2 id=&quot;聊聊redis持久化-–-两种方式&quot;&gt;&lt;a href=&quot;#聊聊redis持久化-–-两种方式&quot; class=&quot;headerlink&quot; title=&quot;聊聊redis持久化 – 两种方式&quot;&gt;&lt;/a&gt;聊聊redis持久化 – 两种方式&lt;/h2&gt;&lt;p&gt;redis提供了两种持久化的方式，分别是RDB（Redis DataBase）和AOF（Append Only File）。&lt;br&gt;RDB，简而言之，就是在不同的时间点，将redis存储的数据生成快照并存储到磁盘等介质上；&lt;br&gt;AOF，则是换了一个角度来实现持久化，那就是将redis执行过的所有写指令记录下来，在下次redis重新启动时，只要把这些写指令从前到后再重复执行一遍，就可以实现数据恢复了。  &lt;/p&gt;
&lt;p&gt;其实RDB和AOF两种方式也可以同时使用，在这种情况下，如果redis重启的话，则会优先采用AOF方式来进行数据恢复，这是因为AOF方式的数据恢复完整度更高。&lt;br&gt;如果你没有数据持久化的需求，也完全可以关闭RDB和AOF方式，这样的话，redis将变成一个纯内存数据库，就像memcache一样。&lt;/p&gt;
&lt;h2 id=&quot;聊聊redis持久化-–-RDB&quot;&gt;&lt;a href=&quot;#聊聊redis持久化-–-RDB&quot; class=&quot;headerlink&quot; title=&quot;聊聊redis持久化 – RDB&quot;&gt;&lt;/a&gt;聊聊redis持久化 – RDB&lt;/h2&gt;&lt;p&gt;RDB方式，是将redis某一时刻的数据持久化到磁盘中，是一种快照式的持久化方法。  &lt;/p&gt;
&lt;p&gt;redis在进行数据持久化的过程中，会先将数据写入到一个临时文件中，待持久化过程都结束了，才会用这个临时文件替换上次持久化好的文件。正是这种特性，让我们可以随时来进行备份，因为快照文件总是完整可用的。  &lt;/p&gt;
&lt;p&gt;对于RDB方式，redis会单独创建（fork）一个子进程来进行持久化，而主进程是不会进行任何IO操作的，这样就确保了redis极高的性能。&lt;/p&gt;
&lt;p&gt;如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。&lt;/p&gt;
&lt;p&gt;虽然RDB有不少优点，但它的缺点也是不容忽视的。如果你对数据的完整性非常敏感，那么RDB方式就不太适合你，因为即使你每5分钟都持久化一次，当redis故障时，仍然会有近5分钟的数据丢失。所以，redis还提供了另一种持久化方式，那就是AOF。&lt;/p&gt;
&lt;h2 id=&quot;聊聊redis持久化-–-AOF&quot;&gt;&lt;a href=&quot;#聊聊redis持久化-–-AOF&quot; class=&quot;headerlink&quot; title=&quot;聊聊redis持久化 – AOF&quot;&gt;&lt;/a&gt;聊聊redis持久化 – AOF&lt;/h2&gt;&lt;p&gt;AOF，英文是Append Only File，即只允许追加不允许改写的文件。&lt;/p&gt;
&lt;p&gt;如前面介绍的，AOF方式是将执行过的写指令记录下来，在数据恢复时按照从前到后的顺序再将指令都执行一遍，就这么简单。&lt;/p&gt;
&lt;p&gt;我们通过配置redis.conf中的appendonly yes就可以打开AOF功能。如果有写操作（如SET等），redis就会被追加到AOF文件的末尾。&lt;/p&gt;
&lt;p&gt;默认的AOF持久化策略是每秒钟fsync一次（fsync是指把缓存中的写指令记录到磁盘中），因为在这种情况下，redis仍然可以保持很好的处理性能，即使redis故障，也只会丢失最近1秒钟的数据。&lt;/p&gt;
&lt;p&gt;如果在追加日志时，恰好遇到磁盘空间满、inode满或断电等情况导致日志写入不完整，也没有关系，redis提供了redis-check-aof工具，可以用来进行日志修复。&lt;/p&gt;
&lt;p&gt;因为采用了追加方式，如果不做任何处理的话，AOF文件会变得越来越大，为此，redis提供了AOF文件重写（rewrite）机制，即当AOF文件的大小超过所设定的阈值时，redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集。举个例子或许更形象，假如我们调用了100次INCR指令，在AOF文件中就要存储100条指令，但这明显是很低效的，完全可以把这100条指令合并成一条SET指令，这就是重写机制的原理。&lt;/p&gt;
&lt;p&gt;在进行AOF重写时，仍然是采用先写临时文件，全部完成后再替换的流程，所以断电、磁盘满等问题都不会影响AOF文件的可用性，这点大家可以放心。&lt;/p&gt;
&lt;p&gt;AOF方式的另一个好处，我们通过一个“场景再现”来说明。某同学在操作redis时，不小心执行了FLUSHALL，导致redis内存中的数据全部被清空了，这是很悲剧的事情。不过这也不是世界末日，只要redis配置了AOF持久化方式，且AOF文件还没有被重写（rewrite），我们就可以用最快的速度暂停redis并编辑AOF文件，将最后一行的FLUSHALL命令删除，然后重启redis，就可以恢复redis的所有数据到FLUSHALL之前的状态了。是不是很神奇，这就是AOF持久化方式的好处之一。但是如果AOF文件已经被重写了，那就无法通过这种方法来恢复数据了。&lt;/p&gt;
&lt;p&gt;虽然优点多多，但AOF方式也同样存在缺陷，比如在同样数据规模的情况下，AOF文件要比RDB文件的体积大。而且，AOF方式的恢复速度也要慢于RDB方式。&lt;/p&gt;
&lt;p&gt;如果你直接执行BGREWRITEAOF命令，那么redis会生成一个全新的AOF文件，其中便包括了可以恢复现有数据的最少的命令集。&lt;/p&gt;
&lt;p&gt;如果运气比较差，AOF文件出现了被写坏的情况，也不必过分担忧，redis并不会贸然加载这个有问题的AOF文件，而是报错退出。这时可以通过以下步骤来修复出错的文件：&lt;/p&gt;
&lt;p&gt;备份被写坏的AOF文件&lt;br&gt;运行redis-check-aof –fix进行修复&lt;br&gt;用diff -u来看下两个文件的差异，确认问题点&lt;br&gt;重启redis，加载修复后的AOF文件&lt;/p&gt;
&lt;h2 id=&quot;聊聊redis持久化-–-AOF重写&quot;&gt;&lt;a href=&quot;#聊聊redis持久化-–-AOF重写&quot; class=&quot;headerlink&quot; title=&quot;聊聊redis持久化 – AOF重写&quot;&gt;&lt;/a&gt;聊聊redis持久化 – AOF重写&lt;/h2&gt;&lt;p&gt;AOF重写的内部运行原理，我们有必要了解一下。&lt;/p&gt;
&lt;p&gt;在重写即将开始之际，redis会创建（fork）一个“重写子进程”，这个子进程会首先读取现有的AOF文件，并将其包含的指令进行分析压缩并写入到一个临时文件中。&lt;/p&gt;
&lt;p&gt;与此同时，主工作进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的AOF文件中，这样做是保证原有的AOF文件的可用性，避免在重写过程中出现意外。&lt;/p&gt;
&lt;p&gt;当“重写子进程”完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新AOF文件中。&lt;/p&gt;
&lt;p&gt;当追加结束后，redis就会用新AOF文件来代替旧AOF文件，之后再有新的写指令，就都会追加到新的AOF文件中了。  &lt;/p&gt;
&lt;h2 id=&quot;聊聊redis持久化-–-如何选择RDB和AOF&quot;&gt;&lt;a href=&quot;#聊聊redis持久化-–-如何选择RDB和AOF&quot; class=&quot;headerlink&quot; title=&quot;聊聊redis持久化 – 如何选择RDB和AOF&quot;&gt;&lt;/a&gt;聊聊redis持久化 – 如何选择RDB和AOF&lt;/h2&gt;&lt;p&gt;对于我们应该选择RDB还是AOF，官方的建议是两个同时使用。这样可以提供更可靠的持久化方案。  &lt;/p&gt;
&lt;h2 id=&quot;聊聊主从-–-用法&quot;&gt;&lt;a href=&quot;#聊聊主从-–-用法&quot; class=&quot;headerlink&quot; title=&quot;聊聊主从 – 用法&quot;&gt;&lt;/a&gt;聊聊主从 – 用法&lt;/h2&gt;&lt;p&gt;像MySQL一样，redis是支持主从同步的，而且也支持一主多从以及多级从结构。&lt;/p&gt;
&lt;p&gt;主从结构，一是为了纯粹的冗余备份，二是为了提升读性能，比如很消耗性能的SORT就可以由从服务器来承担。&lt;/p&gt;
&lt;p&gt;redis的主从同步是异步进行的，这意味着主从同步不会影响主逻辑，也不会降低redis的处理性能。&lt;/p&gt;
&lt;p&gt;主从架构中，可以考虑关闭主服务器的数据持久化功能，只让从服务器进行持久化，这样可以提高主服务器的处理性能。&lt;/p&gt;
&lt;p&gt;在主从架构中，从服务器通常被设置为只读模式，这样可以避免从服务器的数据被误修改。但是从服务器仍然可以接受CONFIG等指令，所以还是不应该将从服务器直接暴露到不安全的网络环境中。如果必须如此，那可以考虑给重要指令进行重命名，来避免命令被外人误执行。&lt;/p&gt;
&lt;h2 id=&quot;聊聊主从-–-同步原理&quot;&gt;&lt;a href=&quot;#聊聊主从-–-同步原理&quot; class=&quot;headerlink&quot; title=&quot;聊聊主从 – 同步原理&quot;&gt;&lt;/a&gt;聊聊主从 – 同步原理&lt;/h2&gt;&lt;p&gt;从服务器会向主服务器发出SYNC指令，当主服务器接到此命令后，就会调用BGSAVE指令来创建一个子进程专门进行数据持久化工作，也就是将主服务器的数据写入RDB文件中。在数据持久化期间，主服务器将执行的写指令都缓存在内存中。&lt;/p&gt;
&lt;p&gt;在BGSAVE指令执行完成后，主服务器会将持久化好的RDB文件发送给从服务器，从服务器接到此文件后会将其存储到磁盘上，然后再将其读取到内存中。这个动作完成后，主服务器会将这段时间缓存的写指令再以redis协议的格式发送给从服务器。&lt;/p&gt;
&lt;p&gt;另外，要说的一点是，即使有多个从服务器同时发来SYNC指令，主服务器也只会执行一次BGSAVE，然后把持久化好的RDB文件发给多个下游。在redis2.8版本之前，如果从服务器与主服务器因某些原因断开连接的话，都会进行一次主从之间的全量的数据同步；而在2.8版本之后，redis支持了效率更高的增量同步策略，这大大降低了连接断开的恢复成本。&lt;/p&gt;
&lt;p&gt;主服务器会在内存中维护一个缓冲区，缓冲区中存储着将要发给从服务器的内容。从服务器在与主服务器出现网络瞬断之后，从服务器会尝试再次与主服务器连接，一旦连接成功，从服务器就会把“希望同步的主服务器ID”和“希望请求的数据的偏移位置（replication offset）”发送出去。主服务器接收到这样的同步请求后，首先会验证主服务器ID是否和自己的ID匹配，其次会检查“请求的偏移位置”是否存在于自己的缓冲区中，如果两者都满足的话，主服务器就会向从服务器发送增量内容。&lt;/p&gt;
&lt;p&gt;增量同步功能，需要服务器端支持全新的PSYNC指令。这个指令，只有在redis-2.8之后才具有。&lt;/p&gt;
&lt;h2 id=&quot;聊聊redis的事务处理&quot;&gt;&lt;a href=&quot;#聊聊redis的事务处理&quot; class=&quot;headerlink&quot; title=&quot;聊聊redis的事务处理&quot;&gt;&lt;/a&gt;聊聊redis的事务处理&lt;/h2&gt;&lt;p&gt;众所周知，事务是指“一个完整的动作，要么全部执行，要么什么也没有做”。&lt;/p&gt;
&lt;p&gt;在聊redis事务处理之前，要先和大家介绍四个redis指令，即MULTI、EXEC、DISCARD、WATCH。这四个指令构成了redis事务处理的基础。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MULTI用来组装一个事务；  &lt;/li&gt;
&lt;li&gt;EXEC用来执行一个事务；  &lt;/li&gt;
&lt;li&gt;DISCARD用来取消一个事务；  &lt;/li&gt;
&lt;li&gt;WATCH用来监视一些key，一旦这些key在事务执行之前被改变，则取消事务的执行。&lt;br&gt;纸上得来终觉浅，我们来看一个MULTI和EXEC的例子：  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;redis&amp;gt; MULTI &lt;span class=&quot;comment&quot;&gt;//标记事务开始&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis&amp;gt; INCR user_id &lt;span class=&quot;comment&quot;&gt;//多条命令按顺序入队&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis&amp;gt; INCR user_id&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis&amp;gt; INCR user_id&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis&amp;gt; PING&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis&amp;gt; EXEC &lt;span class=&quot;comment&quot;&gt;//执行&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;integer&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;integer&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;integer&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) PONG&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的例子中，我们看到了QUEUED的字样，这表示我们在用MULTI组装事务时，每一个命令都会进入到内存队列中缓存起来，如果出现QUEUED则表示我们这个命令成功插入了缓存队列，在将来执行EXEC时，这些被QUEUED的命令都会被组装成一个事务来执行。  &lt;/p&gt;
&lt;p&gt;对于事务的执行来说，如果redis开启了AOF持久化的话，那么一旦事务被成功执行，事务中的命令就会通过write命令一次性写到磁盘中去，如果在向磁盘中写的过程中恰好出现断电、硬件故障等问题，那么就可能出现只有部分命令进行了AOF持久化，这时AOF文件就会出现不完整的情况，这时，我们可以使用redis-check-aof工具来修复这一问题，这个工具会将AOF文件中不完整的信息移除，确保AOF文件完整可用。&lt;/p&gt;
&lt;p&gt;有关事务，大家经常会遇到的是两类错误：  &lt;/p&gt;
&lt;p&gt;调用EXEC之前的错误&lt;br&gt;调用EXEC之后的错误&lt;br&gt;“调用EXEC之前的错误”，有可能是由于语法有误导致的，也可能时由于内存不足导致的。只要出现某个命令无法成功写入缓冲队列的情况，redis都会进行记录，在客户端调用EXEC时，redis会拒绝执行这一事务。（这时2.6.5版本之后的策略。在2.6.5之前的版本中，redis会忽略那些入队失败的命令，只执行那些入队成功的命令）。我们来看一个这样的例子：    &lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; multi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; haha //一个明显错误的指令&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(error) ERR unknown command &lt;span class=&quot;string&quot;&gt;&#39;haha&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; ping&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; exec&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//redis无情的拒绝了事务的执行，原因是“之前出现了错误”&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(error) EXECABORT Transaction discarded because of previous errors.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而对于“调用EXEC之后的错误”，redis则采取了完全不同的策略，即redis不会理睬这些错误，而是继续向下执行事务中的其他命令。这是因为，对于应用层面的错误，并不是redis自身需要考虑和处理的问题，所以一个事务中如果某一条命令执行失败，并不会影响接下来的其他命令的执行。我们也来看一个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; multi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; set age &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//age不是集合，所以如下是一条明显错误的指令&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; sadd age &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; set age &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; exec //执行事务时，redis不会理睬第&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;条指令执行错误&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) (error) WRONGTYPE Operation against a key holding the wrong kind of value&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; get age&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;29&quot;&lt;/span&gt; //可以看出第&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;条指令被成功执行了&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好了，我们来说说最后一个指令“WATCH”，这是一个很好用的指令，它可以帮我们实现类似于“乐观锁”的效果，即CAS（check and set）。&lt;/p&gt;
&lt;p&gt;WATCH本身的作用是“监视key是否被改动过”，而且支持同时监视多个key，只要还没真正触发事务，WATCH都会尽职尽责的监视，一旦发现某个key被修改了，在执行EXEC时就会返回nil，表示事务无法触发。  &lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; set age &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; watch age //开始监视age&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; set age &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; //在EXEC之前，age的值被修改了&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; multi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; set age &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; get age&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; exec //触发EXEC&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(nil) //事务无法被执行&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;教你看懂redis配置-–-简介&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-–-简介&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 – 简介&quot;&gt;&lt;/a&gt;教你看懂redis配置 – 简介&lt;/h2&gt;&lt;p&gt;我们可以在启动redis-server时指定应该加载的配置文件，方法如下：&lt;/p&gt;
&lt;p&gt;$ redis-server /path/to/redis.conf&lt;br&gt;接下来，我们就来讲解下redis配置文件的各个配置项的含义，注意，本文是基于redis-2.8.4版本进行讲解的。&lt;/p&gt;
&lt;p&gt;redis官方提供的redis.conf文件，足有700+行，其中100多行为有效配置行，另外的600多行为注释说明。&lt;/p&gt;
&lt;p&gt;在配置文件的开头部分，首先明确了一些度量单位：&lt;/p&gt;
&lt;p&gt; 1k =&amp;gt; 1000 bytes&lt;br&gt; 1kb =&amp;gt; 1024 bytes&lt;br&gt; 1m =&amp;gt; 1000000 bytes&lt;br&gt; 1mb =&amp;gt; 1024&lt;em&gt;1024 bytes&lt;br&gt; 1g =&amp;gt; 1000000000 bytes&lt;br&gt; 1gb =&amp;gt; 1024&lt;/em&gt;1024*1024 bytes&lt;/p&gt;
&lt;p&gt;可以看出，redis配置中对单位的大小写不敏感，1GB、1Gb和1gB都是相同的。由此也说明，redis只支持bytes，不支持bit单位。&lt;/p&gt;
&lt;p&gt;redis支持“主配置文件中引入外部配置文件”，很像C/C++中的include指令，比如：&lt;/p&gt;
&lt;p&gt;include /path/to/other.conf&lt;br&gt;如果你看过redis的配置文件，会发现还是很有条理的。redis配置文件被分成了几大块区域，它们分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通用（general）&lt;/li&gt;
&lt;li&gt;快照（snapshotting）&lt;/li&gt;
&lt;li&gt;复制（replication）&lt;/li&gt;
&lt;li&gt;安全（security）&lt;/li&gt;
&lt;li&gt;限制（limits)&lt;/li&gt;
&lt;li&gt;追加模式（append only mode)&lt;/li&gt;
&lt;li&gt;LUA脚本（lua scripting)&lt;/li&gt;
&lt;li&gt;慢日志（slow log)&lt;/li&gt;
&lt;li&gt;事件通知（event notification）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们就来逐一讲解。&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-通用&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-通用&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置-通用&quot;&gt;&lt;/a&gt;教你看懂redis配置-通用&lt;/h2&gt;&lt;p&gt;默认情况下，redis并不是以daemon形式来运行的。通过daemonize配置项可以控制redis的运行形式，如果改为yes，那么redis就会以daemon形式运行：&lt;/p&gt;
&lt;p&gt;daemonize no&lt;br&gt;当以daemon形式运行时，redis会生成一个pid文件，默认会生成在/var/run/redis.pid。当然，你可以通过pidfile来指定pid文件生成的位置，比如：&lt;/p&gt;
&lt;p&gt;pidfile /path/to/redis.pid&lt;br&gt;默认情况下，redis会响应本机所有可用网卡的连接请求。当然，redis允许你通过bind配置项来指定要绑定的IP，比如：&lt;/p&gt;
&lt;p&gt;bind 192.168.1.2 10.8.4.2&lt;br&gt;redis的默认服务端口是6379，你可以通过port配置项来修改。如果端口设置为0的话，redis便不会监听端口了。&lt;/p&gt;
&lt;p&gt;port 6379&lt;br&gt;有些同学会问“如果redis不监听端口，还怎么与外界通信呢”，其实redis还支持通过unix socket方式来接收请求。可以通过unixsocket配置项来指定unix socket文件的路径，并通过unixsocketperm来指定文件的权限。&lt;/p&gt;
&lt;p&gt;unixsocket /tmp/redis.sock&lt;br&gt;unixsocketperm 755&lt;br&gt;当一个redis-client一直没有请求发向server端，那么server端有权主动关闭这个连接，可以通过timeout来设置“空闲超时时限”，0表示永不关闭。&lt;/p&gt;
&lt;p&gt;timeout 0&lt;br&gt;TCP连接保活策略，可以通过tcp-keepalive配置项来进行设置，单位为秒，假如设置为60秒，则server端会每60秒向连接空闲的客户端发起一次ACK请求，以检查客户端是否已经挂掉，对于无响应的客户端则会关闭其连接。所以关闭一个连接最长需要120秒的时间。如果设置为0，则不会进行保活检测。&lt;/p&gt;
&lt;p&gt;tcp-keepalive 0&lt;br&gt;redis支持通过loglevel配置项设置日志等级，共分四级，即debug、verbose、notice、warning。&lt;/p&gt;
&lt;p&gt;loglevel notice&lt;br&gt;redis也支持通过logfile配置项来设置日志文件的生成位置。如果设置为空字符串，则redis会将日志输出到标准输出。假如你在daemon情况下将日志设置为输出到标准输出，则日志会被写到/dev/null中。&lt;/p&gt;
&lt;p&gt;logfile “”&lt;br&gt;如果希望日志打印到syslog中，也很容易，通过syslog-enabled来控制。另外，syslog-ident还可以让你指定syslog里的日志标志，比如：&lt;/p&gt;
&lt;p&gt;syslog-ident redis&lt;br&gt;而且还支持指定syslog设备，值可以是USER或LOCAL0-LOCAL7。具体可以参考syslog服务本身的用法。&lt;/p&gt;
&lt;p&gt;syslog-facility local0&lt;br&gt;对于redis来说，可以设置其数据库的总数量，假如你希望一个redis包含16个数据库，那么设置如下：&lt;/p&gt;
&lt;p&gt;databases 16&lt;br&gt;这16个数据库的编号将是0到15。默认的数据库是编号为0的数据库。用户可以使用select &lt;dbid&gt;来选择相应的数据库。&lt;/dbid&gt;&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-–-快照&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-–-快照&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 – 快照&quot;&gt;&lt;/a&gt;教你看懂redis配置 – 快照&lt;/h2&gt;&lt;p&gt;快照，主要涉及的是redis的RDB持久化相关的配置，我们来一起看一看。&lt;/p&gt;
&lt;p&gt;我们可以用如下的指令来让数据保存到磁盘上，即控制RDB快照功能：&lt;/p&gt;
&lt;p&gt;save &lt;seconds&gt; &lt;changes&gt;&lt;br&gt;举例来说：&lt;/changes&gt;&lt;/seconds&gt;&lt;/p&gt;
&lt;p&gt;save 900 1 //表示每15分钟且至少有1个key改变，就触发一次持久化&lt;/p&gt;
&lt;p&gt;save 300 10 //表示每5分钟且至少有10个key改变，就触发一次持久化&lt;/p&gt;
&lt;p&gt;save 60 10000 //表示每60秒至少有10000个key改变，就触发一次持久化&lt;br&gt;如果你想禁用RDB持久化的策略，只要不设置任何save指令就可以，或者给save传入一个空字符串参数也可以达到相同效果，就像这样：&lt;/p&gt;
&lt;p&gt;save “”&lt;br&gt;如果用户开启了RDB快照功能，那么在redis持久化数据到磁盘时如果出现失败，默认情况下，redis会停止接受所有的写请求。这样做的好处在于可以让用户很明确的知道内存中的数据和磁盘上的数据已经存在不一致了。如果redis不顾这种不一致，一意孤行的继续接收写请求，就可能会引起一些灾难性的后果。&lt;/p&gt;
&lt;p&gt;如果下一次RDB持久化成功，redis会自动恢复接受写请求。&lt;/p&gt;
&lt;p&gt;当然，如果你不在乎这种数据不一致或者有其他的手段发现和控制这种不一致的话，你完全可以关闭这个功能，以便在快照写入失败时，也能确保redis继续接受新的写请求。配置项如下：&lt;/p&gt;
&lt;p&gt;stop-writes-on-bgsave-error yes&lt;br&gt;对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能，但是存储在磁盘上的快照会比较大。&lt;/p&gt;
&lt;p&gt;rdbcompression yes&lt;br&gt;在存储快照后，我们还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果你希望获取到最大的性能提升，可以关闭此功能。&lt;/p&gt;
&lt;p&gt;rdbchecksum yes&lt;br&gt;我们还可以设置快照文件的名称，默认是这样配置的：&lt;/p&gt;
&lt;p&gt;dbfilename dump.rdb&lt;br&gt;最后，你还可以设置这个快照文件存放的路径。比如默认设置就是当前文件夹：&lt;/p&gt;
&lt;p&gt;dir ./&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-–-复制&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-–-复制&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 – 复制&quot;&gt;&lt;/a&gt;教你看懂redis配置 – 复制&lt;/h2&gt;&lt;p&gt;redis提供了主从同步功能。&lt;/p&gt;
&lt;p&gt;通过slaveof配置项可以控制某一个redis作为另一个redis的从服务器，通过指定IP和端口来定位到主redis的位置。一般情况下，我们会建议用户为从redis设置一个不同频率的快照持久化的周期，或者为从redis配置一个不同的服务端口等等。&lt;/p&gt;
&lt;p&gt;slaveof &lt;masterip&gt; &lt;masterport&gt;&lt;br&gt;如果主redis设置了验证密码的话（使用requirepass来设置），则在从redis的配置中要使用masterauth来设置校验密码，否则的话，主redis会拒绝从redis的访问请求。&lt;/masterport&gt;&lt;/masterip&gt;&lt;/p&gt;
&lt;p&gt;masterauth &lt;master-password&gt;&lt;br&gt;当从redis失去了与主redis的连接，或者主从同步正在进行中时，redis该如何处理外部发来的访问请求呢？这里，从redis可以有两种选择：&lt;/master-password&gt;&lt;/p&gt;
&lt;p&gt;第一种选择：如果slave-serve-stale-data设置为yes（默认），则从redis仍会继续响应客户端的读写请求。&lt;/p&gt;
&lt;p&gt;第二种选择：如果slave-serve-stale-data设置为no，则从redis会对客户端的请求返回“SYNC with master in progress”，当然也有例外，当客户端发来INFO请求和SLAVEOF请求，从redis还是会进行处理。&lt;/p&gt;
&lt;p&gt;你可以控制一个从redis是否可以接受写请求。将数据直接写入从redis，一般只适用于那些生命周期非常短的数据，因为在主从同步时，这些临时数据就会被清理掉。自从redis2.6版本之后，默认从redis为只读。&lt;/p&gt;
&lt;p&gt;slave-read-only yes&lt;br&gt;只读的从redis并不适合直接暴露给不可信的客户端。为了尽量降低风险，可以使用rename-command指令来将一些可能有破坏力的命令重命名，避免外部直接调用。比如：&lt;/p&gt;
&lt;p&gt;rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52&lt;br&gt;从redis会周期性的向主redis发出PING包。你可以通过repl_ping_slave_period指令来控制其周期。默认是10秒。&lt;/p&gt;
&lt;p&gt;repl-ping-slave-period 10&lt;br&gt;在主从同步时，可能在这些情况下会有超时发生：&lt;/p&gt;
&lt;p&gt;以从redis的角度来看，当有大规模IO传输时。&lt;br&gt;以从redis的角度来看，当数据传输或PING时，主redis超时&lt;br&gt;以主redis的角度来看，在回复从redis的PING时，从redis超时&lt;br&gt;用户可以设置上述超时的时限，不过要确保这个时限比repl-ping-slave-period的值要大，否则每次主redis都会认为从redis超时。&lt;/p&gt;
&lt;p&gt;repl-timeout 60&lt;br&gt;我们可以控制在主从同步时是否禁用TCP_NODELAY。如果开启TCP_NODELAY，那么主redis会使用更少的TCP包和更少的带宽来向从redis传输数据。但是这可能会增加一些同步的延迟，大概会达到40毫秒左右。如果你关闭了TCP_NODELAY，那么数据同步的延迟时间会降低，但是会消耗更多的带宽。（如果你不了解TCP_NODELAY，可以到这里来科普一下）。&lt;/p&gt;
&lt;p&gt;repl-disable-tcp-nodelay no&lt;br&gt;我们还可以设置同步队列长度。队列长度（backlog)是主redis中的一个缓冲区，在与从redis断开连接期间，主redis会用这个缓冲区来缓存应该发给从redis的数据。这样的话，当从redis重新连接上之后，就不必重新全量同步数据，只需要同步这部分增量数据即可。&lt;/p&gt;
&lt;p&gt;repl-backlog-size 1mb&lt;br&gt;如果主redis等了一段时间之后，还是无法连接到从redis，那么缓冲队列中的数据将被清理掉。我们可以设置主redis要等待的时间长度。如果设置为0，则表示永远不清理。默认是1个小时。&lt;/p&gt;
&lt;p&gt;repl-backlog-ttl 3600&lt;br&gt;我们可以给众多的从redis设置优先级，在主redis持续工作不正常的情况，优先级高的从redis将会升级为主redis。而编号越小，优先级越高。比如一个主redis有三个从redis，优先级编号分别为10、100、25，那么编号为10的从redis将会被首先选中升级为主redis。当优先级被设置为0时，这个从redis将永远也不会被选中。默认的优先级为100。&lt;/p&gt;
&lt;p&gt;slave-priority 100&lt;br&gt;假如主redis发现有超过M个从redis的连接延时大于N秒，那么主redis就停止接受外来的写请求。这是因为从redis一般会每秒钟都向主redis发出PING，而主redis会记录每一个从redis最近一次发来PING的时间点，所以主redis能够了解每一个从redis的运行情况。&lt;/p&gt;
&lt;p&gt;min-slaves-to-write 3&lt;br&gt;min-slaves-max-lag 10&lt;br&gt;上面这个例子表示，假如有大于等于3个从redis的连接延迟大于10秒，那么主redis就不再接受外部的写请求。上述两个配置中有一个被置为0，则这个特性将被关闭。默认情况下min-slaves-to-write为0，而min-slaves-max-lag为10。&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-–-安全&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-–-安全&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 – 安全&quot;&gt;&lt;/a&gt;教你看懂redis配置 – 安全&lt;/h2&gt;&lt;p&gt;我们可以要求redis客户端在向redis-server发送请求之前，先进行密码验证。当你的redis-server处于一个不太可信的网络环境中时，相信你会用上这个功能。由于redis性能非常高，所以每秒钟可以完成多达15万次的密码尝试，所以你最好设置一个足够复杂的密码，否则很容易被黑客破解。&lt;/p&gt;
&lt;p&gt;requirepass zhimakaimen&lt;br&gt;这里我们通过requirepass将密码设置成“芝麻开门”。&lt;/p&gt;
&lt;p&gt;redis允许我们对redis指令进行更名，比如将一些比较危险的命令改个名字，避免被误执行。比如可以把CONFIG命令改成一个很复杂的名字，这样可以避免外部的调用，同时还可以满足内部调用的需要：&lt;/p&gt;
&lt;p&gt;rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c89&lt;br&gt;我们甚至可以禁用掉CONFIG命令，那就是把CONFIG的名字改成一个空字符串：&lt;/p&gt;
&lt;p&gt;rename-command CONFIG “”&lt;br&gt;但需要注意的是，如果你使用AOF方式进行数据持久化，或者需要与从redis进行通信，那么更改指令的名字可能会引起一些问题。&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-限制&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-限制&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 -限制&quot;&gt;&lt;/a&gt;教你看懂redis配置 -限制&lt;/h2&gt;&lt;p&gt;我们可以设置redis同时可以与多少个客户端进行连接。默认情况下为10000个客户端。当你无法设置进程文件句柄限制时，redis会设置为当前的文件句柄限制值减去32，因为redis会为自身内部处理逻辑留一些句柄出来。&lt;/p&gt;
&lt;p&gt;如果达到了此限制，redis则会拒绝新的连接请求，并且向这些连接请求方发出“max number of clients reached”以作回应。&lt;/p&gt;
&lt;p&gt;maxclients 10000&lt;br&gt;我们甚至可以设置redis可以使用的内存量。一旦到达内存使用上限，redis将会试图移除内部数据，移除规则可以通过maxmemory-policy来指定。&lt;/p&gt;
&lt;p&gt;如果redis无法根据移除规则来移除内存中的数据，或者我们设置了“不允许移除”，那么redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPUSH等。但是对于无内存申请的指令，仍然会正常响应，比如GET等。&lt;/p&gt;
&lt;p&gt;maxmemory &lt;bytes&gt;&lt;br&gt;需要注意的一点是，如果你的redis是主redis（说明你的redis有从redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素。&lt;/bytes&gt;&lt;/p&gt;
&lt;p&gt;对于内存移除规则来说，redis提供了多达6种的移除规则。他们是：&lt;/p&gt;
&lt;p&gt;volatile-lru：使用LRU算法移除过期集合中的key&lt;br&gt;allkeys-lru：使用LRU算法移除key&lt;br&gt;volatile-random：在过期集合中移除随机的key&lt;br&gt;allkeys-random：移除随机的key&lt;br&gt;volatile-ttl：移除那些TTL值最小的key，即那些最近才过期的key。&lt;br&gt;noeviction：不进行移除。针对写操作，只是返回错误信息。&lt;br&gt;无论使用上述哪一种移除规则，如果没有合适的key可以移除的话，redis都会针对写请求返回错误信息。&lt;/p&gt;
&lt;p&gt;maxmemory-policy volatile-lru&lt;br&gt;LRU算法和最小TTL算法都并非是精确的算法，而是估算值。所以你可以设置样本的大小。假如redis默认会检查三个key并选择其中LRU的那个，那么你可以改变这个key样本的数量。&lt;/p&gt;
&lt;p&gt;maxmemory-samples 3&lt;br&gt;最后，我们补充一个信息，那就是到目前版本（2.8.4）为止，redis支持的写指令包括了如下这些：&lt;/p&gt;
&lt;p&gt;set setnx setex append&lt;br&gt;incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd&lt;br&gt;sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby&lt;br&gt;zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby&lt;br&gt;getset mset msetnx exec sort&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-–-追加模式&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-–-追加模式&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 – 追加模式&quot;&gt;&lt;/a&gt;教你看懂redis配置 – 追加模式&lt;/h2&gt;&lt;p&gt;默认情况下，redis会异步的将数据持久化到磁盘。这种模式在大部分应用程序中已被验证是很有效的，但是在一些问题发生时，比如断电，则这种机制可能会导致数分钟的写请求丢失。&lt;/p&gt;
&lt;p&gt;如博文上半部分中介绍的，追加文件（Append Only File）是一种更好的保持数据一致性的方式。即使当服务器断电时，也仅会有1秒钟的写请求丢失，当redis进程出现问题且操作系统运行正常时，甚至只会丢失一条写请求。&lt;/p&gt;
&lt;p&gt;我们建议大家，AOF机制和RDB机制可以同时使用，不会有任何冲突。对于如何保持数据一致性的讨论，请参见本文。&lt;/p&gt;
&lt;p&gt;appendonly no&lt;br&gt;我们还可以设置aof文件的名称：&lt;/p&gt;
&lt;p&gt;appendfilename “appendonly.aof”&lt;br&gt;fsync()调用，用来告诉操作系统立即将缓存的指令写入磁盘。一些操作系统会“立即”进行，而另外一些操作系统则会“尽快”进行。&lt;/p&gt;
&lt;p&gt;redis支持三种不同的模式：&lt;/p&gt;
&lt;p&gt;no：不调用fsync()。而是让操作系统自行决定sync的时间。这种模式下，redis的性能会最快。&lt;br&gt;always：在每次写请求后都调用fsync()。这种模式下，redis会相对较慢，但数据最安全。&lt;br&gt;everysec：每秒钟调用一次fsync()。这是性能和安全的折衷。&lt;br&gt;默认情况下为everysec。有关数据一致性的揭秘，可以参考本文。&lt;/p&gt;
&lt;p&gt;appendfsync everysec&lt;br&gt;当fsync方式设置为always或everysec时，如果后台持久化进程需要执行一个很大的磁盘IO操作，那么redis可能会在fsync()调用时卡住。目前尚未修复这个问题，这是因为即使我们在另一个新的线程中去执行fsync()，也会阻塞住同步写调用。&lt;/p&gt;
&lt;p&gt;为了缓解这个问题，我们可以使用下面的配置项，这样的话，当BGSAVE或BGWRITEAOF运行时，fsync()在主进程中的调用会被阻止。这意味着当另一路进程正在对AOF文件进行重构时，redis的持久化功能就失效了，就好像我们设置了“appendsync none”一样。如果你的redis有时延问题，那么请将下面的选项设置为yes。否则请保持no，因为这是保证数据完整性的最安全的选择。&lt;/p&gt;
&lt;p&gt;no-appendfsync-on-rewrite no&lt;br&gt;我们允许redis自动重写aof。当aof增长到一定规模时，redis会隐式调用BGREWRITEAOF来重写log文件，以缩减文件体积。&lt;/p&gt;
&lt;p&gt;redis是这样工作的：redis会记录上次重写时的aof大小。假如redis自启动至今还没有进行过重写，那么启动时aof文件的大小会被作为基准值。这个基准值会和当前的aof大小进行比较。如果当前aof大小超出所设置的增长比例，则会触发重写。另外，你还需要设置一个最小大小，是为了防止在aof很小时就触发重写。&lt;/p&gt;
&lt;p&gt;auto-aof-rewrite-percentage 100&lt;br&gt;auto-aof-rewrite-min-size 64mb&lt;br&gt;如果设置auto-aof-rewrite-percentage为0，则会关闭此重写功能。&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-–-LUA脚本&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-–-LUA脚本&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 – LUA脚本&quot;&gt;&lt;/a&gt;教你看懂redis配置 – LUA脚本&lt;/h2&gt;&lt;p&gt;lua脚本的最大运行时间是需要被严格限制的，要注意单位是毫秒：&lt;/p&gt;
&lt;p&gt;lua-time-limit 5000&lt;br&gt;如果此值设置为0或负数，则既不会有报错也不会有时间限制。&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-–-慢日志&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-–-慢日志&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 – 慢日志&quot;&gt;&lt;/a&gt;教你看懂redis配置 – 慢日志&lt;/h2&gt;&lt;p&gt;redis慢日志是指一个系统进行日志查询超过了指定的时长。这个时长不包括IO操作，比如与客户端的交互、发送响应内容等，而仅包括实际执行查询命令的时间。&lt;/p&gt;
&lt;p&gt;针对慢日志，你可以设置两个参数，一个是执行时长，单位是微秒，另一个是慢日志的长度。当一个新的命令被写入日志时，最老的一条会从命令日志队列中被移除。&lt;/p&gt;
&lt;p&gt;单位是微秒，即1000000表示一秒。负数则会禁用慢日志功能，而0则表示强制记录每一个命令。&lt;/p&gt;
&lt;p&gt;slowlog-log-slower-than 10000&lt;br&gt;慢日志最大长度，可以随便填写数值，没有上限，但要注意它会消耗内存。你可以使用SLOWLOG RESET来重设这个值。&lt;/p&gt;
&lt;p&gt;slowlog-max-len 128&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-–-事件通知&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-–-事件通知&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 – 事件通知&quot;&gt;&lt;/a&gt;教你看懂redis配置 – 事件通知&lt;/h2&gt;&lt;p&gt;redis可以向客户端通知某些事件的发生。这个特性的具体解释可以参见本文。&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-–-高级配置&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-–-高级配置&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 – 高级配置&quot;&gt;&lt;/a&gt;教你看懂redis配置 – 高级配置&lt;/h2&gt;&lt;p&gt;有关哈希数据结构的一些配置项：&lt;/p&gt;
&lt;p&gt;hash-max-ziplist-entries 512&lt;br&gt;hash-max-ziplist-value 64&lt;br&gt;有关列表数据结构的一些配置项：&lt;/p&gt;
&lt;p&gt;list-max-ziplist-entries 512&lt;br&gt;list-max-ziplist-value 64&lt;br&gt;有关集合数据结构的配置项：&lt;/p&gt;
&lt;p&gt;set-max-intset-entries 512&lt;br&gt;有关有序集合数据结构的配置项：&lt;/p&gt;
&lt;p&gt;zset-max-ziplist-entries 128&lt;br&gt;zset-max-ziplist-value 64&lt;br&gt;关于是否需要再哈希的配置项：&lt;/p&gt;
&lt;p&gt;activerehashing yes&lt;br&gt;关于客户端输出缓冲的控制项：&lt;/p&gt;
&lt;p&gt;client-output-buffer-limit normal 0 0 0&lt;br&gt;client-output-buffer-limit slave 256mb 64mb 60&lt;br&gt;client-output-buffer-limit pubsub 32mb 8mb 60&lt;br&gt;有关频率的配置项：&lt;/p&gt;
&lt;p&gt;hz 10&lt;br&gt;有关重写aof的配置项&lt;/p&gt;
&lt;p&gt;aof-rewrite-incremental-fsync yes&lt;/p&gt;
&lt;p&gt;至此，redis的入门内容就结束了，内容实在不少，但相对来说都很基础，本文没有涉及redis集群、redis工作原理、redis源码、redis相关LIB库等内容，后续会陆续奉献&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;redis是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库。&lt;br&gt;redis的官网地址，非常好记，是redis.io。（特意查了一下，域名后缀io属于国家域名，是british Indian Ocean territory，即英属印度洋领地）&lt;br&gt;目前，Vmware在资助着redis项目的开发和维护。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="redis" scheme="http://hangweiping.github.io/tags/redis/"/>
    
      <category term="数据库" scheme="http://hangweiping.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>git笔记</title>
    <link href="http://hangweiping.github.io/2016/05/06/git%E7%AC%94%E8%AE%B0/"/>
    <id>http://hangweiping.github.io/2016/05/06/git笔记/</id>
    <published>2016-05-06T12:16:46.000Z</published>
    <updated>2016-07-18T09:50:56.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。&lt;br&gt;Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。&lt;br&gt;Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Git-与-SVN-区别&quot;&gt;&lt;a href=&quot;#Git-与-SVN-区别&quot; class=&quot;headerlink&quot; title=&quot;Git 与 SVN 区别&quot;&gt;&lt;/a&gt;Git 与 SVN 区别&lt;/h3&gt;&lt;p&gt;GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。&lt;br&gt;如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。&lt;/li&gt;
&lt;li&gt;GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。    &lt;/li&gt;
&lt;li&gt;GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。  &lt;/li&gt;
&lt;li&gt;GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。  &lt;/li&gt;
&lt;li&gt;GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。    &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;git安装及初始设置&quot;&gt;&lt;a href=&quot;#git安装及初始设置&quot; class=&quot;headerlink&quot; title=&quot;git安装及初始设置&quot;&gt;&lt;/a&gt;git安装及初始设置&lt;/h2&gt;&lt;p&gt;安装完成后，还需要最后一步设置，在命令行输入：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global user.name &lt;span class=&quot;string&quot;&gt;&quot;Your Name&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global user.email &lt;span class=&quot;string&quot;&gt;&quot;email@example.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。&lt;/p&gt;
&lt;p&gt;注意&lt;code&gt;git config&lt;/code&gt;命令的&lt;code&gt;--global&lt;/code&gt;参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。&lt;/p&gt;
&lt;h2 id=&quot;基本操作-初始化，添加，提交，查看状态&quot;&gt;&lt;a href=&quot;#基本操作-初始化，添加，提交，查看状态&quot; class=&quot;headerlink&quot; title=&quot;基本操作(初始化，添加，提交，查看状态)&quot;&gt;&lt;/a&gt;基本操作(初始化，添加，提交，查看状态)&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;暂存区是Git非常重要的概念&lt;/strong&gt;，弄明白了暂存区，就弄明白了Git的很多操作到底干了什么。&lt;/p&gt;
&lt;p&gt;初始化一个Git仓库，使用&lt;code&gt;git init&lt;/code&gt;命令。&lt;br&gt;添加文件到Git仓库，分两步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步，使用命令&lt;code&gt;git add &amp;lt;file&amp;gt;&lt;/code&gt;，注意，可反复多次使用，添加多个文件；&lt;/li&gt;
&lt;li&gt;第二步，使用命令&lt;code&gt;git commit&lt;/code&gt;，完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要随时掌握工作区的状态，使用&lt;code&gt;git status&lt;/code&gt;命令。&lt;br&gt;如果&lt;code&gt;git status&lt;/code&gt;告诉你有文件被修改过，用&lt;code&gt;git diff&lt;/code&gt;可以查看修改内容。&lt;/p&gt;
&lt;h3 id=&quot;版本回退&quot;&gt;&lt;a href=&quot;#版本回退&quot; class=&quot;headerlink&quot; title=&quot;版本回退&quot;&gt;&lt;/a&gt;版本回退&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令&lt;code&gt;git reset --hard commit_id&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;穿梭前，用&lt;code&gt;git log&lt;/code&gt;可以查看提交历史，以便确定要回退到哪个版本。&lt;/li&gt;
&lt;li&gt;要重返未来，用&lt;code&gt;git reflog&lt;/code&gt;查看命令历史，以便确定要回到未来的哪个版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;add的实质&lt;/strong&gt; 理解Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中。&lt;/p&gt;
&lt;h3 id=&quot;撤销修改&quot;&gt;&lt;a href=&quot;#撤销修改&quot; class=&quot;headerlink&quot; title=&quot;撤销修改&quot;&gt;&lt;/a&gt;撤销修改&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令&lt;code&gt;git checkout -- file&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令&lt;code&gt;git reset HEAD file&lt;/code&gt;，就回到了场景1，第二步按场景1操作。&lt;/li&gt;
&lt;li&gt;场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命令&lt;code&gt;git rm&lt;/code&gt;用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。&lt;/p&gt;
&lt;h2 id=&quot;远程仓库&quot;&gt;&lt;a href=&quot;#远程仓库&quot; class=&quot;headerlink&quot; title=&quot;远程仓库&quot;&gt;&lt;/a&gt;远程仓库&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;要关联一个远程库，使用命令&lt;code&gt;git remote add origin git@server-name:path/repo-name.git&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;关联后，使用命令&lt;code&gt;git push -u origin master&lt;/code&gt;第一次推送master分支的所有内容；&lt;/li&gt;
&lt;li&gt;此后，每次本地提交后，只要有必要，就可以使用命令&lt;code&gt;git push origin master&lt;/code&gt;推送最新修改；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！&lt;/p&gt;
&lt;p&gt;要克隆一个仓库，首先必须知道仓库的地址，然后使用&lt;code&gt;git clone&lt;/code&gt;命令克隆。&lt;br&gt;Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。&lt;/p&gt;
&lt;h2 id=&quot;分支管理&quot;&gt;&lt;a href=&quot;#分支管理&quot; class=&quot;headerlink&quot; title=&quot;分支管理&quot;&gt;&lt;/a&gt;分支管理&lt;/h2&gt;&lt;p&gt;Git鼓励大量使用分支：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看分支：&lt;code&gt;git branch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建分支：&lt;code&gt;git branch &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;切换分支：&lt;code&gt;git checkout &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建+切换分支：&lt;code&gt;git checkout -b &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;合并某分支到当前分支：&lt;code&gt;git merge &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除分支：&lt;code&gt;git branch -d &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。&lt;br&gt;用&lt;code&gt;git log --graph&lt;/code&gt;命令可以看到分支合并图。&lt;/p&gt;
&lt;p&gt;合并分支时，加上&lt;code&gt;--no-ff&lt;/code&gt;参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而&lt;code&gt;fast forward&lt;/code&gt;合并就看不出来曾经做过合并。&lt;/p&gt;
&lt;p&gt;修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；&lt;br&gt;当手头工作没有完成时，先把工作现场&lt;code&gt;git stash&lt;/code&gt;一下，然后去修复bug，修复后，再&lt;code&gt;git stash pop&lt;/code&gt;，回到工作现场。&lt;/p&gt;
&lt;p&gt;如果要丢弃一个没有被合并过的分支，可以通过&lt;code&gt;git branch -D &amp;lt;name&amp;gt;&lt;/code&gt;强行删除。&lt;/p&gt;
&lt;h3 id=&quot;多人协作&quot;&gt;&lt;a href=&quot;#多人协作&quot; class=&quot;headerlink&quot; title=&quot;多人协作&quot;&gt;&lt;/a&gt;多人协作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;查看远程库信息，使用&lt;code&gt;git remote -v&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;本地新建的分支如果不推送到远程，对其他人就是不可见的；&lt;/li&gt;
&lt;li&gt;从本地推送分支，使用&lt;code&gt;git push origin branch-name&lt;/code&gt;，如果推送失败，先用&lt;code&gt;git pull&lt;/code&gt;抓取远程的新提交；&lt;/li&gt;
&lt;li&gt;在本地创建和远程分支对应的分支，使用&lt;code&gt;git checkout -b branch-name origin/branch-name&lt;/code&gt;，本地和远程分支的名称最好一致；&lt;/li&gt;
&lt;li&gt;建立本地分支和远程分支的关联，使用&lt;code&gt;git branch --set-upstream branch-name origin/branch-name&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;从远程抓取分支，使用`git pull，如果有冲突，要先处理冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;标签管理&quot;&gt;&lt;a href=&quot;#标签管理&quot; class=&quot;headerlink&quot; title=&quot;标签管理&quot;&gt;&lt;/a&gt;标签管理&lt;/h2&gt;&lt;h3 id=&quot;创作标签&quot;&gt;&lt;a href=&quot;#创作标签&quot; class=&quot;headerlink&quot; title=&quot;创作标签&quot;&gt;&lt;/a&gt;创作标签&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;命令&lt;code&gt;git tag &amp;lt;name&amp;gt;&lt;/code&gt;用于新建一个标签，默认为&lt;code&gt;HEAD&lt;/code&gt;，也可以指定一个&lt;code&gt;commit id&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag -a &amp;lt;tagname&amp;gt; -m &amp;quot;blablabla...&amp;quot;&lt;/code&gt;可以指定标签信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag -s &amp;lt;tagname&amp;gt; -m &amp;quot;blablabla...&amp;quot;&lt;/code&gt;可以用PGP签名标签；&lt;/li&gt;
&lt;li&gt;命令&lt;code&gt;git tag&lt;/code&gt;可以查看所有标签。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;操作标签&quot;&gt;&lt;a href=&quot;#操作标签&quot; class=&quot;headerlink&quot; title=&quot;操作标签&quot;&gt;&lt;/a&gt;操作标签&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;命令&lt;code&gt;git push origin &amp;lt;tagname&amp;gt;&lt;/code&gt;可以推送一个本地标签；&lt;/li&gt;
&lt;li&gt;命令&lt;code&gt;git push origin --tags&lt;/code&gt;可以推送全部未推送过的本地标签；&lt;/li&gt;
&lt;li&gt;命令&lt;code&gt;git tag -d &amp;lt;tagname&amp;gt;&lt;/code&gt;可以删除一个本地标签；&lt;/li&gt;
&lt;li&gt;命令&lt;code&gt;git push origin :refs/tags/&amp;lt;tagname&amp;gt;&lt;/code&gt;可以删除一个远程标签。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;自定义Git&quot;&gt;&lt;a href=&quot;#自定义Git&quot; class=&quot;headerlink&quot; title=&quot;自定义Git&quot;&gt;&lt;/a&gt;自定义Git&lt;/h2&gt;&lt;p&gt;让&lt;strong&gt;Git显示颜色&lt;/strong&gt;，会让命令输出看起来更醒目：&lt;br&gt;&lt;code&gt;$ git config --global color.ui true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;忽略某些文件&lt;/strong&gt;时，需要编写&lt;code&gt;.gitignore&lt;/code&gt;；&lt;br&gt;&lt;code&gt;.gitignore&lt;/code&gt;文件本身要放到版本库里，并且可以对&lt;code&gt;.gitignore&lt;/code&gt;做版本管理！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置别名&lt;/strong&gt;：Git配置文件都放在&lt;code&gt;.git/config&lt;/code&gt;文件中&lt;/p&gt;
&lt;p&gt;搭建Git服务器非常简单，通常10分钟即可完成.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。&lt;br&gt;Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。&lt;br&gt;Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://hangweiping.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>docker总结</title>
    <link href="http://hangweiping.github.io/2016/05/04/docker%E6%80%BB%E7%BB%93/"/>
    <id>http://hangweiping.github.io/2016/05/04/docker总结/</id>
    <published>2016-05-04T10:23:46.000Z</published>
    <updated>2016-06-28T13:33:21.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Docker的应用场景&quot;&gt;&lt;a href=&quot;#Docker的应用场景&quot; class=&quot;headerlink&quot; title=&quot;Docker的应用场景&quot;&gt;&lt;/a&gt;Docker的应用场景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Web 应用的自动化打包和发布。  &lt;/li&gt;
&lt;li&gt;自动化测试和持续集成、发布。  &lt;/li&gt;
&lt;li&gt;在服务型环境中部署和调整数据库或其他的后台应用。  &lt;/li&gt;
&lt;li&gt;从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Docker-的优点&quot;&gt;&lt;a href=&quot;#Docker-的优点&quot; class=&quot;headerlink&quot; title=&quot;Docker 的优点&quot;&gt;&lt;/a&gt;Docker 的优点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;简化程序：&lt;br&gt;Docker 让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，便可以实现虚拟化。Docker改变了虚拟化的方式，使开发者可以直接将自己的成果放入Docker中进行管理。方便快捷已经是 Docker的最大优势，过去需要用数天乃至数周的 任务，在Docker容器的处理下，只需要数秒就能完成。  &lt;/li&gt;
&lt;li&gt;避免选择恐惧症：&lt;br&gt;如果你有选择恐惧症，还是资深患者。Docker 帮你 打包你的纠结！比如 Docker 镜像；Docker 镜像中包含了运行环境和配置，所以 Docker 可以简化部署多种应用实例工作。比如 Web 应用、后台应用、数据库应用、大数据应用比如 Hadoop 集群、消息队列等等都可以打包成一个镜像部署。  &lt;/li&gt;
&lt;li&gt;节省开支：&lt;br&gt;一方面，云计算时代到来，使开发者不必为了追求效果而配置高额的硬件，Docker 改变了高性能必然高价格的思维定势。Docker 与云的结合，让云空间得到更充分的利用。不仅解决了硬件管理的问题，也改变了虚拟化的方式。  &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;容器运行方式&quot;&gt;&lt;a href=&quot;#容器运行方式&quot; class=&quot;headerlink&quot; title=&quot;容器运行方式&quot;&gt;&lt;/a&gt;容器运行方式&lt;/h2&gt;&lt;h3 id=&quot;输出Hello-world&quot;&gt;&lt;a href=&quot;#输出Hello-world&quot; class=&quot;headerlink&quot; title=&quot;输出Hello world&quot;&gt;&lt;/a&gt;输出Hello world&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;docker run ubuntu:15.10 /bin/echo &amp;quot;Hello world&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;各个参数解析：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;css设计指南-定位.mdocker: Docker 的二进制执行文件。  &lt;/li&gt;
&lt;li&gt;run:与前面的 docker 组合来运行一个容器。  &lt;/li&gt;
&lt;li&gt;ubuntu:15.10指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。  &lt;/li&gt;
&lt;li&gt;/bin/echo “Hello world”: 在启动的容器里执行的命令  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上命令完整的意思可以解释为：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo “Hello world”，然后输出结果。&lt;/p&gt;
&lt;h3 id=&quot;运行交互式的容器&quot;&gt;&lt;a href=&quot;#运行交互式的容器&quot; class=&quot;headerlink&quot; title=&quot;运行交互式的容器&quot;&gt;&lt;/a&gt;运行交互式的容器&lt;/h3&gt;&lt;p&gt;我们通过docker的两个参数 -i -t，让docker运行的容器实现”对话”的能力&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -i -t ubuntu:15.10 /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;各个参数解析：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i:在新容器内指定一个伪终端或终端。  &lt;/li&gt;
&lt;li&gt;-t:允许你对容器内的标准输入 (STDIN) 进行交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此时我们已进入一个 ubuntu15.10系统的容器&lt;br&gt;我们尝试在容器中运行命令 cat /proc/version和ls分别查看当前系统的版本信息和当前目录下的文件列表&lt;/p&gt;
&lt;h3 id=&quot;启动容器（后台模式）&quot;&gt;&lt;a href=&quot;#启动容器（后台模式）&quot; class=&quot;headerlink&quot; title=&quot;启动容器（后台模式）&quot;&gt;&lt;/a&gt;启动容器（后台模式）&lt;/h3&gt;&lt;p&gt;使用以下命令创建一个以进程方式运行的容器   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -d ubuntu:15.10 /bin/sh -c &amp;quot;while true; do echo hello world; sleep 1; done&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Docker-实例&quot;&gt;&lt;a href=&quot;#Docker-实例&quot; class=&quot;headerlink&quot; title=&quot;Docker 实例&quot;&gt;&lt;/a&gt;Docker 实例&lt;/h2&gt;&lt;h3 id=&quot;Docker-安装-MySQL&quot;&gt;&lt;a href=&quot;#Docker-安装-MySQL&quot; class=&quot;headerlink&quot; title=&quot;Docker 安装 MySQL&quot;&gt;&lt;/a&gt;Docker 安装 MySQL&lt;/h3&gt;&lt;p&gt;默认会在 3306 端口启动数据库&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=password -d mysql:latest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后就可以使用其它应用来连接到该容器。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run --name some-app --link some-mysql:mysql -d application-that-uses-mysql
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者通过 mysql&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -it --link some-mysql:mysql --rm mysql sh -c &amp;apos;exec mysql -h&amp;quot;$MYSQL_PORT_3306_TCP_ADDR&amp;quot; -P&amp;quot;$MYSQL_PORT_3306_TCP_PORT&amp;quot; -uroot -p&amp;quot;$MYSQL_ENV_MYSQL_ROOT_PASSWORD&amp;quot;&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;其他命令&quot;&gt;&lt;a href=&quot;#其他命令&quot; class=&quot;headerlink&quot; title=&quot;其他命令&quot;&gt;&lt;/a&gt;其他命令&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;docker rm `docker ps -a -q`  //删除所有容器
docker images //列出本地主机上的镜像
docker pull ubuntu:13.10 //获取一个新的镜像
docker search httpd //查找镜像
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;创建镜像&quot;&gt;&lt;a href=&quot;#创建镜像&quot; class=&quot;headerlink&quot; title=&quot;创建镜像&quot;&gt;&lt;/a&gt;创建镜像&lt;/h3&gt;&lt;p&gt;当我们从docker镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从已经创建的容器中更新镜像，并且提交这个镜像&lt;/li&gt;
&lt;li&gt;使用 Dockerfile 指令来创建一个新的镜像&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;更新镜像&quot;&gt;&lt;a href=&quot;#更新镜像&quot; class=&quot;headerlink&quot; title=&quot;更新镜像&quot;&gt;&lt;/a&gt;更新镜像&lt;/h3&gt;&lt;p&gt;更新镜像之前，我们需要使用镜像来创建一个容器。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -t -i ubuntu:15.10 /bin/bash
root@e218edb10161:/# //在运行的容器内使用 apt-get update 命令进行更新。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在完成操作之后，输入 exit命令来退出这个容器。&lt;br&gt;此时ID为e218edb10161的容器，是按我们的需求更改的容器。我们可以通过命令 docker commit来提交容器副本。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker commit -m=&amp;quot;has update&amp;quot; -a=&amp;quot;runoob&amp;quot; e218edb10161 runoob/ubuntu:v2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;各个参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-m:提交的描述信息&lt;/li&gt;
&lt;li&gt;-a:指定镜像作者&lt;/li&gt;
&lt;li&gt;e218edb10161：容器ID&lt;/li&gt;
&lt;li&gt;runoob/ubuntu:v2:指定要创建的目标镜像名&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;构建镜像&quot;&gt;&lt;a href=&quot;#构建镜像&quot; class=&quot;headerlink&quot; title=&quot;构建镜像&quot;&gt;&lt;/a&gt;构建镜像&lt;/h3&gt;&lt;p&gt;我们使用命令 docker build ， 从零开始来创建一个新的镜像。为此，我们需要创建一个 Dockerfile 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。&lt;/p&gt;
&lt;h3 id=&quot;设置镜像标签&quot;&gt;&lt;a href=&quot;#设置镜像标签&quot; class=&quot;headerlink&quot; title=&quot;设置镜像标签&quot;&gt;&lt;/a&gt;设置镜像标签&lt;/h3&gt;&lt;p&gt;我们可以使用 docker tag 命令，为镜像添加一个新的标签。  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker tag 860c279d2fec runoob/centos:dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;docker tag 镜像ID，这里是 860c279d2fec ,用户名称、镜像源名(repository name)和新的标签名(tag)。&lt;/p&gt;
&lt;h3 id=&quot;Docker容器连接&quot;&gt;&lt;a href=&quot;#Docker容器连接&quot; class=&quot;headerlink&quot; title=&quot;Docker容器连接&quot;&gt;&lt;/a&gt;Docker容器连接&lt;/h3&gt;&lt;p&gt;端口映射并不是唯一把 docker 连接到另一个容器的方法。&lt;br&gt;docker有一个连接系统允许将多个容器连接在一起，共享连接信息。&lt;br&gt;docker连接会创建一个父子关系，其中父容器可以看到子容器的信息。  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://hangweiping.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>大前端工具集</title>
    <link href="http://hangweiping.github.io/2016/04/01/%E5%A4%A7%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    <id>http://hangweiping.github.io/2016/04/01/大前端工具集/</id>
    <published>2016-04-01T08:12:43.000Z</published>
    <updated>2016-06-18T03:51:17.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本篇文章记录了一枚程序猿的百宝箱。PS：每个分类的都按照推荐的先后排列。&lt;/p&gt;
&lt;p&gt;主要内容是一些使用过的库、工具、套路或关注的前端组织等等，反正用 &lt;strong&gt;前端瑞士军刀&lt;/strong&gt; 来总结这篇文章再合适不过鸟。&lt;/p&gt;
&lt;/blockquote&gt;
 &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;您可以通过以下方式联系到我：&quot;&gt;&lt;a href=&quot;#您可以通过以下方式联系到我：&quot; class=&quot;headerlink&quot; title=&quot;您可以通过以下方式联系到我：&quot;&gt;&lt;/a&gt;您可以通过以下方式联系到我：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;微博 &lt;a href=&quot;http://weibo.com/darrencode&quot; title=&quot;Darren 聂微东&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@聂微东&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;个人 Blog &lt;a href=&quot;http://www.fefork.com/&quot; title=&quot;一枚 Web 技术领域的手艺人&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fefork.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;博客园 &lt;a href=&quot;http://www.cnblogs.com/Darren_code/&quot; title=&quot;关注前端技术&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;犀利的东哥&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;QQ 群 &lt;strong&gt;214199415&lt;/strong&gt;，群名&lt;strong&gt;前端 Club&lt;/strong&gt;。PS：入群务必请提供 &lt;strong&gt;有内容的 git 或 blog 地址&lt;/strong&gt;，否则进不去哈:)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#blogs&quot;&gt;前端组织/前端博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#blog_build&quot;&gt;博客搭建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#html&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#css&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript&quot;&gt;浏览端 JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#project_build&quot;&gt;Project Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#node_package&quot;&gt;Node Package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#node_project&quot;&gt;Node Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#read&quot;&gt;精选阅读&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#fedev&quot;&gt;前端技术&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#node_read&quot;&gt;Node 学习资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#interview&quot;&gt;前端面试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#otherdev&quot;&gt;其他技术&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tools&quot;&gt;工具/软件&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#web&quot;&gt;Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#app&quot;&gt;APP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#mac_soft&quot;&gt;Mac 软件篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#mac_dev&quot;&gt;Mac 开发篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#linux&quot;&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#BrowserPlugins&quot;&gt;Chrome Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#git&quot;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#servers&quot;&gt;服务端&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#backend&quot;&gt;数据端&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ux&quot;&gt;设计/交互&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#handbook&quot;&gt;速查手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#other&quot;&gt;杂七杂八&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cool&quot;&gt;前端炫技-炫酷狂拽叼炸天的 Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#todo&quot;&gt;TODO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;h3 id=&quot;blogs&quot;&gt;前端组织/前端博客&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;虽混过外企俩家，但劳资英文这项的技能点还是灰色的…so，俺关注的站点主要以中文为主&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; - 没 &lt;em&gt;Github&lt;/em&gt; 都不好意思面基有木有！！！&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN&lt;/a&gt; - 无数的资源再等着你探索，追标准和新特性肯定得关注的网站&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.awesomes.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Awesomes.cn&lt;/a&gt; - 国人维护的前端资源库，深度对接到 &lt;em&gt;Github&lt;/em&gt;，分类和展现清晰，值得收藏&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://uptodate.frontendrescue.org/zh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何跟上前端开发的最新前沿&lt;/a&gt; - RT，不解释&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.imooc.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;慕课&lt;/a&gt; - 大量的在线计算机课程。 虽然初、中级居多，但是不乏有巨作值得细细品尝&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javascript.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰&lt;/a&gt; - 关注多年，拜读其 &lt;a href=&quot;http://es6.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES6&lt;/a&gt; 系列。虽网传靠写书进鸟阿里，但博客内容确实够丰富&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3cplus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3Cplus&lt;/a&gt; - 大漠(《图解 CSS3》作者)在国内的影响力杠杠的，&lt;em&gt;Sass&lt;/em&gt; 专家级&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://taobaofed.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;淘宝前端团队&lt;/a&gt; - 内容涵盖 &lt;em&gt;Web&lt;/em&gt; 和 &lt;em&gt;Node&lt;/em&gt;，要深度游深度，要广度有广度&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.75team.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;奇舞团博客&lt;/a&gt; - 坚持是最宝贵的，别人的奇舞周刊早已经过百期了&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fex.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度 FEX&lt;/a&gt; - 代表作 &lt;em&gt;FIS&lt;/em&gt;、&lt;em&gt;UEditor&lt;/em&gt;、&lt;em&gt;WebUploader&lt;/em&gt;、&lt;em&gt;KityMinder&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.alloyteam.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;腾讯全端 AlloyTeam&lt;/a&gt; - 腾讯 Web 前端团队，博客真的有点丑…&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.fens.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;粉丝日志 for 张丹&lt;/a&gt; - 大爱作者写的 &lt;em&gt;Node&lt;/em&gt; 系列&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;张鑫旭&lt;/a&gt; - 成名多年的、高产的前端大湿，&lt;em&gt;CSS&lt;/em&gt;猛人&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;blog_build&quot;&gt;博客搭建&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt; - 快速、简洁且高效的博客框架，照着文档分分钟就可以在本地跑起来。&lt;em&gt;Github&lt;/em&gt; 地址:&lt;a href=&quot;https://github.com/hexojs/hexo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jekyll.bootcss.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jekyll&lt;/a&gt; - 将纯文本转化为静态网站和博客。由于环境依赖的问题，所以安装起来可能稍费劲那么一点。&lt;em&gt;Github&lt;/em&gt; 地址：&lt;a href=&quot;https://github.com/jekyll/jekyll&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GithubPages&lt;/a&gt; - 免费的静态站点。配合着 &lt;em&gt;Hexo&lt;/em&gt; 或 &lt;em&gt;Jekyll&lt;/em&gt; 的模板，分分搭建出一套炫酷的个人博客&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.tumblr.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tumblr&lt;/a&gt; - 轻博客的祖师爷，各种各样的主题感觉不错&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh-cn.wordpress.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wordpress&lt;/a&gt; - 这玩意古老到都不想介绍&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 &lt;em&gt;Hexo/Jekyll + GitPage&lt;/em&gt;，前端搭建静态博客那是相当 easy。用 &lt;em&gt;Markdown&lt;/em&gt; 写文章做记录，再 &lt;em&gt;push&lt;/em&gt; 到 &lt;em&gt;Github&lt;/em&gt; 上，分分钟高大上有木有&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再推荐三款视觉效果极佳的 &lt;em&gt;Hexo&lt;/em&gt; 主题，且在 &lt;em&gt;Github&lt;/em&gt; 上的 &lt;em&gt;star&lt;/em&gt; 都很不错：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NexT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yilia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tranquilpeak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不能偏心，所以也推荐三款 &lt;em&gt;Jekyll&lt;/em&gt; 的好主题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mmistakes/so-simple-theme&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;So Simple&lt;/a&gt; 如果你看过俺的博客，对这个主题就肯定不会陌生啦&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mmistakes/hpstr-jekyll-theme&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HPSTR&lt;/a&gt; 当初 &lt;a href=&quot;http://www.fefork.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fefork&lt;/a&gt; 差点选这个主题:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/daattali/beautiful-jekyll#readme&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;beautiful&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;html&quot;&gt;HTML&lt;/h3&gt;

&lt;p&gt;纯 &lt;em&gt;HTML&lt;/em&gt; 相关其实没有好玩的项目，所以这儿展示的内容主要都是一些模板，而且以下列出来的都是免费的，方便拿取搭架后台或者博客&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/joshbuchea/HEAD&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HEAD&lt;/a&gt; - 最全的 &lt;em&gt;&lt;head&gt;&lt;/head&gt;&lt;/em&gt; 列表，真心佩服这种偏执的整理能力&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/akveo/blur-admin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;blur-admin&lt;/a&gt; - 视觉冲击极强的管理后台，各种动画效果。PS：因为团队有&lt;a href=&quot;https://github.com/ant-design/ant-design&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ant-design&lt;/a&gt;的使用经验，感觉使用起来不是很顺畅，这套后台又是基于&lt;em&gt;AngularJS&lt;/em&gt;，所以再三权限之后还是没实际使用，劳资还是别给团队添乱了，囧…&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/almasaeed2010/AdminLTE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AdminLTE&lt;/a&gt; - 很小清新的后台模板，每次看&lt;a href=&quot;https://almsaeedstudio.com/preview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;preview&lt;/a&gt; 页面都觉得很有视觉冲击&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/puikinsh/gentelella&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gentelella&lt;/a&gt; - 刚用这个搭建了我司内部用的的数据平台，效果喜人。模板实现的功能比较全，比如登录、注册甚至各种 &lt;em&gt;widget&lt;/em&gt;，所以最终交付的时候，自己几乎没写几行CSS。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/google/material-design-lite&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;material-design-lite&lt;/a&gt; - &lt;em&gt;Star&lt;/em&gt; 数超过2W的开源模板项目，包含了多套简洁的 &lt;em&gt;templates&lt;/em&gt;，可以用于博客、后台或者企业首页。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;css&quot;&gt;CSS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://metroui.org.ua/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MetroUI&lt;/a&gt; - 好看好用，重点是样式特别、个性&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fontawesome.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Font-Awesome&lt;/a&gt; - 图标字体库。相类似的库有不少，大厂都喜欢造轮子嘛:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://connoratherton.com/loaders&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LoadersCSS&lt;/a&gt; - 用 CSS 技术实现 loading 动画； 补一句，想熟悉、理解 &lt;em&gt;keyframes、animation、transform、transition&lt;/em&gt; 的童鞋可以直接去读其源码(只有千把行代码)，读完就算出师鸟:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/weui/weui&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WeUI&lt;/a&gt; - 一套同微信原生视觉体验一致的基础样式库 为微信 Web 开发量身设计，令用户的使用感知更加统一&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/postcss/postcss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PostCSS&lt;/a&gt; - 最近才知道大名鼎鼎&lt;a href=&quot;https://github.com/postcss/autoprefixer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Autoprefixer&lt;/a&gt;是其插件 推荐大漠的文章&lt;a href=&quot;http://www.w3cplus.com/PostCSS/postcss-deep-dive-what-you-need-to-know.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《PostCSS深入学习》&lt;/a&gt;，有关 PostCSS 不是什么？PostCSS 是什么？PostCSS 可以做什么等等问题，文章里面有答案&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/una/CSSgram&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSSgram&lt;/a&gt; - 图片滤镜库，终于可以用 CSS 在 web 上实现滤镜的效果鸟 IE不支持，不过新的移动设备支持没问题 &lt;a href=&quot;http://caniuse.com/#search=CSS%20Blend%20Modes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Can I Use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chinchang/hint.css&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HINT.css&lt;/a&gt; - 一款非常小巧的提示框效果&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kazzkiq.github.io/balloon.css/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Balloon.css&lt;/a&gt;| |同上，一款非常小巧的提示框效果&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ianlunn.github.io/Hover/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hover.css&lt;/a&gt; - 很多鼠标 Hover 态的效果，可以给产品学习一下:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://css-cursor.techstream.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cursor&lt;/a&gt; - 记录各浏览器对Cursor的支持情况&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zmoazeni/csscss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;csscss&lt;/a&gt; - 用于检查 CSS 代码冗余&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://purecss.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;purecss&lt;/a&gt; - 小巧的响应式 CSS 库，Yahoo!出品&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jonsuh.com/hamburgers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hamburgers&lt;/a&gt; - 简单的动画库，让 Click(or Tap) 变得美妙&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cssmatic.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cssmatic&lt;/a&gt; - 一个帮忙调试CSS效果的工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;javascript&quot;&gt;浏览端 JS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/requirejs/requirejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;requirejs&lt;/a&gt; - JS模块化是构建复杂项目的第一步 中文学习文档奉上：&lt;a href=&quot;http://www.requirejs.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RequireJS 中文网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://echarts.baidu.com/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECharts&lt;/a&gt; - 好用，最关键的是支持的图表展示非常之多，强烈推荐&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.swiper.com.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swiper&lt;/a&gt; - 强大的 Slider 库 其实这类效果库非常多，但文档能那么专业的就很少鸟&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://babeljs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;babel&lt;/a&gt; - &lt;em&gt;ES6&lt;/em&gt; 用起来。这个插件可以让我们用新的 &lt;strong&gt;标准/提案&lt;/strong&gt; 写 &lt;em&gt;JavaScript&lt;/em&gt; 代码，然后再向下 &lt;strong&gt;转换编译&lt;/strong&gt;，最终生成随处可用的 &lt;em&gt;JavaScript&lt;/em&gt; 代码。中文文档奉上&lt;a href=&quot;https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/README.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《babel-handbook》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://alvarotrigo.com/fullPage/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fullPage&lt;/a&gt; - 非常好用的全屏滑动库，看 Demo 就明白&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://photoswipe.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhotoSwipe&lt;/a&gt; - 偶常用的 js 库 官网上有这么一句很关键、重要”no dependencies”&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cn.vuejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vuejs&lt;/a&gt; - 比较喜欢其作者… 所以劳资正在看源码学习学习&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lab.ejci.net/favico.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;favico.js&lt;/a&gt; - 动态改变浏览器标签栏中的网站图标，非常好玩&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ant.design&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ant.design&lt;/a&gt; - 蚂蚁金服搞的良心项目，文档美好的令人发指 样式优雅，强烈推荐内部系统尝试此库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://highlightjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;highlightjs&lt;/a&gt; - 代码高亮库，支持非常多的语言&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.daterangepicker.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;daterangepicker&lt;/a&gt; - 时间选择插件的不二选择，基于 &lt;em&gt;Bootstrap&lt;/em&gt; 和 &lt;a href=&quot;http://momentjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Moment.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ksky521/nodePPT&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodePPT&lt;/a&gt; - 前同事三水的大作，好用必须得支持:) 用 Markdown 写 PPT，还可以 HTML 混排，上手飞快&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/RubaXa/Sortable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sortable&lt;/a&gt; - 拖拽神器，用了就知道&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CodeSeven/toastr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;toastr&lt;/a&gt; - 信息提示的库，推荐的原因是卖相好、功能强大  &lt;a href=&quot;http://codeseven.github.io/toastr/demo.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://benpickles.github.io/peity/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;peity.js&lt;/a&gt; - jQuery的图表插件，特别cute，感觉萌萌哒 将HTML转换成一个小的&lt;em&gt;&lt;svg/&gt;&lt;/em&gt;饼图、圆环图、折线图等等&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Ranks/emojify.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;emojify.js&lt;/a&gt; - 能够将&lt;em&gt;emoji&lt;/em&gt;关键词转换为&lt;em&gt;emoji&lt;/em&gt;图片的&lt;em&gt;JS&lt;/em&gt;插件 可以快速的为你的网站提供&lt;em&gt;emoji&lt;/em&gt;表情支持&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Nickersoft/push.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Push.js&lt;/a&gt; - 基于 &lt;em&gt;Notification API&lt;/em&gt; 实现的桌面效果的提示栏。浏览器支持情况不错，如&lt;a href=&quot;http://caniuse.com/#search=Notification&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://caniuse.com/#search=Notification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.hcharts.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Highcharts&lt;/a&gt;| |Highcharts 中文网，又是一个图表库 确实功能强大，但是觉得不好看… PS：官网就做的不好看，脏脏的赶脚&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rstacruz/nprogress/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NProgress&lt;/a&gt; - 使页面加载时有更好的loading效果&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaredreich/notie.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Noticejs&lt;/a&gt; - 一个简单的通知库，木有依赖&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/peachananr/onepage-scroll&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;onepage-scroll&lt;/a&gt; - 依赖 jQuery 的单页滚动库，和 &lt;a href=&quot;http://alvarotrigo.com/fullPage/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fullPage&lt;/a&gt; 类似&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://videojs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs&lt;/a&gt; - 当下视频需求都用上&lt;em&gt;&lt;video&gt;&lt;/video&gt;&lt;/em&gt;鸟 样式和交互统一的问题交给 videojs 搞定:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zenorocha.github.io/clipboard.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clipboard&lt;/a&gt; - 仅 2KB 大小，搞定剪贴板功能，屌不屌~ 但是，Safari 不支持…&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/impress/impress.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;impress.js&lt;/a&gt; -  用来写 PPT 不错，偶也曾为其写过一篇&lt;a href=&quot;http://www.cnblogs.com/Darren_code/archive/2013/01/04/impressjs.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;impress.js 初体验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fengyuanchen.github.io/cropper/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cropper&lt;/a&gt; - 国人开发的图片裁剪库&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;em&gt;Swiper/PhotoSwipe/fullPage&lt;/em&gt; 有这仨库，微信里常见的 H5 页完全不是问题哒&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;project_build&quot;&gt;Project Build&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/pm2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pm2&lt;/a&gt; - 是一个带有负载均衡功能的 Node 应用的进程管理器； 是 &lt;a href=&quot;https://www.npmjs.com/package/forever&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forever&lt;/a&gt; 的进阶库，想了解的可以看这篇文章&lt;a href=&quot;http://se77en.cc/2013/06/27/goodbye-node-forever-hello-pm2-translation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《拥抱PM2》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://webpack.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Webpack&lt;/a&gt; - 项目构建工具，由于过于复杂和太强大，所以劳资还没去深入研究。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gulpjs/gulp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gulp&lt;/a&gt; - Gulp 是基于 Node 实现 Web 前端自动化开发的工具。 俺总结了篇&lt;a href=&quot;http://www.fefork.com/gulp_1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《gulp使用小结》&lt;/a&gt;，推荐您阅读:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bower.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bower&lt;/a&gt; - 前端项目的包管理其实是件复杂的事 谁谁谁依赖谁谁谁，谁谁谁依赖谁谁谁的某个版本…卧槽 Bower 就是搞定这件事儿的，亲爹是 Twitter 推荐篇 Bower 的中文文章：&lt;a href=&quot;http://blog.fens.me/nodejs-bower-intro/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《bower 解决 js 的依赖管理》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gruntjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Grunt&lt;/a&gt; - 和 Gulp 类似，都是项目构建的常见选择 对比这俩的文章可谓不少，推荐篇&lt;a href=&quot;http://www.benben.cc/blog/?p=407&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Gulp vs Grunt》&lt;/a&gt; 英盲又想看文档，可以去&lt;a href=&quot;http://www.gruntjs.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Grunt 中文网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fex-team.github.io/fis3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FIS&lt;/a&gt; - 度厂出品的前端构建工具 文档清晰，功能强大，推荐了解和使用&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ci.gitlab.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gitlab CI&lt;/a&gt; - 一套基于&lt;a href=&quot;https://about.gitlab.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gitlab&lt;/a&gt;的持续集成服务&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Gulp + Webpack 的使用&lt;strong&gt;套路&lt;/strong&gt;参考: &lt;a href=&quot;https://github.com/demohi/learning-gulp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;learning-gulp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gulp 资料收集：&lt;a href=&quot;https://github.com/Platform-CUF/use-gulp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;use-gulp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;推荐篇与 Webpack 相关的文章《&lt;a href=&quot;http://boke.io/tan-tan-css-modules/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS Modules&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;Webpack 用起来吼吼：&lt;a href=&quot;https://github.com/petehunt/webpack-howto&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webpack-howto&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;node_package&quot;&gt;Node Package&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;作为一名大前端甚至是多端，&lt;em&gt;Node&lt;/em&gt; 绝逼是必备的一块&lt;/p&gt;
&lt;p&gt;有关 &lt;em&gt;Node&lt;/em&gt; 的学习资料，请访问&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;这里介绍些有特色且前端有必要知道的包&quot;&gt;&lt;a href=&quot;#这里介绍些有特色且前端有必要知道的包&quot; class=&quot;headerlink&quot; title=&quot;这里介绍些有特色且前端有必要知道的包&quot;&gt;&lt;/a&gt;这里介绍些有特色且前端有必要知道的包&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/anywhere&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;anywhere&lt;/a&gt; - 随时随地将你的当前目录变成一个静态文件服务器的根目录&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/supervisor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;supervisor&lt;/a&gt; - 监控 Node 代码，自动重启。 A supervisor program for running nodejs programs&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/remy/nodemon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodemon&lt;/a&gt; - 监控 Node 代码，自动重启。 Nodemon is a utility that will monitor for any changes in your source and automatically restart your server.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/pm2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pm2&lt;/a&gt; - 是一个带有负载均衡功能的 Node 应用的进程管理器； 是 &lt;a href=&quot;https://www.npmjs.com/package/forever&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forever&lt;/a&gt; 的进阶库，想了解的可以看这篇文章&lt;a href=&quot;http://se77en.cc/2013/06/27/goodbye-node-forever-hello-pm2-translation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《拥抱PM2》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/async&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;async&lt;/a&gt; - 一个流程控制工具包，提供直接而强大的异步功能&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/lodash&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lodash&lt;/a&gt; - JS 工具库 &lt;em&gt;Underscore.js&lt;/em&gt;的一个 fork 发展而来&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/socketio/socket.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;socket.io&lt;/a&gt; - 预计 Node 的实时框架 聊天室、页游等对实时性有高要求的较适用&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Automattic/mongoose&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mongoose&lt;/a&gt; - 让 NodeJS 更容易操作 Mongodb 数据库；  附上一篇&lt;a href=&quot;https://cnodejs.org/topic/504b4924e2b84515770103dd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mongoose 学习参考文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://npm.taobao.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CNPM&lt;/a&gt; - 淘宝 NPM 镜像，提供了 NPM 同步的服务 当然可不仅仅这样，利用 CNPM 可以打造&lt;strong&gt;企业/个人&lt;/strong&gt;私有的 NPM 服务 推荐篇搭建私有NPM的文章：&lt;a href=&quot;http://blog.fens.me/nodejs-cnpm-npm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《CNPM搭建私有的NPM服务》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://koajs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;koa&lt;/a&gt; - 玩 Node 都知道 express，但使用 koa 的就少很多，门槛比 Ex 稍高 通过 generator 避免繁琐的回调函数嵌套，强烈推崇 &lt;a href=&quot;https://github.com/guo-yu/koa-guide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方的文章教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/shipitjs/shipit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Shipit&lt;/a&gt; - 一个强大的自动化部署工具。 shipit 很多地方非常类似 gulp，他们的核心都是任务系统。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/node-inspector&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-inspector&lt;/a&gt; - Node 调试工具，使用起来跟 Chrome 的 JS 调试器很相似&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/winston&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;winston&lt;/a&gt; - Node 服务最流行的日志库之一&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/co&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;co&lt;/a&gt; - 用 generator 写法让异步代码同步&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/thenify-all&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;thenify-all&lt;/a&gt; - 把异步的方法变成 Promise 的 Promisifies all the selected functions in an object&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://phantomjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhantomJS&lt;/a&gt; - 一般用来做抓取截图和无界面测试 也可以用来操作 DOM 和网络监测，很好玩的库 &lt;a href=&quot;http://phantomjs.org/quick-start.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Quick Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/ava&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ava&lt;/a&gt; - 偶是应TJ大神推荐而得之的 &lt;em&gt;ava&lt;/em&gt; 未来的测试运行器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mochajs/mocha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mocha&lt;/a&gt; - Node 里最常用的测试框架； 它支持多种 Node 的 Assert libs； 同时支持异步和同步的测试，同时支持多种方式导出结果； 也支持直接在 browser 上跑 JS 代码测试。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/koa-validate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;koa-validate&lt;/a&gt; - &lt;em&gt;koa&lt;/em&gt; 的校验库 可以非常方便的对 &lt;em&gt;queryString&lt;/em&gt; 或 &lt;em&gt;postBody&lt;/em&gt; 的信息进行验证&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/line-reader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;line-reader&lt;/a&gt; - 基于&lt;em&gt;steam&lt;/em&gt;的按行读文件，偶处理日志时用哒 要不实现一个按行读文件，又得 &lt;em&gt;steam&lt;/em&gt;、 又得 &lt;em&gt;chunk&lt;/em&gt;，还是比较麻烦的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/everyauth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;everyauth&lt;/a&gt;| |OAuth 的集成解决方案&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://documentup.com/shelljs/shelljs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shelljs&lt;/a&gt; - 写 Node 时难免需要用 shell 去操作些神马 shelljs 是基于 Node 的 shell 工具，API 及其简单&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/hashids&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hashids&lt;/a&gt; - 看名称就懂，给 userid 加解密用的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/coopernurse/node-pool&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-pool&lt;/a&gt; - 让 &lt;em&gt;Node&lt;/em&gt; 有连接池的概念&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/colors&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;colors&lt;/a&gt; - 花俏的小工具 让打印&lt;em&gt;console.log&lt;/em&gt;时有更好的展示样式&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/n&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;n&lt;/a&gt; - 控制Node的版本，想升级一行代码搞定&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;supervisor&lt;/em&gt; 和 &lt;em&gt;nodemon&lt;/em&gt; 这俩都是监控 Node 代码，使得每次修改代码后会，开发 Node 程序必备&lt;/p&gt;
&lt;p&gt;以上库俺都有使用过，甚至有不少都是项目开发中、各种特定场景下必用的，有任何使用问题欢迎沟通哈:)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;node_project&quot;&gt;Node Project&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;暂无&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;read&quot;&gt;精选阅读&lt;/h2&gt;

&lt;h3 id=&quot;fedev&quot;&gt;前端技术&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.imooc.com/learn/590&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2015D2前端论坛&lt;/a&gt; - Node方向非常值得看，有干货，相信东哥推荐哈&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhibimo.com/read/Ashu/front-end-style-guide/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端开发规范手册&lt;/a&gt; -  此手册主要实现的目标：代码一致性和最佳实践&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/README.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《babel-handbook》&lt;/a&gt; - 可以用新的规范(如 &lt;em&gt;ES6&lt;/em&gt;)写代码，经过 &lt;em&gt;babel&lt;/em&gt; 编译后生成没有兼容问题的代码&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://es6.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMAScript 6入门&lt;/a&gt; - 阮一峰大神所著，一本开源的JS教程 全面介绍 ECMAScript 6新引入的语法特性&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/project/react-native/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactNative 中文版&lt;/a&gt; - 翻译自官方的中文文档&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fakefish.github.io/react-webpack-cookbook/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactWebpackCookBook&lt;/a&gt; |  |此书会引导读者是进入&lt;em&gt;React&lt;/em&gt;和&lt;em&gt;Webpack&lt;/em&gt;的世界。 俩都是非常前沿的技术，同时使用会更有趣。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ele828/react-native-guide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactNative 学习指南&lt;/a&gt; - 新玩意层出不穷… 对于能持续学习的童鞋，这是个美好的时代&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.css88.com/doc/codeguide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML/CSS 编码规范&lt;/a&gt; - 编写灵活、稳定、高质量的&lt;em&gt;HTML&lt;/em&gt;和&lt;em&gt;CSS&lt;/em&gt;代码的规范&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gold.xitu.io/entry/56c29abfa34131005b8cb1f3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;移动前端入门&lt;/a&gt; - 入门价值高，移动方向常见问题的较好总结&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-book&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GulpBook&lt;/a&gt; - Gulp 是基于 Node 实现 Web 前端自动化开发的工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;node_read&quot;&gt;Node 学习资料&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/youyudehexie/node123&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js 中文资料导航&lt;/a&gt; - Node 的中文资料导航，&lt;em&gt;start1300+&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.fens.me/series-nodejs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;从零开始 NodeJS 系列文章&lt;/a&gt; - 基本上每一篇都看过，强烈推荐&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nqdeng.github.io/7-days-nodejs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js 包教不包会&lt;/a&gt; - 值得阅读，看完绝不用买书鸟&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alsotang/node-lessons&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;七天学会 NodeJS&lt;/a&gt; - 劳资还没看，不过看目录还不错:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dead-horse/node-style-guide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Style Guide&lt;/a&gt; - 这是一份关于如何写出一致且美观的 &lt;em&gt;Node&lt;/em&gt; 代码的风格指南&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.apebook.org/minghe/koa-action/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;koa实战&lt;/a&gt; - “&lt;a href=&quot;https://github.com/minghe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;明河&lt;/a&gt;出品”这四字已经说明一切。PS：正在连载中&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jabez128/stream-handbook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stream-handbook&lt;/a&gt; - 如果学习 NodeJS，那么流一定是需要掌握的概念&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;interview&quot;&gt;前端面试&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://dongfei.baijia.baidu.com/article/52449&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在 LinkedIn 做面试官的故事&lt;/a&gt; - 非面试题，介绍 LinkedIn 的面试过程 文章有很多中肯的建议和想法，推荐阅读&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3cplus.com/css/write-to-front-end-developer-interview.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;大漠：写给前端面试者&lt;/a&gt; - 这篇文章不涉及任何的面试题 大漠与大家聊聊面试者与被面者之间的感受…&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端面试题&lt;/a&gt; - Git 上非常火的前端面试题，&lt;em&gt;start17k+&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/paddingme/Front-end-Web-Development-Interview-Question&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端面经&lt;/a&gt; - 主要内容是些前端面试笔试题和面试套路，值得阅读&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;otherdev&quot;&gt;其他技术&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MongoDB 极简实践入门&lt;/a&gt; - 入门推荐的套路，非常浅显易懂&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/macdao/ocds-guide-to-setting-up-mac&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mac 设置指南&lt;/a&gt; - Mac 使用必看 尤其适合 偏执狂/强迫症 患者:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xirong/my-markdown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown 资料&lt;/a&gt; - 简单看些语法入门，快速用起来&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tools&quot;&gt;工具/软件&lt;/h2&gt;

&lt;h3 id=&quot;web&quot;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://caniuse.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CanIuse&lt;/a&gt; - &lt;strong&gt;前端必备&lt;/strong&gt;；查看浏览器对各种新特性的兼容情况&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://overapi.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;overapi&lt;/a&gt; - 最全的开发人员在线速查手册&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://naotu.baidu.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度脑图&lt;/a&gt; - 非常方便的思维导图工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.processon.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ProcessOn&lt;/a&gt; - 和百度脑图的功能类似，脑图工具。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vimawesome.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VimAwesome&lt;/a&gt; - Vim 插件集合，&lt;strong&gt;Vim 党必备&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tower.im&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tower&lt;/a&gt; - 小而美的多人协同工具。 不光只有 Web 版，还有 iPhone、iPad、Android、微信版。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://slides.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Slides&lt;/a&gt; - 一个所见即所得的 WebPPT 编辑器，非常推荐&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.faviconer.co/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;faviconer.co&lt;/a&gt; - 一个所见即所得的icon生成器，很好用&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://smallpdf.com/cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;smallpdf&lt;/a&gt; - 提供各种格式和 PDF 互相转换&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zybuluo.com/mdeditor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cmd Markdown&lt;/a&gt; - 好用的 Web 版 Markdown 编辑器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackedit.io/editor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StackEdit&lt;/a&gt; - 又是一款 Web 版 Markdown 编辑器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://modao.cc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;墨刀&lt;/a&gt; - 一个在线移动应用原型制作工具。 旨在帮助产品经理快速制作可在手机端展示的移动应用原型。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.htm2pdf.co.uk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;htm2pdf&lt;/a&gt;| |HTML to PDF&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/p/featured&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Speaker Deck&lt;/a&gt; - 在线的演讲稿展示平台&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://runjs.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RunJS&lt;/a&gt; - 在线编辑、展示、分享、交流你的 &lt;em&gt;JavaScript&lt;/em&gt; 代码&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bootswatch.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bootswatch&lt;/a&gt; - &lt;em&gt;Bootstrap&lt;/em&gt; 的免费模板&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/almasaeed2010/AdminLTE/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AdminLTE&lt;/a&gt; -  又是一个 &lt;em&gt;Bootstrap&lt;/em&gt; 的免费管理后台&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;app&quot;&gt;APP&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;以下列表中的 APP 都是不区分系统平台的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.yinxiang.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;印象笔记&lt;/a&gt; - 免费账号完全够用，跨平台跨终端的记录软件&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.365rili.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;365日历&lt;/a&gt; - 首先肯定比系统自带的日历强大，要不推荐个蛋蛋 俺一般用来搞目标管理，比如学习计划和工作计划 生活中会订阅演唱会、电影首映的信息&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.duokan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;多看阅读&lt;/a&gt; - kindle 确实好，但是懒得随身带着 多看还算不错，书较多且偶尔有特价比较爽&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/surge-web-developer-tool-proxy/id1040100637?mt=8&amp;amp;v0=WWW-GCCN-ITSTOP100-PAIDAPPS&amp;amp;l=&amp;amp;ign-mpt=uo%3D4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Surge&lt;/a&gt; - 非免费 牛逼的网络开发与调试工具，前端必备&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/coderyi/Monkey&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Monkey&lt;/a&gt; - Monkey 是 iPhone 上一个 GitHub 第三方客户端。 展示 GitHub 上的开发者的排名，以及仓库的排名&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;mac_soft&quot;&gt;Mac 软件篇&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;对于美好事务的追求无论何时都不算晚，前年公司给配了台 Mac 用做测试开发机，于是开始在 Mac 下办公。 &lt;strong&gt;Windows？&lt;/strong&gt; 回不去鸟…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.macupdate.com/app/mac/34344/alfred&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Alfred&lt;/a&gt; - 绝对的Top1。除了打开应用程序之外，查找文件、全文检索、调起浏览器搜索和计数器都是俺经常使用的功能。如果想知道具体咋用，推荐阅读老池(池建强)的一篇文章：&lt;a href=&quot;http://www.cnblogs.com/chijianqiang/p/alfred.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《神兵利器—Alfred》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://brew.sh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Homebrew&lt;/a&gt; - 没它程序猿没法好好干活… &lt;em&gt;Homebrew&lt;/em&gt;使&lt;em&gt;OS X&lt;/em&gt;更完美。 使用&lt;em&gt;gem&lt;/em&gt;来安装&lt;em&gt;gems&lt;/em&gt;、用&lt;em&gt;brew&lt;/em&gt;来搞定那些依赖包&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bahoom.com/hyperdock/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HyperDock&lt;/a&gt; - 价格￥68，但感觉还是比较值的。预览和快速切换不说，能用快捷键控制窗口，能让拖拽到边缘的窗口自动调整大小(window早就有的功能)，真心能提高效率。推荐篇中文的文章：&lt;a href=&quot;http://www.cnblogs.com/ider/p/let-mac-window-fly-with-hyperdock.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;让Mac的窗口飞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iterm2.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iTerm2&lt;/a&gt; - Mac 终端功能少又不好看，iTerm2 可以解救你~  推荐篇文章：&lt;a href=&quot;http://swiftcafe.io/2015/07/25/iterm/?hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《让你的命令行丰富多彩》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/browseshot/id615916400&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BrowseShot&lt;/a&gt; - 偶正在使用的网页截图工具，强烈推荐&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.scootersoftware.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BeyondCompare&lt;/a&gt; - 在Windows下就开始用了 比对文件和文件夹杠杠好使，Merge必备工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mediaatelier.com/CheatSheet/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CheatSheet&lt;/a&gt; - 能够显示当前程序的快捷键列表，默认的快捷键是长按 ⌘&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sequelpro.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sequel Pro&lt;/a&gt; - 免费好用的Mysql工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cockos.com/licecap/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LICEcap&lt;/a&gt; - 屏幕录制工具，支持导出 GIF 动画图片格式 轻量级、使用简单，录制过程中可以改变录屏范围&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.macbartender.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bartender&lt;/a&gt; - 有免费试用版(一个月)。Mac右上角菜单的管理工具，试用之后右上角的菜单瞬间清爽了&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://manico.im/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Manico&lt;/a&gt; - 快捷启动和切换 APP 的工具，高效的第一步 AppStore 上收费，不过可以免费试用&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jetbrains.com/webstorm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebStorm&lt;/a&gt; - 功能超强的前端 IDE，不多介绍，谁用谁知道 PS：貌似俺插件装多了，用着卡卡的，风扇呼呼转…&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://atom.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Atom&lt;/a&gt; - 2015 年 7 月之前，在桌面环境下我最喜欢的编辑器是 Sublime。 但之后就是 Atom，俺也专门为它写了篇&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/nieweidong/learn-atom&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用纪要&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.getmarkman.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;马克鳗&lt;/a&gt; - MarkMan，非常强大好用的标注、测量工具。 日常工作免费版就完全可以满足，&lt;strong&gt;强烈推荐&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.wireshark.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wireshark&lt;/a&gt; - 说实话，Mac 下木有 Fiddler 挺不习惯，不过在有更强大的替代品&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sourcetreeapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SourceTree&lt;/a&gt; - 一款好用的的 Git 客户端工具，重点是支持中文:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.focusboosterapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;focus booster&lt;/a&gt; - 因为比较在意时间管理，所以这软件是俺工作时间的必备之物&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://25.io/mou/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mou&lt;/a&gt; - 我曾使用过的 mk 编辑器。原本准备去掉这个推荐，但是我想让大家了解下这个有意思的事情：&lt;a href=&quot;http://matrix.sspai.com/p/c7a3c9c0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《一年了，那个闻名遐迩的 Mou 你还记得吗？》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;mac_dev&quot;&gt;Mac 开发篇&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;暂无&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;linux&quot;&gt;Linux&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ohmyz.sh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;oh-my-zsh&lt;/a&gt; - &lt;strong&gt;&lt;em&gt;终端党&lt;/em&gt;&lt;/strong&gt; 必用的好工具，强烈推荐&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/iadanac/p/3859481.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tree&lt;/a&gt; - linux 以树状图逐级列出目录的内容&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oneapm.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;oneapm&lt;/a&gt; - 强大的运维工具，提供多种监控客户端； 有采集、分析、展示等一套功能； PS：我这用了服务器监控(免费哦)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jkbrzt/httpie&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;httpie&lt;/a&gt; - 一个 CLI 中的 HTTP 客户端 用法简单、易读&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;BrowserPlugins&quot;&gt;Chrome 浏览器插件&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Chrome&lt;/em&gt; 应用商店必定是需要翻墙的哈。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下插件都是俺多年积累淘出来的，数量不多，所以就不区分 &lt;em&gt;Github&lt;/em&gt; 插件和非 &lt;em&gt;Github&lt;/em&gt; 插件了。按照俺推荐的强度自上向下展示，且大多数插件就是偶工作和生活必备，希望能对大家有用。后续如有新发现好插件，偶也会及时更新哒。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Postman&lt;/a&gt; - &lt;em&gt;POST&lt;/em&gt; 接口调试终结者，异常强大的接口调试工具。稍稍有一点学习成本，推荐之&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSONView&lt;/a&gt; - 就是个 &lt;em&gt;JSON&lt;/em&gt; 格式的查看工具，可以很方便的展示数据，麻麻再也不用担心偶调试接口啦。PS：同类插件有不少，所以用的开心就行&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/%E4%BA%8C%E7%BB%B4%E7%A0%81qr%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/pflgjjogbmmcmfhfcnlohagkablhbpmg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;二维码生成器&lt;/a&gt; - RT。PS：这FF早已经自带生成二维码工具了，&lt;em&gt;Chrome&lt;/em&gt; 还得装插件才行，任性…&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WEB前端助手(FeHelper)&lt;/a&gt; - &lt;a href=&quot;https://www.baidufe.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度FE&lt;/a&gt;出品，功能超全的 Chrome 插件。简单列一下其功能：QR码生成器、字符串编解码工具、JSON格式化查看器、前端编码规范检测、代码压缩工具、页面取色工具、统计并分析网页加载性能等等&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/eye-dropper/hmdcmlfkchdmnmnmheododdhjedfccka&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Eye Dropper&lt;/a&gt; - 前端必备的颜色提取神器，操作简单容易上手&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vimium&lt;/a&gt; 和 &lt;em&gt;Vim&lt;/em&gt; 快捷键一样，浏览网站时不需要鼠标咯&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/page-ruler/jlpkojjdgbllmedoapgfodplfhcbnbpn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Page Ruler&lt;/a&gt; - 前端必备的尺子。计算页面元素间距、位置等信息的时候，你就知道它的好了，无脑上手，你值得拥有&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/capture-webpage-screensho/mcbpblocgmgfnpjjppndjkmgjaogfceg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FireShot&lt;/a&gt; - 可以截取整个网页、部分页面，然后支持导出为各种格式。俺微博上发的网页全景图都是靠这个插件截取的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/infinity-new-tab/dbfmnekepjoapopniengjbcpnbljalfg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Infinity&lt;/a&gt; - 好不好用有点见仁见智了，但是我个人比较喜欢。使用后会让你的 &lt;strong&gt;新标签页&lt;/strong&gt; 耳目一新，有漂亮的背景和各种常用的功能，比如地图、天气、&lt;em&gt;Gmail&lt;/em&gt;、&lt;em&gt;Chrome&lt;/em&gt;商店等等。当然，在这个插件的设置中还可以设置壁纸、动画效果等等&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Momentum&lt;/a&gt; - 同样也是 &lt;strong&gt;新标签页&lt;/strong&gt; 的插件，但是不管是视觉上(高清大图)还是功能上，都比 &lt;a href=&quot;https://chrome.google.com/webstore/detail/infinity-new-tab/dbfmnekepjoapopniengjbcpnbljalfg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Infinity&lt;/a&gt; 高大上不少，&lt;em&gt;Setting&lt;/em&gt; 里面有不少设置和快捷键，都很好上手的。&lt;a href=&quot;https://chrome.google.com/webstore/detail/infinity-new-tab/dbfmnekepjoapopniengjbcpnbljalfg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Infinity&lt;/a&gt;胜在中文和直观，&lt;a href=&quot;https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Momentum&lt;/a&gt;胜在视觉冲击。俺基本上这俩款看心情换着用，所以希望你也都能喜欢:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google翻译&lt;/a&gt; - 英文不好又得经常浏览英文资料的，一般都准备好了翻译工具。不过能在浏览器里达到划词翻译的方案就不多了，偶推荐这个Google翻译(PS：如不能翻墙，有道词典的扩展也同样支持划词翻译)。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Octotree&lt;/a&gt; - 在浏览器左侧展示 &lt;em&gt;Github&lt;/em&gt; 项目的文件导航，使目录结构一目了然，而且我们国内 &lt;em&gt;Github&lt;/em&gt; 的访问速度又不稳定，用这个工具也就很提效率了。对经常使用 &lt;em&gt;Github&lt;/em&gt; 的同学强烈推荐&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/builtwith-technology-prof/dapjbgnjinbpoindlpdmhochffioedbn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BuiltWith&lt;/a&gt; / &lt;a href=&quot;https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wappalyzer&lt;/a&gt; / &lt;a href=&quot;https://chrome.google.com/webstore/detail/chrome-sniffer-plus/fhhdlnnepfjhlhilgmeepgkhjmhhhjkh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chrome Sniffer Plus&lt;/a&gt; - 几款超强的网站分析工具，可以给出网站非常多的技术栈信息。大到 &lt;em&gt;Web Servers&lt;/em&gt;、服务端的 &lt;em&gt;Frameworks&lt;/em&gt; 或 &lt;em&gt;JS&lt;/em&gt; 框架，小到 &lt;em&gt;meta&lt;/em&gt;、编码格式甚至 &lt;em&gt;Analytics&lt;/em&gt;，非常推荐&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb/related&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adblock Plus&lt;/a&gt; - 非常非常有名的免费的过滤广告的插件。PS：广告屏蔽这个见仁见智，其实俺个人还是比较接受一些个性化推荐的广告&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/wide-github/kaalofacklcidaampbokdplbklpeldpj/related&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wide Github&lt;/a&gt; - 无聊又实用的 &lt;em&gt;Github&lt;/em&gt; 插件。无聊是因为这个插件就特么一个功能，&lt;strong&gt;加宽&lt;/strong&gt;，能让 &lt;em&gt;Github&lt;/em&gt; 页面变宽，每行展示更多的内容，尤其配合着&lt;a href=&quot;https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Octotree&lt;/a&gt;，展示效果极佳。非常推荐 &lt;em&gt;Mac&lt;/em&gt; 用户实用，因为屏幕比较不大，变宽后阅读感觉更好&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/google-mail-checker/mihcahmgecmbnbcchbopgniflfhgnkff&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gmail&lt;/a&gt; - 方便查看自己的 &lt;em&gt;Gmail&lt;/em&gt; 邮件&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/devtools-author/egfhcfdfnajldliefpdoaojgahefjhhi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DevTools Author&lt;/a&gt; - 纯装逼的插件，可以选择你的 &lt;em&gt;Chrome&lt;/em&gt; 开发者工具的主题，且支持的主题超过25种，视觉装逼控必备。设置分大概三步，官网有文字说明，&lt;em&gt;youtube&lt;/em&gt; 上的视频教程奉上(Customization With DevTools Author)[&lt;a href=&quot;https://www.youtube.com/watch?v=AUZagMLMAJc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.youtube.com/watch?v=AUZagMLMAJc&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/porter-plug/lngoojfoglemfpbeiomhgheccpdheilp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitPlug&lt;/a&gt; - 在 &lt;em&gt;Github&lt;/em&gt; 项目页中嵌入有关的图表信息，直观的展示当前项目的 &lt;em&gt;Star Trend&lt;/em&gt;，能方便看到当前这个开源项目的发起时间，火爆趋势；对比较知名的项目还有相关的 &lt;em&gt;News&lt;/em&gt; 展示&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/octolinker/jlmafbaeoofdegohdhinkhilhclaklkp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OctoLinker&lt;/a&gt; - 在 &lt;em&gt;package.json&lt;/em&gt; 或任意 &lt;em&gt;.js&lt;/em&gt; 文件中，可以方便的对 &lt;em&gt;require()&lt;/em&gt; 的 &lt;em&gt;package&lt;/em&gt; 进去点击，跳转去对应的 &lt;em&gt;Github&lt;/em&gt; 页面。PS：特么不太好表达，建议你去这个插件的概述页，里面有个十来秒的视频，看完就明白鸟&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;补充：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;翻墙代理的插件偶没使用，偶手机和电脑的翻墙都是配的 &lt;em&gt;Surge&lt;/em&gt; 无脑搞定，不过翻墙代理插件推荐&lt;a href=&quot;https://chrome.google.com/webstore/detail/proxy-switchysharp/dpplabbmogkhghncfbfdeeokoefdjegm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Proxy SwitchySharp&lt;/a&gt;，熊掌公司里大多用的都是它&lt;/li&gt;
&lt;li&gt;日常开发相关的插件就以上这些，还有几款如知乎的插件、购物插件等这类与开发效率不沾边的，俺就不这上头列了哈&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;git&quot;&gt;Git&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git 教程-廖雪峰&lt;/a&gt; - 俺有看过不少 Git 的文章，确实这个系列是最通俗易懂的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github-awards.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitAwards&lt;/a&gt; - Git 工具，可以查看 Git 排名&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flyhigher139/Git-Cheat-Sheet/blob/master/Git%20Cheat%20Sheet-Zh.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git 速查&lt;/a&gt; - 分类清晰的速查表&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rogerdudler.github.io/git-guide/index.zh.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git 简明指南&lt;/a&gt; - 入门&lt;em&gt;Github&lt;/em&gt;的简明指南，木有高深内容:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xirong/my-git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git 学习资料整理&lt;/a&gt;| |内容包括很多 Git 的相关资料，&lt;em&gt;star 1200+&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/phodal/github-roam&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub 漫游指南&lt;/a&gt; - 一篇还算不错的 Git 学习总结，就是乱了点… 我理解作者&lt;strong&gt;&lt;em&gt;漫游&lt;/em&gt;&lt;/strong&gt;的意思是漫无目的想到哪写到哪~ 看到作者为鸟达成 Git 连击的成就，也是蛮拼的:)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;servers&quot;&gt;服务端&lt;/h3&gt;

&lt;p&gt;如 &lt;em&gt;Ruby、Python、Perl&lt;/em&gt; 等相似的服务端语言的学习资源。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;暂无&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;backend&quot;&gt;数据端&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Automattic/mongoose&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mongoose&lt;/a&gt; - 让 NodeJS 更容易操作 Mongodb 数据库。  附上一篇&lt;a href=&quot;https://cnodejs.org/topic/504b4924e2b84515770103dd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mongoose 学习参考文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ux&quot;&gt;设计/交互&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;作为负责最终效果呈现的前端工程师，多少得了解些 &lt;strong&gt;设计和交互&lt;/strong&gt; 的，这也是为什么 fetool 会单独的存在这一章…当然话又说回来了，偶毕业的第一份工作是设计:)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zcool.com.cn/works/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;站酷&lt;/a&gt; - 里面好东西太多，俺当年真没少再上面淘素材&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ui.cn/list.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UI中国&lt;/a&gt; - 光听名字就知道有多高大上鸟:)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;handbook&quot;&gt;速查手册&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;RT，这篇都是些文档或者API，一般这类东西都在大家浏览器的书签内，偶这也列一下大前端常用的手册地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/joshbuchea/HEAD&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HEAD&lt;/a&gt; - 最全的 &lt;em&gt;&lt;head&gt;&lt;/head&gt;&lt;/em&gt; 列表，真心佩服这种偏执的整理能力&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cdn.code.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度CDN公共库&lt;/a&gt; - 基本常见的库都收录拉，搞 demo 的时候特方便&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codeguide.bootcss.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML 和 CSS 代码规范&lt;/a&gt; - 编写灵活、稳定、高质量的 HTML 和 CSS 代码的规范&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://linux.51yip.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux命令中文手册&lt;/a&gt; - 木有系统的好好学习 Linux，所以命令更不熟悉 真羡慕那些CLI玩的飞起的:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flyhigher139/Git-Cheat-Sheet/blob/master/Git%20Cheat%20Sheet-Zh.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git 速查&lt;/a&gt; - 分类清晰的速查表&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jquery.cuishifeng.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQueryAPI 1.11.3&lt;/a&gt; - ZeptoAPI 基本和 jQuery 一样，所以看一份就好&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.php100.com/manual/css3_0/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS3&lt;/a&gt; - CSS3 的在线手册&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.expressjs.com.cn/4x/api.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Express API&lt;/a&gt; - 中文手册:) 4.x和3.x都有&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codeigniter.org.cn/user_guide/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CI用户指南&lt;/a&gt; - 一个轻量级的 PHP 框架用户指南 推荐指数低的原因是劳资PHP比较弱，囧&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.laruence.com/manual/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yaf&lt;/a&gt; - 鸟哥(惠新宸)所写的 PHP 框架 推荐指数低的原因同上…&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;other&quot;&gt;杂七杂八&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;放些开发中较有用的杂物在这儿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;提問的智慧&lt;/a&gt; - RT，&lt;a href=&quot;https://github.com/FredWe/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简体版&lt;/a&gt;。“當你拋出一個技術問題時，最終是否能得到有用的回答，往往取決於你所提問和追問的方式。本指南將教你如何正確的提問以獲得你滿意的答案。”——摘自原文&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/soulteary/tenant-point&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;租房要点&lt;/a&gt; - 适用于北上广深杭，大城市打拼&lt;strong&gt;租房&lt;/strong&gt;确实是硬伤&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jsfront/src/blob/master/qq.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;QQ 群规&lt;/a&gt; - 突然某天，有个 QQ 群让我加群 原本我是拒绝的，但当我看完这篇 QQ 群规后… 劳资真的被感动到了，太牛逼、够专业！ 最后，我默默加群鸟:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/github/gitignore&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;.gitignore 文件&lt;/a&gt; - 介绍不同语言项目的 gitignore 模板&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/easychen/howto-make-more-money&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序员如何优雅的挣零花钱？&lt;/a&gt; - 中肯的文章，如果读完能有些许收获，那么恭喜你&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ben174/git-draw&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git-draw&lt;/a&gt; - 黑魔法，可以修改自己 Git 上的 Contributions&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gitbook.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitBook&lt;/a&gt; - 写记录的好地方&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codebabes.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Codebabes&lt;/a&gt; - 学编程的网站。 重点是每通过一个测试，尼玛对应的妞会脱一件衣服… PS：要翻墙哦~&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://emailframe.work/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;emailframe&lt;/a&gt; - 邮件展示确实比较坑，建议有需要的收藏&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nieweidong/ReadmeSample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReadmeSample&lt;/a&gt;| |项目高大上的第一步就是&lt;strong&gt;包装&lt;/strong&gt;，所以来看看 &lt;em&gt;README&lt;/em&gt; 的书写套路吧 PS：劳资怎么这么无聊…&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cool&quot;&gt;前端炫技-&lt;em&gt;炫酷狂拽叼炸天站点&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.windows93.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;windows93&lt;/a&gt; - 模拟 Win93 桌面，思路、体验和整体效果比较有意思&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://geektyper.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GeekTyper&lt;/a&gt; - 好玩又具有 Geek 精神的网站，虽然创建的目的是个恶作剧 PS：网站需要翻墙&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://2016.makemepulse.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2016.makemepulse.com&lt;/a&gt; - 帅哭了。请使用现代浏览器打开&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://skill.phodal.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端技能栈&lt;/a&gt; - 好玩的前端技能栈展示&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mapbox.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mapbox&lt;/a&gt; - 非常叼的开源项目，有方便的 JSAPI(还有 SDK)。 不过免费版只能浅尝，流量有限。 PS：网站需要翻墙&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.clarkduvall.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clark Duvall&lt;/a&gt; - 一枚歪果仁的个人 blog，范儿叼叼的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://johnpolacek.github.io/superscrollorama/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SuperScrollorama&lt;/a&gt; - 好玩好看的动画库，链接是 SuperScrollorama 的展示页&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://matthew.wagerfield.com/parallax/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;parallax.js&lt;/a&gt; - 一个视差引擎的官网，在电脑和手机上都有很好的体验&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yusugomori.com/projects/css-sans/fonts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS字母&lt;/a&gt; - 用 CSS 实现英文字母，叼叼的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://modao.cc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;墨刀&lt;/a&gt; - 一个在线移动应用原型制作工具。 旨在帮助产品经理快速制作可在手机端展示的移动应用原型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;summary&quot;&gt;小结&lt;/h3&gt;

&lt;h5 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h5&gt;&lt;p&gt;  俺算个比较能自我总结的码农，所以偶尔喜欢写点东西做些记录或者自我熏陶陶醉一下。&lt;br&gt;  可写着写着发现&lt;em&gt;Evernote&lt;/em&gt;里面的东西太尼玛多(乱)了，于是想着把一些技术相关的资料都整理整理，都丢到&lt;em&gt;Github&lt;/em&gt;上沉淀下来。 这样Evernote就可以只需要记录些偏生活方便的，看着清爽一些…&lt;/p&gt;
&lt;p&gt;  所以，这篇记录其实只是为偶自己而写，确信以后也一直会这样~~~&lt;/p&gt;
&lt;h5 id=&quot;说说目标&quot;&gt;&lt;a href=&quot;#说说目标&quot; class=&quot;headerlink&quot; title=&quot;说说目标&quot;&gt;&lt;/a&gt;说说目标&lt;/h5&gt;&lt;p&gt;  其实与这篇记录类似的文章太多鸟，俺也不愿意成为一个单纯的收集资料，分享资料的这么个东西。&lt;br&gt;  我希望 fetool 能更生动、更个性，最好能更另类点，对于每样工具的思考和解析更多点，吐槽也必须有理有据，然后再配上劳资收集的 low 图，完美！&lt;br&gt;  &lt;strong&gt;希望通过不停的完善这篇记录，能Push劳资多了解业内的新玩具和新创意，然后围绕这些新东西，客观的再写点好东西，比如文章、资料、开源项目这些，让其他伙伴们少走弯路或学的更顺畅点儿&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以劳资对自己的要求是：这篇记录里列出的每样东西，自己都得的去了解、去尝试，然后再列出来。 能举一反三最好，如果达不到至少也能清楚的认识：列出来的这玩意对程序员有没有卵用，解决了啥痛点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;todo&quot;&gt;TODO&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;继续完善和扩充内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“备注/说明”这一栏不够犀利，希望再多加入自己的理解、点评、吐槽，让这篇记录更犀利和生动&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持导出多种格式，如&lt;em&gt;.pdf&lt;/em&gt;、&lt;em&gt;.epub&lt;/em&gt;、&lt;em&gt;.mobi&lt;/em&gt;等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;后续看看如果有必要，可以单独搞个页面，优化下阅读和展示效果&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;以下是 &lt;a href=&quot;http://weibo.com/jayli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@拔赤&lt;/a&gt; 总结的前端技能图：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nieweidong/fetool/master/img/fe.jpg&quot; alt=&quot;拔赤总结的前端技能图&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇文章记录了一枚程序猿的百宝箱。PS：每个分类的都按照推荐的先后排列。&lt;/p&gt;
&lt;p&gt;主要内容是一些使用过的库、工具、套路或关注的前端组织等等，反正用 &lt;strong&gt;前端瑞士军刀&lt;/strong&gt; 来总结这篇文章再合适不过鸟。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端工具" scheme="http://hangweiping.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>前端工程构建乱弹</title>
    <link href="http://hangweiping.github.io/2016/01/02/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA%E4%B9%B1%E5%BC%B9/"/>
    <id>http://hangweiping.github.io/2016/01/02/前端工程构建乱弹/</id>
    <published>2016-01-02T10:25:14.000Z</published>
    <updated>2016-06-23T03:34:55.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;webpack是一个比browserify功能更强大的模块加载器。既然是模块加载器，当然就包括对各种各样模块的加载，包括SASS/LESS/CoffeeScript/png/jpg等，以及webpack对于node_module模块加载已经非常完善了。&lt;br&gt;那么，为什么还需要bower呢？由于前端开发很多第三方模块并非都以标准npm包形式存在，有一些非主流，或者各种原因没放到npm上的包，可以在bower找到。&lt;br&gt;基于这个原因，使用webpack时候，凭着能用npm就用（依赖加载更加方便，功能更加强大），不能用的时候使用bower声明第三方模块依赖，然后使用js/css加载方式进行加载。&lt;br&gt;值得一提的是，webpack官方也提供非常便利的方式加载bower模块（模块的主要文件，被声明在bower.json main属性里面）,通过配置后就可以很方便地沿用require来加载bower模块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;按需决定是否需要bower&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yeamon帮助你快速的开展一个项目工程，提供最佳实践和工具，来让你保持高效率编码。&lt;/p&gt;
&lt;p&gt;他们自己提供了一个构建生态系统，主要通过‘yo’这个命令来构建一个完整的项目或者项目的一部分。&lt;/p&gt;
&lt;p&gt;通过官方的生成器，他们建立了一个Yeoman的工作流，这个流是由一个强大的,固定的客户端组建，包含工具和框架帮助开发者快速建立牛逼的web应用。他们尽量提供了开发者所需的东西。&lt;/p&gt;
&lt;p&gt;作为良好文档和深入思考构建过程的思想者，Yeoman包含了检测（静态检测）、测试以及压缩等等一系列工具，让开发者能够更加专注于思考解决方案。&lt;/p&gt;
&lt;p&gt;Yeoman其实是3个工具的总和：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;yo — 脚手架，自动生成工具&lt;/li&gt;
&lt;li&gt;Grunt、gulp — 构建工具 （最初只有grunt，后面gulp火了添加进来的）&lt;/li&gt;
&lt;li&gt;Bower、npm — 包管理工具 （原来是 bower，后面添加了npm）  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;gulp是工具链，可以配合各种插件做js压缩，css压缩，less编译等工作&lt;br&gt;webpack是文件打包工具，可以把项目的各种js文、css文件等打包合并成一个或多个文件&lt;br&gt;bower是包管理器，用来管理你项目里的那些外部依赖的。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的三个是各自独立发展和运行的，混合后效果就不一样，主要在于yo，相当于一个粘合剂一样，把grunt这些工具粘合在一起。&lt;/p&gt;
&lt;p&gt;我们可以看到的是，几个简单的命令，Yeoman就帮助我们建立一个项目，而且项目已经填充了不少代码，我们可以选择一个自己喜欢的，来沿着别人的已经搭建好的构架来编写业务即可，这对很多新手来说是非常好的一种提高方式，所以建议大家选star多的 —代码风格好，文件夹规划清晰，js的模块拆分细致合理。  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;bower已經過時了，npm足矣。如果用WebPack就不需要Gulp和Browserify，用Redux就不需要其他Flux框架，精簡下React+Redux+WebPack。另外ES6和Babel其實少不了要了解下的.&lt;/p&gt;
&lt;p&gt;一个package同时存在多个版本了，下面是 @sheerun 给出的解决方案（修改项目根目录的bower.json文件内的dependencies即可）：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;font-awesome&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~4.2.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;font-awesome-old&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;font-awesome#3.2.1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;后来又仔细的查看了bower官方文档，发现里面已经有了对应的安装方法，可能是我以前没注意到， 官方安装方法(英文) ，下面我把常用的几种安装方法说一下：&lt;br&gt;&lt;figure class=&quot;highlight fsharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt; 基于bower.json安装&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#基于bower.json安装&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bower install &lt;span class=&quot;meta&quot;&gt;[&amp;lt;options&amp;gt;]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt; 安装指定的package， 比如一次性安装jquery, bootstrap, underscore：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# jquery, bootstrap, underscore&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bower install jquery bootstrap underscore &lt;span class=&quot;meta&quot;&gt;[&amp;lt;options&amp;gt;]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt; 安装指定版本的package, 比如安装jquery v1&lt;span class=&quot;number&quot;&gt;.9&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#安装jquery v1&lt;span class=&quot;number&quot;&gt;.9&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bower install jquery#&lt;span class=&quot;number&quot;&gt;1.9&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;[&amp;lt;options&amp;gt;]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4.&lt;/span&gt; 同时安装一个package的不同版本（多版本共存）, 比如安装jquery v1&lt;span class=&quot;number&quot;&gt;.7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;，并且安装v1&lt;span class=&quot;number&quot;&gt;.9&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;以及最新版本的jquery（目前是&lt;span class=&quot;number&quot;&gt;2.1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;）， 像下面这样安装完成后，你的bower_components目录下就会同时存在jquery-older目录(&lt;span class=&quot;number&quot;&gt;1.7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;)， jquery-old目录（&lt;span class=&quot;number&quot;&gt;1.9&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;）, jquery目录（最新版）。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 安装jquery v1&lt;span class=&quot;number&quot;&gt;.7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bower install jquery-older=juqery#&lt;span class=&quot;number&quot;&gt;1.7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;[&amp;lt;options&amp;gt;]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 安装jquery v1&lt;span class=&quot;number&quot;&gt;.9&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bower install jquery-old=juqery#&lt;span class=&quot;number&quot;&gt;1.9&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;[&amp;lt;options&amp;gt;]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 安装最新版jquery&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bower install jquery &lt;span class=&quot;meta&quot;&gt;[&amp;lt;options&amp;gt;]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的脚本中的安装选项&lt;options&gt;有以下几个可选项( 官方说明 )：&lt;/options&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;F, --force-latest &lt;span class=&quot;comment&quot;&gt;# 安装时若有冲突则强制安装最新版；&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;p, --production &lt;span class=&quot;comment&quot;&gt;# 不要安装开发依赖的package（一般用于生产环境）；&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;S, --save &lt;span class=&quot;comment&quot;&gt;# 安装完成后将此package记录在bower.json文件的dependencies项中；&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;D, --save-dev &lt;span class=&quot;comment&quot;&gt;# 安装完成后将此package记录在bower.json文件的devDependencies项中(一般用于开发环境)；&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;webpack可以理解为专门针对前端代码打包的集成方案, gulp可以做到webpack做的, 但webpack做不到gulp能做的. webpack只是针对前端代码的, 例如前端代码的合并,压缩, 把ES6代码转成ES3代码, sass转css等.&lt;br&gt;gulp 还可以对node 的服务器端的程序做处理,例如批量生成文件, 运行启动服务等等.&lt;br&gt;至于选择哪个一般看个人喜好和项目要求, 一般react的项目用webpack比较多,其他的项目用gulp比较多.&lt;br&gt;webpack是静态资源打包工具，grunt和gulp是自动化构建工具，grunt和gulp二选一就可以，用gulp的比较多，gulp可以和webpack搭配使用。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;webpack是一个比browserify功能更强大的模块加载器。既然是模块加载器，当然就包括对各种各样模块的加载，包括SASS/LESS/CoffeeScript/png/jpg等，以及webpack对于node_module模块加载已经非常完善了。&lt;br&gt;那么，为什么还需要bower呢？由于前端开发很多第三方模块并非都以标准npm包形式存在，有一些非主流，或者各种原因没放到npm上的包，可以在bower找到。&lt;br&gt;基于这个原因，使用webpack时候，凭着能用npm就用（依赖加载更加方便，功能更加强大），不能用的时候使用bower声明第三方模块依赖，然后使用js/css加载方式进行加载。&lt;br&gt;值得一提的是，webpack官方也提供非常便利的方式加载bower模块（模块的主要文件，被声明在bower.json main属性里面）,通过配置后就可以很方便地沿用require来加载bower模块。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://hangweiping.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>7大查找算法</title>
    <link href="http://hangweiping.github.io/2015/01/01/7%E5%A4%A7%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
    <id>http://hangweiping.github.io/2015/01/01/7大查找算法/</id>
    <published>2015-01-01T12:10:15.000Z</published>
    <updated>2016-06-10T06:31:43.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;顺序查找 2. 二分查找 3. 插值查找 4. 斐波那契查找 5. 树表查找 6. 分块查找 7. 哈希查找&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　查找是在大量的信息中寻找一个特定的信息元素，在计算机应用中，查找是常用的基本运算，例如编译程序中符号表的查找。本文简单概括性的介绍了常见的七种查找算法，说是七种，其实二分查找、插值查找以及斐波那契查找都可以归为一类——插值查找。插值查找和斐波那契查找是在二分查找的基础上的优化查找算法。树表查找和哈希查找会在后续的博文中进行详细介绍。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;　　查找定义：根据给定的某个值，在查找表中确定一个其关键字等于给定值的数据元素（或记录）。&lt;/p&gt;
&lt;p&gt;　　查找算法分类：&lt;br&gt;　　1）静态查找和动态查找；&lt;br&gt;　　　　注：静态或者动态都是针对查找表而言的。动态表指查找表中有删除和插入操作的表。&lt;br&gt;　　2）无序查找和有序查找。&lt;br&gt;　　　　无序查找：被查找数列有序无序均可；&lt;br&gt;　　　　有序查找：被查找数列必须为有序数列。&lt;br&gt;　　平均查找长度（Average Search Length，ASL）：需和指定key进行比较的关键字的个数的期望值，称为查找算法在查找成功时的平均查找长度。&lt;br&gt;　　对于含有n个数据元素的查找表，查找成功的平均查找长度为：ASL = Pi*Ci的和。&lt;br&gt;　　Pi：查找表中第i个数据元素的概率。&lt;br&gt;　　Ci：找到第i个数据元素时已经比较过的次数。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;顺序查找&lt;br&gt;　　说明：顺序查找适合于存储结构为顺序存储或链接存储的线性表。&lt;br&gt;　　基本思想：顺序查找也称为线形查找，属于无序查找算法。从数据结构线形表的一端开始，顺序扫描，依次将扫描到的结点关键字与给定值k相比较，若相等则表示查找成功；若扫描结束仍没有找到关键字等于k的结点，表示查找失败。&lt;br&gt;　　复杂度分析：  　&lt;br&gt;　　查找成功时的平均查找长度为：（假设每个数据元素的概率相等） ASL = 1/n(1+2+3+…+n) = (n+1)/2 ;&lt;br&gt;　　当查找不成功时，需要n+1次比较，时间复杂度为O(n);&lt;br&gt;　　所以，顺序查找的时间复杂度为O(n)。    &lt;/li&gt;
&lt;li&gt;二分查找&lt;br&gt;　　说明：元素必须是有序的，如果是无序的则要先进行排序操作。&lt;br&gt;　　基本思想：也称为是折半查找，属于有序查找算法。用给定值k先与中间结点的关键字比较，中间结点把线形表分成两个子表，若相等则查找成功；若不相等，再根据k与该中间结点关键字的比较结果确定下一步查找哪个子表，这样递归进行，直到查找到或查找结束发现表中没有这样的结点。&lt;br&gt;　　复杂度分析：最坏情况下，关键词比较次数为log2(n+1)，且期望时间复杂度为O(log2n)；&lt;br&gt;　　注：折半查找的前提条件是需要有序表顺序存储，对于静态查找表，一次排序后不再变化，折半查找能得到不错的效率。但对于需要频繁执行插入或删除操作的数据集来说，维护有序的排序会带来不小的工作量，那就不建议使用。——《大话数据结构》  
　&lt;/li&gt;
&lt;li&gt;插值查找  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　在介绍插值查找之前，首先考虑一个新问题，为什么上述算法一定要是折半，而不是折四分之一或者折更多呢？&lt;br&gt;　　打个比方，在英文字典里面查“apple”，你下意识翻开字典是翻前面的书页还是后面的书页呢？如果再让你查“zoo”，你又怎么查？很显然，这里你绝对不会是从中间开始查起，而是有一定目的的往前或往后翻。&lt;br&gt;　　同样的，比如要在取值范围1 ~ 10000 之间 100 个元素从小到大均匀分布的数组中查找5， 我们自然会考虑从数组下标较小的开始查找。&lt;br&gt;　　经过以上分析，折半查找这种查找方式，不是自适应的（也就是说是傻瓜式的）。二分查找中查找点计算如下：  &lt;/p&gt;
&lt;p&gt;　　mid=(low+high)/2, 即mid=low+1/2&lt;em&gt;(high-low);&lt;br&gt;　　通过类比，我们可以将查找的点改进为如下：&lt;br&gt;　　mid=low+(key-a[low])/(a[high]-a[low])\&lt;/em&gt;(high-low);  &lt;/p&gt;
&lt;p&gt;　　也就是将上述的比例参数1/2改进为自适应的，根据关键字在整个有序表中所处的位置，让mid值的变化更靠近关键字key，这样也就间接地减少了比较次数。&lt;br&gt;　　基本思想：基于二分查找算法，将查找点的选择改进为自适应选择，可以提高查找效率。当然，差值查找也属于有序查找。&lt;br&gt;　　注：对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好的多。反之，数组中如果分布非常不均匀，那么插值查找未必是很合适的选择。&lt;br&gt;　　复杂度分析：查找成功或者失败的时间复杂度均为O(log2(log2n))。    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;斐波那契查找  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　在介绍斐波那契查找算法之前，我们先介绍一下很它紧密相连并且大家都熟知的一个概念——黄金分割。&lt;br&gt;　　黄金比例又称黄金分割，是指事物各部分间一定的数学比例关系，即将整体一分为二，较大部分与较小部分之比等于整体与较大部分之比，其比值约为1:0.618或1.618:1。&lt;br&gt;　　0.618被公认为最具有审美意义的比例数字，这个数值的作用不仅仅体现在诸如绘画、雕塑、音乐、建筑等艺术领域，而且在管理、工程设计等方面也有着不可忽视的作用。因此被称为黄金分割。&lt;br&gt;　　大家记不记得斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89…….（从第三个数开始，后边每一个数都是前两个数的和）。然后我们会发现，随着斐波那契数列的递增，前后两个数的比值会越来越接近0.618，利用这个特性，我们就可以将黄金比例运用到查找技术中。  &lt;/p&gt;
&lt;p&gt;　　基本思想：也是二分查找的一种提升算法，通过运用黄金比例的概念在数列中选择查找点进行查找，提高查找效率。同样地，斐波那契查找也属于一种有序查找算法。&lt;br&gt;　　相对于折半查找，一般将待比较的key值与第mid=（low+high）/2位置的元素比较，比较结果分三种情况：&lt;br&gt;　　1）相等，mid位置的元素即为所求&lt;br&gt;　　2）&amp;gt;，low=mid+1;&lt;br&gt;   3）&amp;lt;，high=mid-1。&lt;br&gt;　　斐波那契查找与折半查找很相似，他是根据斐波那契序列的特点对有序表进行分割的。他要求开始表中记录的个数为某个斐波那契数小1，及n=F(k)-1;&lt;br&gt; 开始将k值与第F(k-1)位置的记录进行比较(及mid=low+F(k-1)-1),比较结果也分为三种&lt;br&gt;　　1）相等，mid位置的元素即为所求&lt;br&gt;　　2）&amp;gt;，low=mid+1,k-=2;&lt;br&gt;　　说明：low=mid+1说明待查找的元素在[mid+1,high]范围内，k-=2 说明范围[mid+1,high]内的元素个数为n-(F(k-1))= Fk-1-F(k-1)=Fk-F(k-1)-1=F(k-2)-1个，所以可以递归的应用斐波那契查找。&lt;br&gt;　　3）&amp;lt;，high=mid-1,k-=1。&lt;br&gt;　　说明：low=mid+1说明待查找的元素在[low,mid-1]范围内，k-=1 说明范围[low,mid-1]内的元素个数为F(k-1)-1个，所以可以递归的应用斐波那契查找。&lt;br&gt;　　复杂度分析：最坏情况下，时间复杂度为O(log2n)，且其期望复杂度也为O(log2n)。  
　&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;树表查找&lt;br&gt;　　5.1 最简单的树表查找算法——二叉树查找算法。&lt;br&gt;　　基本思想：二叉查找树是先对待查找的数据进行生成树，确保树的左分支的值小于右分支的值，然后在就行和每个节点的父节点比较大小，查找最适合的范围。 这个算法的查找效率很高，但是如果使用这种查找方法要首先创建树。&lt;br&gt;　　二叉查找树（BinarySearch Tree，也叫二叉搜索树，或称二叉排序树Binary Sort Tree）或者是一棵空树，或者是具有下列性质的二叉树：&lt;br&gt;　　1）若任意节点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；&lt;br&gt;　　2）若任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；&lt;br&gt;　　3）任意节点的左、右子树也分别为二叉查找树。&lt;br&gt;　　二叉查找树性质：对二叉查找树进行中序遍历，即可得到有序的数列。&lt;br&gt;　　不同形态的二叉查找树如下图所示：&lt;/p&gt;
&lt;p&gt;　　复杂度分析：它和二分查找一样，插入和查找的时间复杂度均为O(logn)，但是在最坏的情况下仍然会有O(n)的时间复杂度。原因在于插入和删除元素的时候，树没有保持平衡（比如，我们查找上图（b）中的“93”，我们需要进行n次查找操作）。我们追求的是在最坏的情况下仍然有较好的时间复杂度，这就是平衡查找树设计的初衷。&lt;br&gt;　　下图为二叉树查找和顺序查找以及二分查找性能的对比图：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　基于二叉查找树进行优化，进而可以得到其他的树表查找算法，如平衡树、红黑树等高效算法。&lt;br&gt;　　5.2 平衡查找树之2-3查找树（2-3 Tree）&lt;br&gt;　　2-3查找树定义：和二叉树不一样，2-3树运行每个节点保存1个或者两个的值。对于普通的2节点(2-node)，他保存1个key和左右两个自己点。对应3节点(3-node)，保存两个Key，2-3查找树的定义如下：&lt;br&gt;　　1）要么为空，要么：&lt;br&gt;　　2）对于2节点，该节点保存一个key及对应value，以及两个指向左右节点的节点，左节点也是一个2-3节点，所有的值都比key要小，右节点也是一个2-3节点，所有的值比key要大。&lt;br&gt;　　3）对于3节点，该节点保存两个key及对应value，以及三个指向左中右的节点。左节点也是一个2-3节点，所有的值均比两个key中的最小的key还要小；中间节点也是一个2-3节点，中间节点的key值在两个跟节点key值之间；右节点也是一个2-3节点，节点的所有key值比两个key中的最大的key还要大。&lt;br&gt;Definition of 2-3 tree&lt;br&gt;　　2-3查找树的性质：&lt;br&gt;　　1）如果中序遍历2-3查找树，就可以得到排好序的序列；&lt;br&gt;　　2）在一个完全平衡的2-3查找树中，根节点到每一个为空节点的距离都相同。（这也是平衡树中“平衡”一词的概念，根节点到叶节点的最长距离对应于查找算法的最坏情况，而平衡树中根节点到叶节点的距离都一样，最坏情况也具有对数复杂度。）&lt;br&gt;　　性质2）如下图所示：  &lt;/p&gt;
&lt;p&gt;　　复杂度分析：&lt;br&gt;　　2-3树的查找效率与树的高度是息息相关的。&lt;br&gt;在最坏的情况下，也就是所有的节点都是2-node节点，查找效率为lgN&lt;br&gt;在最好的情况下，所有的节点都是3-node节点，查找效率为log3N约等于0.631lgN&lt;br&gt;　　距离来说，对于1百万个节点的2-3树，树的高度为12-20之间，对于10亿个节点的2-3树，树的高度为18-30之间。&lt;br&gt;　　对于插入来说，只需要常数次操作即可完成，因为他只需要修改与该节点关联的节点即可，不需要检查其他节点，所以效率和查找类似。下面是2-3查找树的效率：&lt;br&gt;analysis of 2-3 tree  &lt;/p&gt;
&lt;p&gt;　　5.3 平衡查找树之红黑树（Red-Black Tree）&lt;br&gt;　　2-3查找树能保证在插入元素之后能保持树的平衡状态，最坏情况下即所有的子节点都是2-node，树的高度为lgn，从而保证了最坏情况下的时间复杂度。但是2-3树实现起来比较复杂，于是就有了一种简单实现2-3树的数据结构，即红黑树（Red-Black Tree）。&lt;br&gt;　　基本思想：红黑树的思想就是对2-3查找树进行编码，尤其是对2-3查找树中的3-nodes节点添加额外的信息。红黑树中将节点之间的链接分为两种不同类型，红色链接，他用来链接两个2-nodes节点来表示一个3-nodes节点。黑色链接用来链接普通的2-3节点。特别的，使用红色链接的两个2-nodes来表示一个3-nodes节点，并且向左倾斜，即一个2-node是另一个2-node的左子节点。这种做法的好处是查找的时候不用做任何修改，和普通的二叉查找树相同。&lt;br&gt;Red black tree&lt;br&gt;　　红黑树的定义：&lt;br&gt;　　红黑树是一种具有红色和黑色链接的平衡查找树，同时满足：&lt;br&gt;红色节点向左倾斜&lt;br&gt;一个节点不可能有两个红色链接&lt;br&gt;整个树完全黑色平衡，即从根节点到所以叶子结点的路径上，黑色链接的个数都相同。&lt;br&gt;　　下图可以看到红黑树其实是2-3树的另外一种表现形式：如果我们将红色的连线水平绘制，那么他链接的两个2-node节点就是2-3树中的一个3-node节点了。&lt;br&gt;1-1 correspondence between 2-3 and LLRB&lt;br&gt;　　红黑树的性质：整个树完全黑色平衡，即从根节点到所以叶子结点的路径上，黑色链接的个数都相同（2-3树的第2）性质，从根节点到叶子节点的距离都相等）。&lt;br&gt;　　复杂度分析：最坏的情况就是，红黑树中除了最左侧路径全部是由3-node节点组成，即红黑相间的路径长度是全黑路径长度的2倍。&lt;br&gt;　　下图是一个典型的红黑树，从中可以看到最长的路径(红黑相间的路径)是最短路径的2倍：&lt;br&gt;a typic red black tree&lt;br&gt;　　红黑树的平均高度大约为logn。&lt;br&gt;　　下图是红黑树在各种情况下的时间复杂度，可以看出红黑树是2-3查找树的一种实现，它能保证最坏情况下仍然具有对数的时间复杂度。  &lt;/p&gt;
&lt;p&gt;　　红黑树这种数据结构应用十分广泛，在多种编程语言中被用作符号表的实现，如：&lt;br&gt;Java中的java.util.TreeMap,java.util.TreeSet；&lt;br&gt;C++ STL中的：map,multimap,multiset；&lt;br&gt;.NET中的：SortedDictionary,SortedSet 等。&lt;br&gt;　　5.4 B树和B+树（B Tree/B+ Tree）&lt;br&gt;　　平衡查找树中的2-3树以及其实现红黑树。2-3树种，一个节点最多有2个key，而红黑树则使用染色的方式来标识这两个key。&lt;br&gt;　　维基百科对B树的定义为“在计算机科学中，B树（B-tree）是一种树状数据结构，它能够存储数据、对其进行排序并允许以O(log n)的时间复杂度运行进行查找、顺序读取、插入和删除的数据结构。B树，概括来说是一个节点可以拥有多于2个子节点的二叉查找树。与自平衡二叉查找树不同，B树为系统最优化大块数据的读和写操作。B-tree算法减少定位记录时所经历的中间过程，从而加快存取速度。普遍运用在数据库和文件系统。&lt;br&gt;　　B树定义：&lt;br&gt;　　B树可以看作是对2-3查找树的一种扩展，即他允许每个节点有M-1个子节点。&lt;br&gt;根节点至少有两个子节点&lt;br&gt;每个节点有M-1个key，并且以升序排列&lt;br&gt;位于M-1和M key的子节点的值位于M-1 和M key对应的Value之间&lt;br&gt;其它节点至少有M/2个子节点&lt;br&gt;　　下图是一个M=4 阶的B树:  &lt;/p&gt;
&lt;p&gt;　　可以看到B树是2-3树的一种扩展，他允许一个节点有多于2个的元素。B树的插入及平衡化操作和2-3树很相似，这里就不介绍了。&lt;br&gt;　　B+树定义：&lt;br&gt;　　B+树是对B树的一种变形树，它与B树的差异在于：&lt;br&gt;有k个子结点的结点必然有k个关键码；&lt;br&gt;非叶结点仅具有索引作用，跟记录有关的信息均存放在叶结点中。&lt;br&gt;树的所有叶结点构成一个有序链表，可以按照关键码排序的次序遍历全部记录。&lt;br&gt;　&lt;br&gt;　　B和B+树的区别在于，B+树的非叶子结点只包含导航信息，不包含实际的值，所有的叶子结点和相连的节点使用链表相连，便于区间查找和遍历。&lt;br&gt;　　B+ 树的优点在于：&lt;br&gt;由于B+树在内部节点上不好含数据信息，因此在内存页中能够存放更多的key。 数据存放的更加紧密，具有更好的空间局部性。因此访问叶子几点上关联的数据也具有更好的缓存命中率。&lt;br&gt;B+树的叶子结点都是相链的，因此对整棵树的便利只需要一次线性遍历叶子结点即可。而且由于数据顺序排列并且相连，所以便于区间查找和搜索。而B树则需要进行每一层的递归遍历。相邻的元素可能在内存中不相邻，所以缓存命中性没有B+树好。&lt;br&gt;　　但是B树也有优点，其优点在于，由于B树的每一个节点都包含key和value，因此经常访问的元素可能离根节点更近，因此访问也更迅速。&lt;br&gt;　　下面是B 树和B+树的区别图：&lt;br&gt;Different between B tree and B plus tree&lt;br&gt;　　B/B+树常用于文件系统和数据库系统中，它通过对每个节点存储个数的扩展，使得对连续的数据能够进行较快的定位和访问，能够有效减少查找时间，提高存储的空间局部性从而减少IO操作。它广泛用于文件系统及数据库中，如：&lt;br&gt;Windows：HPFS文件系统；&lt;br&gt;Mac：HFS，HFS+文件系统；&lt;br&gt;Linux：ResiserFS，XFS，Ext3FS，JFS文件系统；&lt;br&gt;数据库：ORACLE，MYSQL，SQLSERVER等中。&lt;br&gt;　　树表查找总结：&lt;br&gt;　　二叉查找树平均查找性能不错，为O(logn)，但是最坏情况会退化为O(n)。在二叉查找树的基础上进行优化，我们可以使用平衡查找树。平衡查找树中的2-3查找树，这种数据结构在插入之后能够进行自平衡操作，从而保证了树的高度在一定的范围内进而能够保证最坏情况下的时间复杂度。但是2-3查找树实现起来比较困难，红黑树是2-3树的一种简单高效的实现，他巧妙地使用颜色标记来替代2-3树中比较难处理的3-node节点问题。红黑树是一种比较高效的平衡查找树，应用非常广泛，很多编程语言的内部实现都或多或少的采用了红黑树。&lt;br&gt;　　除此之外，2-3查找树的另一个扩展——B/B+平衡树，在文件系统和数据库系统中有着广泛的应用。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;分块查找&lt;br&gt;　　分块查找又称索引顺序查找，它是顺序查找的一种改进方法。&lt;br&gt;　　算法思想：将n个数据元素”按块有序”划分为m块（m ≤ n）。每一块中的结点不必有序，但块与块之间必须”按块有序”；即第1块中任一元素的关键字都必须小于第2块中任一元素的关键字；而第2块中任一元素又都必须小于第3块中的任一元素，……&lt;br&gt;　　算法流程：&lt;br&gt;　　step1 先选取各块中的最大关键字构成一个索引表；&lt;br&gt;　　step2 查找分两个部分：先对索引表进行二分查找或顺序查找，以确定待查记录在哪一块中；然后，在已确定的块中用顺序法进行查找。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;哈希查找&lt;br&gt;　　什么是哈希表（Hash）？&lt;br&gt;　　我们使用一个下标范围比较大的数组来存储元素。可以设计一个函数（哈希函数， 也叫做散列函数），使得每个元素的关键字都与一个函数值（即数组下标）相对应，于是用这个数组单元来存储这个元素；也可以简单的理解为，按照关键字为每一个元素”分类”，然后将这个元素存储在相应”类”所对应的地方。但是，不能够保证每个元素的关键字与函数值是一一对应的，因此极有可能出现对于不同的元素，却计算出了相同的函数值，这样就产生了”冲突”，换句话说，就是把不同的元素分在了相同的”类”之中。后面我们将看到一种解决”冲突”的简便做法。&lt;br&gt;　　总的来说，”直接定址”与”解决冲突”是哈希表的两大特点。&lt;br&gt;　　什么是哈希函数？&lt;br&gt;　　哈希函数的规则是：通过某种转换关系，使关键字适度的分散到指定大小的的顺序结构中，越分散，则以后查找的时间复杂度越小，空间复杂度越高。&lt;br&gt;　　算法思想：哈希的思路很简单，如果所有的键都是整数，那么就可以使用一个简单的无序数组来实现：将键作为索引，值即为其对应的值，这样就可以快速访问任意键的值。这是对于简单的键的情况，我们将其扩展到可以处理更加复杂的类型的键。&lt;br&gt;　　算法流程：&lt;br&gt;　　1）用给定的哈希函数构造哈希表；&lt;br&gt;　　2）根据选择的冲突处理方法解决地址冲突；&lt;br&gt;　　　　常见的解决冲突的方法：拉链法和线性探测法。&lt;br&gt;　　3）在哈希表的基础上执行哈希查找。&lt;br&gt;　　哈希表是一个在时间和空间上做出权衡的经典例子。如果没有内存限制，那么可以直接将键作为数组的索引。那么所有的查找时间复杂度为O(1)；如果没有时间限制，那么我们可以使用无序数组并进行顺序查找，这样只需要很少的内存。哈希表使用了适度的时间和空间来在这两个极端之间找到了平衡。只需要调整哈希函数算法即可在时间和空间上做出取舍。&lt;br&gt;　　复杂度分析：&lt;br&gt;　　单纯论查找复杂度：对于无冲突的Hash表而言，查找复杂度为O(1)（注意，在查找之前我们需要构建相应的Hash表）。&lt;br&gt;　　使用Hash，我们付出了什么？&lt;br&gt;　　我们在实际编程中存储一个大规模的数据，最先想到的存储结构可能就是map，也就是我们常说的KV pair，经常使用Python的博友可能更有这种体会。使用map的好处就是，我们在后续处理数据处理时，可以根据数据的key快速的查找到对应的value值。map的本质就是Hash表，那我们在获取了超高查找效率的基础上，我们付出了什么？&lt;br&gt;　　Hash是一种典型以空间换时间的算法，比如原来一个长度为100的数组，对其查找，只需要遍历且匹配相应记录即可，从空间复杂度上来看，假如数组存储的是byte类型数据，那么该数组占用100byte空间。现在我们采用Hash算法，我们前面说的Hash必须有一个规则，约束键与存储位置的关系，那么就需要一个固定长度的hash表，此时，仍然是100byte的数组，假设我们需要的100byte用来记录键与位置的关系，那么总的空间为200byte,而且用于记录规则的表大小会根据规则，大小可能是不定的。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;顺序查找 2. 二分查找 3. 插值查找 4. 斐波那契查找 5. 树表查找 6. 分块查找 7. 哈希查找&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　查找是在大量的信息中寻找一个特定的信息元素，在计算机应用中，查找是常用的基本运算，例如编译程序中符号表的查找。本文简单概括性的介绍了常见的七种查找算法，说是七种，其实二分查找、插值查找以及斐波那契查找都可以归为一类——插值查找。插值查找和斐波那契查找是在二分查找的基础上的优化查找算法。树表查找和哈希查找会在后续的博文中进行详细介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://hangweiping.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="查找" scheme="http://hangweiping.github.io/tags/%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>css文本和字体</title>
    <link href="http://hangweiping.github.io/2014/12/30/css%E6%96%87%E6%9C%AC%E5%92%8C%E5%AD%97%E4%BD%93/"/>
    <id>http://hangweiping.github.io/2014/12/30/css文本和字体/</id>
    <published>2014-12-30T08:15:32.000Z</published>
    <updated>2016-06-10T02:43:34.000Z</updated>
    
    <content type="html">&lt;p&gt;字体是“文字的不同体式”或者“字的形体结构”。对于英文而言，每种字体都是由一组具有独特样式的字母、数字和符号组成的。根据外观，字体可以分为不同的类别（font collection），包括衬线字体（serif）、无衬线字体（sans-serif）和等宽字体（monospace）。每一类字体可以分成不同的字体族（font family），比如 Times 和 Helvetica。而字体族中又可以包含不同的字型（font face），反映了相应字体族基本设计的不同变化，例如 Times Roman、 Times Bold、 Helvetica Condensed 和 Bodoni italic。CSS字体属性主要描述一类字体的大小和外观，比如：使用什么字体族（是 Times，还是 Helvitica），多大字号，粗体还是斜体。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;font&lt;/span&gt;-maily：字体簇&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;font&lt;/span&gt;-&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;：字体大小&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;font&lt;/span&gt;-weight：字体粗细&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;font&lt;/span&gt;-style：字体样式&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;font&lt;/span&gt;-&lt;span class=&quot;built_in&quot;&gt;variant&lt;/span&gt;：字体变化&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;font&lt;/span&gt;：字体简写&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;字体簇&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;font-family 用于设定元素中的文本使用什么字体，具体用法参考 font-family ，其常见应用和问题如下：&lt;/p&gt;
&lt;h3 id=&quot;字体来源&quot;&gt;&lt;a href=&quot;#字体来源&quot; class=&quot;headerlink&quot; title=&quot;字体来源&quot;&gt;&lt;/a&gt;字体来源&lt;/h3&gt;&lt;p&gt;用户机器中安装的字体；&lt;br&gt;保存在第三方网站上的字体，如：Typeket和Google Fonts&lt;br&gt;保存在自身Web服务器上的字体，这些字体通过@font-face引入；  &lt;/p&gt;
&lt;h3 id=&quot;继承性&quot;&gt;&lt;a href=&quot;#继承性&quot; class=&quot;headerlink&quot; title=&quot;继承性&quot;&gt;&lt;/a&gt;继承性&lt;/h3&gt;&lt;p&gt;font-family是可以继承的属性，因此它的值会遗传给所有后代元素。在实际应用font-family的时候，应该给整个页面设定一种主字体，然后只对那些需要使用不同字体的元素再应用 font-family。要为整个页面指定字体，可以设定 body 元素的 font-family 属性。  &lt;/p&gt;
&lt;h3 id=&quot;字体栈&quot;&gt;&lt;a href=&quot;#字体栈&quot; class=&quot;headerlink&quot; title=&quot;字体栈&quot;&gt;&lt;/a&gt;字体栈&lt;/h3&gt;&lt;p&gt;每种操作系统自带的字体不多，而且用户随时会安装和删除字体，因此不敢保证一定能应用某种字体来显示网页。为此，在指定文本的字体时，需要多列出几种后备字体，以防第一种字体无效。这个列表也叫字体栈，例如： body {font-family:”trebuchet ms”, tahoma, sans-serif;} 。注意，字体栈的最后一项要指定一个通用的字体类，如： sans-serif 。通用的字体类有：&lt;br&gt;serif：衬线字体，字符笔画的末端会有一些装饰线；&lt;br&gt;sans-serif：无衬线字体，字符笔画的末端没有装饰线；&lt;br&gt;monospace：等宽字体，每个字符的宽度相等（也称代码体）；&lt;br&gt;cursive：草书体或手写体；&lt;br&gt;fantasy：不能归入其他类别的字体（一般都是奇形怪状的字体）。  &lt;/p&gt;
&lt;h3 id=&quot;字体搭配&quot;&gt;&lt;a href=&quot;#字体搭配&quot; class=&quot;headerlink&quot; title=&quot;字体搭配&quot;&gt;&lt;/a&gt;字体搭配&lt;/h3&gt;&lt;p&gt;常见搭配&lt;br&gt;verdana, tahoma, sans-serif&lt;br&gt;helvetica, arial, sans-serif&lt;/p&gt;
&lt;p&gt;如果字体名像 Trebuchet MS 一样多于一个单词（有空格），应该加上引号&lt;br&gt;font-family 的值（字体名）不区分大小写&lt;/p&gt;
&lt;h3 id=&quot;字体大小&quot;&gt;&lt;a href=&quot;#字体大小&quot; class=&quot;headerlink&quot; title=&quot;字体大小&quot;&gt;&lt;/a&gt;字体大小&lt;/h3&gt;&lt;p&gt;浏览器样式表默认为每个 HTML 元素都设定了 font-size，因此你在设定 font-size 的时候，其实是在修改默认值。由于字体大小在标记层次中是可以继承的，假如你对使用的字体大小单位怎么影响继承不十分了解，那很容易碰到有些字体莫名其妙变大或变小的问题。字体的具体用法可以参考 font-size ，常见应用和问题如下：&lt;/p&gt;
&lt;p&gt;字体大小的默认值：16px&lt;br&gt;绝对单位 VS 相对单位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绝对单位：&lt;br&gt;简介：使用像素、派卡（pica）或英寸设定字体大小，另外&lt;br&gt;优点：实际字体设定多大就多大，与祖先元素的字体大小无关。&lt;br&gt;缺点：在需要调整页面所有元素的字体大小时，必须一个一个地修改样式表中的 font-size，相当麻烦。&lt;br&gt;其他：设定绝对字体大小时，也可以使用关键字值，比如：x-small、medium、x-large等。具体可参考 Using_Keywords&lt;/li&gt;
&lt;li&gt;相对单位&lt;br&gt;简介：使用百分比、 em 或 rem（根元素的字体大小）设定字体大小。&lt;br&gt;优点：使用相对大小后，通过调整 body 元素的字体大小，可以成比例地改变所有元素的字体大小。或者，至少能通过改变某个祖先元素，只影响它的所有子元素。在反复修改布局设计的时候，这样显然能节省时间&lt;br&gt;缺点：可能会出现意外的“连锁反应”&lt;br&gt;其他：设定相对字体大小时，也可以使用关键字值，比如：smaller、larger。&lt;/li&gt;
&lt;li&gt;使用rem&lt;br&gt;简介：rem(root em)是CSS3新增的字体大小单位，也是相对单位，但rem是相对于HTML根元素的单位。&lt;br&gt;优点：既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。&lt;br&gt;缺点：存在浏览器兼容性问题，除了 IE8 及更早版本外，所有浏览器均已支持rem。&lt;br&gt;实际应用：对于不支持它的浏览器，需要多写一个绝对单位的声明，例如： p {font-size:14px; font-size:.875rem;}&lt;br&gt;浏览器缩放与字体大小调整对字体大小的影响&lt;br&gt;浏览器缩放：整体调整&lt;br&gt;字体大小调整：相对单位调整，绝对单位不变&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;字体样式&quot;&gt;&lt;a href=&quot;#字体样式&quot; class=&quot;headerlink&quot; title=&quot;字体样式&quot;&gt;&lt;/a&gt;字体样式&lt;/h2&gt;&lt;p&gt;字体样式默认是正体，也可以是斜体，具体用法参考 font-style 。在实际应用中，英文中的斜体主要表示强调，如果是为了表示强调设置font-style，那么在在 HTML 标记中直接使用 &lt;em&gt; 标签即可。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;字体粗细&quot;&gt;&lt;a href=&quot;#字体粗细&quot; class=&quot;headerlink&quot; title=&quot;字体粗细&quot;&gt;&lt;/a&gt;字体粗细&lt;/h3&gt;&lt;p&gt;字体粗体的主要作用是表示重要，具体用法参考 font-weight 。&lt;br&gt;在实际应用中，由于浏览器对font-weight的数字值实现各不相同，所以从常规字体到粗体的切换可能发生在不同的数值上——通常是 400。所以，对于font-weight属性来说，最好只用 bold 和 normal 这两个值。&lt;br&gt;此外，HTML 元素 strong 也表示重要，而它的默样式就是粗体，如果要突出文本中的某一个字或次，请使用strong。  &lt;/p&gt;
&lt;h3 id=&quot;字体变化&quot;&gt;&lt;a href=&quot;#字体变化&quot; class=&quot;headerlink&quot; title=&quot;字体变化&quot;&gt;&lt;/a&gt;字体变化&lt;/h3&gt;&lt;p&gt;font-variant属性除了normal，就只有一个值，即 small-caps——导致所有小写英文字母变成小型大写字母，具体用法请参考 font-variant&lt;/p&gt;
&lt;h3 id=&quot;属性简写&quot;&gt;&lt;a href=&quot;#属性简写&quot; class=&quot;headerlink&quot; title=&quot;属性简写&quot;&gt;&lt;/a&gt;属性简写&lt;/h3&gt;&lt;p&gt;font 属性是一个简写形式，通过它只要一条 CSS 声明就可以设定所有字体属性，例如： p {font: bold italic small-caps .9em helvetica, arial, sans-serif;} 。具体规则如下：&lt;/p&gt;
&lt;p&gt;必须声明 font-size 和 font-family 的值&lt;br&gt;所有值必须按如下顺序声明：&lt;br&gt;font-weight、 font-style、 font-variant 不分先后；&lt;br&gt;然后是 font-size；&lt;br&gt;然后是 font-size；&lt;br&gt;font属性除了用于字体属性的简写外，还可以给它指定一些特殊的值，如下所示：&lt;/p&gt;
&lt;p&gt;caption：使用有标题的系统控件的文本字体（如按钮，菜单等）（CSS2）&lt;br&gt;icon：使用图标标签的字体（CSS2）&lt;br&gt;menu：使用菜单的字体（CSS2）&lt;br&gt;message-box：使用信息对话框的文本字体（CSS2）&lt;br&gt;small-caption：使用小控件的字体（CSS2）&lt;br&gt;status-bar：使用窗口状态栏的字体（CSS2）&lt;/p&gt;
&lt;p&gt;font&lt;br&gt;其他属性&lt;/p&gt;
&lt;p&gt;font-stretch&lt;br&gt;font-size-adjust&lt;/p&gt;
&lt;h2 id=&quot;Web字体&quot;&gt;&lt;a href=&quot;#Web字体&quot; class=&quot;headerlink&quot; title=&quot;Web字体&quot;&gt;&lt;/a&gt;Web字体&lt;/h2&gt;&lt;p&gt;Web字体指的是非用户机器中的字体。目前，可以通过使用@font-face规则在网页中嵌入Web字体，并且该功能已经得到了浏览器广泛支持。设定Web字体的方式如下所示：&lt;br&gt;使用Google Web Fonts或Adobe的Typekit等公共字体&lt;br&gt;以Google Web Fonts为例，访问 &lt;a href=&quot;https://www.google.com/fonts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.google.com/fonts&lt;/a&gt; ，找到想要的字体，单击“Add To Collection”，然后单击页面底部的 Use 按钮。Google 就会生成一个指向刚刚选定字体的 &lt;link&gt; 标签，直接把它复制粘贴到你的 HTML 文件中即可。例如： &lt;link href=&quot;https://fonts.googleapis.com/css?family=Open+Sans|Roboto&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt; ，在CSS中引用下载的字体： font-family: ‘Open Sans’, Roboto, sans-serif;&lt;/p&gt;
&lt;p&gt;使用@font-face规则使用@font-face规则的前提是可以从网站或第三方Web服务器下载到相应的字体包，以这种方式提供的字体，会在使用该字体的页面第一次加载时被浏览器下载并缓存起来，以后就不用下载了。使用@font-face的一个问题是不同的浏览器要求的字体格式不同，具体如下所示：&lt;/p&gt;
&lt;p&gt;Firefox/Safari/Chrome/IOS Safari4.1以上版本：OTF——OpeType，TTF——TrueType；&lt;br&gt;IE：EOT——Embedded Open Type；&lt;br&gt;IOS Safari4.1之前版本：SVG——Scalable Vector Graphics；&lt;br&gt;Font Squirrel 提供了很多现成的字体包，每个字体包中都包含所有必要格式的字体和为每款浏览器提供正确格式的 CSS 代码。另外，Font Squirrel还有一个转换程序，能够把你上传的字体转换成字体包。下面就是 Font Squirrel 为 Ubuntu Titling Bold 字体生成的@font-face 代码。对于其他来源的字体，这种格式也是适用的。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;font-face&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/*这就是将来在字体栈中引用的字体族的名字*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;UbuntuTitlingBold&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;UbuntuTitling-Bold-webfont.eot&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;UbuntuTitling-Bold-webfont.eot?#iefix&#39;&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;embedded-opentype&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;UbuntuTitling-Bold-webfont.woff&#39;&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;woff&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;UbuntuTitling-Bold-webfont.ttf&#39;&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;truetype&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;UbuntuTitling-Bold-webfont.svg#UbuntuTitlingBold&#39;&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;svg&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-weight&lt;/span&gt;: normal;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-style&lt;/span&gt;: normal;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Web字体的其他问题：&lt;/p&gt;
&lt;p&gt;Web字体可能导致机器中出现同名字体，以至混淆。为此，Web专家Paul Irish写过一个跨跨浏览器@font-face 的“笑脸版”，详细内容请参考 bulletproof-font-face-implementation-syntax ；&lt;br&gt;需要深入入了解@font-face规则的话，可以参考 How to use @font-face ；&lt;br&gt;除非浏览器统一支持一种字体格式，否则必须面对多种字体格式并存问题。如何使用@font-face规则处理多种字体格式，以及保证Internet Explorer取得必要的.eot格式的字体，可以参考 fixing-ie9-font-face-problems 。&lt;/p&gt;
&lt;h2 id=&quot;文本是什么&quot;&gt;&lt;a href=&quot;#文本是什么&quot; class=&quot;headerlink&quot; title=&quot;文本是什么&quot;&gt;&lt;/a&gt;文本是什么&lt;/h2&gt;&lt;p&gt;文本就是一组字或字符，比如章标题、段落正文等等，跟使用什么字体无关。CSS文本属性描述对文本的处理方式，比如：行高或者字符间距多大，有没有下划线和缩进。常用的CSS文本属性如下所示：&lt;/p&gt;
&lt;p&gt;text-indent&lt;br&gt;letter-spacing&lt;br&gt;word-spacing&lt;br&gt;text-decoration&lt;br&gt;text-align&lt;br&gt;line-height&lt;br&gt;text-transform&lt;br&gt;vertical-align&lt;/p&gt;
&lt;h3 id=&quot;文本缩进&quot;&gt;&lt;a href=&quot;#文本缩进&quot; class=&quot;headerlink&quot; title=&quot;文本缩进&quot;&gt;&lt;/a&gt;文本缩进&lt;/h3&gt;&lt;p&gt;text-indent属性设定行内盒子相对于包含元素的起点，具体用法参考 text-indent ，常见问题和注意点如下：&lt;/p&gt;
&lt;h3 id=&quot;行内盒子&quot;&gt;&lt;a href=&quot;#行内盒子&quot; class=&quot;headerlink&quot; title=&quot;行内盒子&quot;&gt;&lt;/a&gt;行内盒子&lt;/h3&gt;&lt;p&gt;CSS 会把元素中的文本放在一个不可见的盒子里，比如对 p 元素中的一段文本，CSS 将其视为很长的一行，只不过在遇到容器边界时会折行。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3px&lt;/span&gt; solid red;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;span&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid green;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;span&amp;gt;Here is &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; long paragraph…&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;总结：实际上缩进的是这个文本盒子的起点位置，后续的行是不会缩进的。如果需要缩进整个段落，可以使用margin或padding。&lt;/p&gt;
&lt;p&gt;text-indent适用于块容器，包含inline-block；&lt;/p&gt;
&lt;p&gt;text-indent是可继承的，且子元素获得的继承值并不是祖先元素设定的值，而是计算的值。示例代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.root&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid black;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-indent&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.root&lt;/span&gt; &amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; &amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;span&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: inline-block;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; class=&lt;span class=&quot;string&quot;&gt;&quot;root&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;span&amp;gt;行内儿子节点&amp;lt;/span&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;span&amp;gt;行内块级孙子节点&amp;lt;/span&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;总结：这里没有使用百分比，所以子元素的继承值都是30px。但需要注意示例中的前后两个span，后一个span的缩进较前一个span较大，这是由于后一个span是行内块元素，继承的缩进值起作用了。&lt;/p&gt;
&lt;p&gt;text-indent允许设定负值，注意配合padding或margin；  &lt;/p&gt;
&lt;h3 id=&quot;字符间距&quot;&gt;&lt;a href=&quot;#字符间距&quot; class=&quot;headerlink&quot; title=&quot;字符间距&quot;&gt;&lt;/a&gt;字符间距&lt;/h3&gt;&lt;p&gt;letter-spacing为正值时增大字符间距，为负值时缩小间距。无论设定字体大小时使用的是什么单位，设定字符间距一定要用相对单位，以便字间距能随字体大小同比例变化。具体用法请参考[letter-spacing]。( &lt;a href=&quot;http://css.doyoe.com/properties/text/letter-spacing.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://css.doyoe.com/properties/text/letter-spacing.htm&lt;/a&gt; )&lt;/p&gt;
&lt;h3 id=&quot;单词间距&quot;&gt;&lt;a href=&quot;#单词间距&quot; class=&quot;headerlink&quot; title=&quot;单词间距&quot;&gt;&lt;/a&gt;单词间距&lt;/h3&gt;&lt;p&gt;CSS把任何两边有空白的字符和字符串都视作“单词”，纯汉字文本一段之中没有空格，因此单词间距对中文网页几乎没有用，但对中英混排段落可能有用。单词间距属性具体用法请参考 word-spacing 。&lt;/p&gt;
&lt;h3 id=&quot;文本装饰&quot;&gt;&lt;a href=&quot;#文本装饰&quot; class=&quot;headerlink&quot; title=&quot;文本装饰&quot;&gt;&lt;/a&gt;文本装饰&lt;/h3&gt;&lt;p&gt;文本装饰有下划线、上划线、贯串线和闪烁等样式，具体用法可参考 text-decoration&lt;/p&gt;
&lt;h3 id=&quot;文本对齐&quot;&gt;&lt;a href=&quot;#文本对齐&quot; class=&quot;headerlink&quot; title=&quot;文本对齐&quot;&gt;&lt;/a&gt;文本对齐&lt;/h3&gt;&lt;p&gt;一般文本对齐方式有：左对齐/left、右对齐/right、居中对齐/center，以及两端对齐/justify，其中两端对齐是CSS3新增的属性。除此之外，CSS3还定义了一些额外的属性，但浏览器都不怎么支持，具体内容请参考 text-align 。&lt;/p&gt;
&lt;p&gt;在实际应用中，如果对元素设置了文本对齐属性，而对子元素是如何显示存在疑惑时，只要根据一下规则去计算即可：&lt;/p&gt;
&lt;p&gt;文本对齐属性只适用于块容器（包含行内块元素）；&lt;br&gt;文本对齐属性是可继承的&lt;br&gt;如果没有子元素，则文本内容直接根据父元素定义的对齐属性在父元素盒子里显示；&lt;br&gt;如果子元素是行内非块元素，将其当做文本内容处理（虽然该子元素会继承对齐属性，但是该属性不适用于行内非块元素）；&lt;br&gt;如果子元素是行内块元素，则该元素会按照父元素的文本对齐属性在父元素盒子里显示。此外，该元素会继承父元素的对齐属性，按照以上规则处理其子元素&lt;br&gt;如果子元素非行内块元素，则该元素会继承父元素的对齐属性，然后继续按照以上规则处理子元素；&lt;br&gt;行高&lt;/p&gt;
&lt;p&gt;CSS 中的行高平均分布在一行文本的上方和下方，具体用法参考 line-height 。常见问题和注意点如下：&lt;/p&gt;
&lt;p&gt;适用于所有元素，且可继承；&lt;br&gt;行高小于字体大小时，行与行之间会出现重叠；&lt;br&gt;实际应用时，要使用相对单位（百分比或乘积因子），避免使用绝对单位（如像素）——字体增大时，可能会出现行与行的重叠；&lt;br&gt;font快捷属性：以复合值的形式把 font-size 和 line-height 值写在一块，例如 div#intro {font:1.2em/1.4 helvetica, arial, sans-serif;} ；&lt;br&gt;文本行高为normal不代表就是1倍于字体大小&lt;br&gt;文本转换&lt;/p&gt;
&lt;p&gt;文本转换属性用于转换元素中文本的大小写，它可以设定英文文本首字母大写、全部字母大写和全部字母小写。具体用法可参考 text-transform 。&lt;/p&gt;
&lt;h3 id=&quot;垂直对齐&quot;&gt;&lt;a href=&quot;#垂直对齐&quot; class=&quot;headerlink&quot; title=&quot;垂直对齐&quot;&gt;&lt;/a&gt;垂直对齐&lt;/h3&gt;&lt;p&gt;垂直对齐属性 vertical-align 以基线为参照上下移动文本， 具体用法参考 vertical-align 。常见问题和注意点：&lt;br&gt;垂直对齐属性只适用于行内元素；&lt;br&gt;HTML标签 &lt;sup&gt; 和 &lt;sub&gt; 有默认的上标和下标样式，但效果不是很好；&lt;br&gt;应用场景：公式或化学分子式中的上标和下标，文本中脚注的角标；&lt;/sub&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id=&quot;其他属性&quot;&gt;&lt;a href=&quot;#其他属性&quot; class=&quot;headerlink&quot; title=&quot;其他属性&quot;&gt;&lt;/a&gt;其他属性&lt;/h3&gt;&lt;p&gt;white-space&lt;br&gt;tab-size&lt;br&gt;word-break&lt;br&gt;word-wrap&lt;br&gt;overflow-wrap&lt;br&gt;text-align-last&lt;br&gt;text-justify&lt;br&gt;text-size-adjust&lt;br&gt;最佳实战&lt;/p&gt;
&lt;p&gt;虽然学习了字体和文本属性，但不一定能够在实际应用中搭配好字体和文本样式。文字排版讲求匀称，一般是由看不见的网格，框定页面文字的走向和布局，匀称的版式可以增强页面的可读性。&lt;/p&gt;
&lt;p&gt;在线资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ilovetypography.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ilovetypography.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.thinkingwithtype.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.thinkingwithtype.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://webtypography.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://webtypography.net/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一、字体与文本&lt;/p&gt;
&lt;p&gt;字体与文本的区别：&lt;/p&gt;
&lt;p&gt;字体主要涉及文字的大小和外观（可应用于单个字符）。&lt;br&gt;文本主要涉及对字体的处理（只能应用于文本块）&lt;/p&gt;
&lt;p&gt;二、指定字体&lt;/p&gt;
&lt;p&gt;CSS中指定字体的最简单方式，就是使用五种通用的字体集合&lt;/p&gt;
&lt;p&gt;serif ：该字体在字符笔画末端有叫做衬线的小细节（Time New Roman、Georgia、Palatino）&lt;br&gt;sans-serif：末端无任何细节（Trebuchet MS、Arial、Verdana）&lt;br&gt;monospace：每个字母宽度相等（例如，i与m具有相同的宽度），通常用于排版代码块或模仿打印效果&lt;br&gt;cursive：手写笔记，但是比手写效果要整洁（Comic Sans MS、Brush Script）&lt;br&gt;fantasy：不能归入其他种类的字体&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*指定通用字体，浏览器会选择默认的Helvetica或者Arial*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*font-family是一个可继承的属性，值会传递给所有的后代*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;: sans-serif;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*以首先字母为开头，以通用字体结束 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;hoefler text&quot;&lt;/span&gt;,times,serif;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;三、设置字体大小&lt;/p&gt;
&lt;p&gt;设置字体大小，可以使用三种类型的值：&lt;/p&gt;
&lt;p&gt;绝对值：像素、英寸&lt;br&gt;相对值：百分比、em&lt;br&gt;运动衫尺码关键字：x-small、small、large、xx-large&lt;/p&gt;
&lt;p&gt;使用相对大小字体的优点：&lt;/p&gt;
&lt;p&gt;在文字大小中选择了更大或者更小之后，所有字体都能成比例地缩放&lt;br&gt;只需要改变body标签的字体大小，按比例改变文本的大小&lt;/p&gt;
&lt;p&gt;使用相对大小字体的缺点&lt;/p&gt;
&lt;p&gt;可能因字体大小的继承而导致极小字体的显示&lt;br&gt;用户很容易“破坏”没有考虑到文本缩放因素的CSS页面布局&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;: verdana,arial,sans-serif;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*为字体设置了可以调准的基准大小,1em一般为16像素高*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1em&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h3&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*h3的默认大小为1.2em(19.2px)，重新设置为0.8em*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0.8em&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*分别为ol和ul设置大小，而不是为li设置大小，方便后续自定义*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;ol&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: .&lt;span class=&quot;number&quot;&gt;75em&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;ul&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: .&lt;span class=&quot;number&quot;&gt;75em&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: .&lt;span class=&quot;number&quot;&gt;7em&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*规定ul的子元素a从父元素中继承属性值（如果没有使用inherit，a的值就会变成0.75*0.7em，导致过小*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: inherit;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;四、字体属性&lt;/p&gt;
&lt;p&gt;font-style    定义文本的直立或倾斜    italic、normal、oblique&lt;br&gt;font-weight    定义文本的粗细    100、200、…、900、lighter、normal、bold、bolder&lt;br&gt;font-variant    转换成小型大写字母    small-caps、normal&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*font-style有两个作用：使字体倾斜，或者使倾斜的字体直立*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;font-style&lt;/span&gt;: italic;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;span&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;font-style&lt;/span&gt;: normal;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*加粗超链接的内容*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;font-weight&lt;/span&gt;: bold;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*将h3标题转换为小型大写字母*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h3&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;font-variant&lt;/span&gt;: small-caps;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;五、字体属性的简写&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*始终要保证声明font-size 和 font-family的值*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*指定顺序：先指定font-weight、font-style、font-variant（任意顺序），然后依次指定font-size、font-family*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;font&lt;/span&gt;:bold italic small-caps .&lt;span class=&quot;number&quot;&gt;75em&lt;/span&gt; verdana, arial, sans-serif;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;六、CSS蛇形文本&lt;/p&gt;
&lt;p&gt;CSS会把一个盒子放到位于元素中的文本周围，只在开头和结尾是闭合的&lt;br&gt;text-indent 只能缩进首行&lt;br&gt;要想缩进整个段落，需要使用margin-left将整个容器往右侧推动&lt;/p&gt;
&lt;p&gt;七、文本属性&lt;/p&gt;
&lt;p&gt;text-indent&lt;br&gt;缩进元素中文本的首行&lt;br&gt;任何长度值&lt;/p&gt;
&lt;p&gt;vertical-align&lt;br&gt;相对于基准线将文本向上或者向下方移动&lt;br&gt;任何长度值、sup、sub、top、middle、bottom&lt;/p&gt;
&lt;p&gt;letter-spacing&lt;br&gt;设置字符间距&lt;br&gt;任何长度值&lt;/p&gt;
&lt;p&gt;word-spacing&lt;br&gt;设置字间距&lt;br&gt;任何长度值&lt;/p&gt;
&lt;p&gt;text-decoration&lt;br&gt;向文本添加修饰&lt;br&gt;none、underline、overline、line-through、blink&lt;/p&gt;
&lt;p&gt;text-align&lt;br&gt;使文本与包含元素对齐&lt;br&gt;left、right、center、justify&lt;/p&gt;
&lt;p&gt;line-height&lt;br&gt;设置行高（行与行基准线之间的距离）&lt;br&gt;任何数字值（不需要指定单位）&lt;/p&gt;
&lt;p&gt;text-transform&lt;br&gt;改变元素中文本的大小写形式&lt;br&gt;uppercase、lowercase、capitalize、none&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*缩进首行文本*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;text-indent&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3em&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*为段落指定一个大于负缩进值的正左外边距，产生悬挂段落的效果*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-indent&lt;/span&gt;: -&lt;span class=&quot;number&quot;&gt;1.5em&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2em&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*设置字符间距*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;letter-spacing&lt;/span&gt;: .&lt;span class=&quot;number&quot;&gt;2em&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*设置单词间距*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;word-spacing&lt;/span&gt;: .&lt;span class=&quot;number&quot;&gt;2em&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*去掉文本的下划线*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-decoration&lt;/span&gt;: none;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*需要在包含元素上设置text-align属性，使其子元素内容对齐*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;: right;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*设置行高*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;selector-id&quot;&gt;#intro&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*行高设置为字体的1.4倍*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*行高比文本高出的部分，会再文本的上方和下方平均分配*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;font&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1.2em&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;1.4&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*将每个单词的首字母变成大写*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-transform&lt;/span&gt;: capitalize;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;字体是“文字的不同体式”或者“字的形体结构”。对于英文而言，每种字体都是由一组具有独特样式的字母、数字和符号组成的。根据外观，字体可以分为不同的类别（font collection），包括衬线字体（serif）、无衬线字体（sans-serif）和等宽字体（monospace）。每一类字体可以分成不同的字体族（font family），比如 Times 和 Helvetica。而字体族中又可以包含不同的字型（font face），反映了相应字体族基本设计的不同变化，例如 Times Roman、 Times Bold、 Helvetica Condensed 和 Bodoni italic。CSS字体属性主要描述一类字体的大小和外观，比如：使用什么字体族（是 Times，还是 Helvitica），多大字号，粗体还是斜体。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://hangweiping.github.io/categories/CSS/"/>
    
    
      <category term="css" scheme="http://hangweiping.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="http://hangweiping.github.io/2014/12/29/markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://hangweiping.github.io/2014/12/29/markdown语法/</id>
    <published>2014-12-29T09:34:13.000Z</published>
    <updated>2016-06-10T00:49:06.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;标题能显示出文章的结构。行首插入1-6个 # ，每增加一个 # 表示更深入层次的内容，对应到标题的深度由 1-6 阶。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;文本样式&quot;&gt;&lt;a href=&quot;#文本样式&quot; class=&quot;headerlink&quot; title=&quot;文本样式&quot;&gt;&lt;/a&gt;文本样式&lt;/h2&gt;&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;链接 &lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;[Title](URL)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;加粗 &lt;span class=&quot;symbol&quot;&gt;:**Bold**&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;斜体字 &lt;span class=&quot;symbol&quot;&gt;:*Italics*&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;删除线 &lt;span class=&quot;symbol&quot;&gt;:~~text~~&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;高亮 &lt;span class=&quot;symbol&quot;&gt;:==text=&lt;/span&gt;=  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;段落 : 段落之间空一行  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;换行符 : 一行结束时输入两个空格  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;列表 &lt;span class=&quot;symbol&quot;&gt;:*&lt;/span&gt; 添加星号成为一个新的列表项。  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;引用 &lt;span class=&quot;symbol&quot;&gt;:&amp;gt;&lt;/span&gt; 引用内容  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;内嵌代码 : `alert(&lt;span class=&quot;string&quot;&gt;&#39;Hello World&#39;&lt;/span&gt;);`  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;画水平线 (HR) &lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;分割线用三个以上的星号 * 、减号-或下划线 &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; 表示&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;表格&quot;&gt;&lt;a href=&quot;#表格&quot; class=&quot;headerlink&quot; title=&quot;表格&quot;&gt;&lt;/a&gt;表格&lt;/h2&gt;&lt;p&gt;具体使用方式请看示例。  &lt;/p&gt;
&lt;p&gt;——: 为右对齐。&lt;br&gt;:—— 为左对齐。&lt;br&gt;:——: 为居中对齐。&lt;br&gt;——- 为使用默认居中对齐。  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:right&quot;&gt;序号&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;交易名&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;交易说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;prfcfg&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;菜单配置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;gentmo&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;编译所有交易&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;100000&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;sysdba&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;数据库表模型汇总&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h2&gt;&lt;p&gt;列表包括无序列表和有序列表两类。列表的每一项都使用 标记 + 分隔（至少一个空格或制表符） + 段落 的格式，段落的内容可以跨行，用空格缩进，还可以包含代码块、引用块等。如果在一个列表项里添加用空行隔开的多个段落，需要在每个段落开头添加至少两个空格。如果要表示多级列表，需要在下一级列表标记前加上至少两个空格或一个制表符，多级列表可以混用不同的标记。  &lt;/p&gt;
&lt;p&gt;无序列表使用星号 * 、加号 + 或是减号 - 作为列表标记，标记不能混用，否则会视为不同的列表。  &lt;/p&gt;
&lt;p&gt;有序列表则使用数字和一个英文句点表示，数字的内容是任意的，并不会影响 HTML 显示的数字。有时不需要列表，但在段落开头的文字是数字加句点的格式，为了不被 Markdown 解析成列表，需要在句点前加上反斜线，如： 2016. Something Begin.  &lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;+ 无序列表项&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+ 无序列表项&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; + 下一级列表&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt; 再下一级列表&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt; 再下一级列表&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- 不同标记视为不同列表&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- 列表还可以&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    # 包含代码块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- 或者引用&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; I have a dream!&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- 以及多行或多段。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第二行&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  第二段&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;\. Something Begin.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;无序列表项1&lt;/li&gt;
&lt;li&gt;无序列表项2&lt;ul&gt;
&lt;li&gt;下一级列表&lt;ol&gt;
&lt;li&gt;再下一级列表1&lt;/li&gt;
&lt;li&gt;再下一级列表2&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;不同标记视为不同列表&lt;/li&gt;
&lt;li&gt;列表还可以&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# 包含代码块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;或者引用&lt;blockquote&gt;
&lt;p&gt;I have a dream!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以及多行或多段。&lt;br&gt;第二行&lt;/p&gt;
&lt;p&gt;第二段&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2016. Something Begin.&lt;/p&gt;
&lt;h2 id=&quot;转义符号&quot;&gt;&lt;a href=&quot;#转义符号&quot; class=&quot;headerlink&quot; title=&quot;转义符号&quot;&gt;&lt;/a&gt;转义符号&lt;/h2&gt;&lt;p&gt;对于 Markdown 中的语法符号，前面加反斜线 \ 即可显示符号本身。包括&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;\\ 反斜线  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;\` 重音号  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;\* 星号  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;\&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; 下划线  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;\&amp;#123;\&amp;#125; \[\] \(\) 括号  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;\# 井号  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;\+ 加号  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;\- 减号  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;\. 句点  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;\! 惊叹号&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;```  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;## 任务列表  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;需要在 Markdown 列表项的段落部分用 [ ] 开头，也可以用 [x] 开头表示一个已选择的任务项。  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;```c&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- [x] 学习 Markdown&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- [ ] 使用 Markdown&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt; [ ] 写博客&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;[x] 学习 Markdown&lt;/li&gt;
&lt;li&gt;[ ] 使用 Markdown&lt;ol&gt;
&lt;li&gt;[ ] 写博客&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;emoji表情使用&quot;&gt;&lt;a href=&quot;#emoji表情使用&quot; class=&quot;headerlink&quot; title=&quot;emoji表情使用&quot;&gt;&lt;/a&gt;emoji表情使用&lt;/h2&gt;&lt;p&gt;:EMOJICODE: 的格式，详细的表情列表参见 EMOJI CHEAT SHEET 。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:man: :thumbsup: :sunny: :bug:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;:man: :thumbsup: :sunny: :bug:&lt;/p&gt;
&lt;h2 id=&quot;HTML-标签&quot;&gt;&lt;a href=&quot;#HTML-标签&quot; class=&quot;headerlink&quot; title=&quot;HTML 标签&quot;&gt;&lt;/a&gt;HTML 标签&lt;/h2&gt;&lt;p&gt;Markdown 中可以直接书写大部分HTML标签.其中在HTML的区块类型标签&lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;table&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;p&amp;gt;&lt;/code&gt;等内的，Markdown语法会失效，在HTML行内型标签&lt;span&gt;&lt;cite&gt;&lt;del&gt;等内，Markdown语法仍然有效。&lt;br&gt;需要注意的是，在 HTML 标签内，书写特殊字符 &amp;lt; 和 &amp;amp; 仍然需要用它们的替代形式 &amp;lt;和 &amp;amp;表示。在 Markdown 中，也能用 &amp;lt; 和 &amp;amp; 的这种特殊形式。&lt;/del&gt;&lt;/cite&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This is &lt;a href=&quot;http://cn.bing.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown&lt;/a&gt; regular paragraph.&lt;br&gt;1 &amp;lt; 3 &amp;amp; 5&lt;br&gt;2 &amp;lt; 4 &amp;amp; 6  &lt;/p&gt;
&lt;table border=&quot;1&quot; bgcolor=&quot;yellowgreen&quot;&gt;&lt;br&gt;    &lt;tr&gt;&lt;br&gt;        &lt;td&gt;&lt;strong&gt;count&lt;/strong&gt; 1 &amp;lt; 3 &amp;amp; 5&lt;/td&gt;&lt;br&gt;        &lt;td&gt;&lt;strong&gt;count&lt;/strong&gt; 2 &amp;lt; 4 &amp;amp; 6&lt;/td&gt;&lt;br&gt;    &lt;/tr&gt;&lt;br&gt;&lt;/table&gt;

&lt;h2 id=&quot;链接和图片&quot;&gt;&lt;a href=&quot;#链接和图片&quot; class=&quot;headerlink&quot; title=&quot;链接和图片&quot;&gt;&lt;/a&gt;链接和图片&lt;/h2&gt;&lt;p&gt;链接用于跳转到其他页面，包含行内式和参考式两种样式，还可以使用简单的自动链接。跳转地址可以用 / 开头的相对路径引用本机资源。  &lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;行内式：链接文字和跳转地址写在一起。如：  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;an example&lt;/span&gt;](&lt;span class=&quot;link&quot;&gt;http://www.cnblogs.com/zhuyuanhao/ &quot;链接title&quot;&lt;/span&gt;)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;an example&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;参考式：链接文字和跳转地址分开写，通过 [id] 标识联系起来。 [id] 标识可以包含字母、数字、空白和标点符号，但是并不区分大小写。跳转地址部分可以出现在文件的任意地方。  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;This is [&lt;span class=&quot;string&quot;&gt;an example&lt;/span&gt;][&lt;span class=&quot;symbol&quot;&gt;ID 2&lt;/span&gt;] reference-style link.  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;symbol&quot;&gt;id 2&lt;/span&gt;]: &lt;span class=&quot;link&quot;&gt;http://www.cnblogs.com/zhuyuanhao/ &quot;可选title, 可以用单引号&#39;、双引号&quot;或括号()包着，也可以另起一行并缩进&quot;  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;symbol&quot;&gt;iD 3&lt;/span&gt;]: &lt;span class=&quot;link&quot;&gt;&amp;lt;http://www.cnblogs.com/zhuyuanhao/&amp;gt;   &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    &#39;跳转地址也可以用尖括号包起来&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;隐式参考链接：使用空标识 [] ，在跳转地址处使用链接文字作为标识。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;Google&lt;/span&gt;][&lt;span class=&quot;symbol&quot;&gt;&lt;/span&gt;]  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;symbol&quot;&gt;Google&lt;/span&gt;]: &lt;span class=&quot;link&quot;&gt;http://google.com/ &quot;Google Inc.&quot;  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;自动链接：对于网址和电子邮件信箱，只要是用尖括号包起来，Markdown 就会自动把它转成链接，链接文字和跳转地址相同。  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;http:&lt;/span&gt;//&lt;span class=&quot;attr&quot;&gt;www.cnblogs.com&lt;/span&gt;/&lt;span class=&quot;attr&quot;&gt;zhuyuanhao&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;address@example.com&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http://www.cnblogs.com/zhuyuanhao/  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;address@example.com  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;图片用于在当前页面显示图片，也包含行内式和参考式，只需要在链接的样式前加一个惊叹号 ! ，就会被识别为图片。可以使用相对路径引用本地的图片，也能使用 url 引用其他网站的图片。不过到目前为止，Markdown 还没有办法指定图片的宽高。  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;行内式：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;![&lt;span class=&quot;string&quot;&gt;Alt text&lt;/span&gt;](&lt;span class=&quot;link&quot;&gt;/path/to/img.jpg &quot;Optional title&quot;&lt;/span&gt;)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;参考式：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;![&lt;span class=&quot;string&quot;&gt;Alt text&lt;/span&gt;][&lt;span class=&quot;symbol&quot;&gt;id&lt;/span&gt;]    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;symbol&quot;&gt;id&lt;/span&gt;]: &lt;span class=&quot;link&quot;&gt;url/to/image  &quot;Optional title attribute&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;行内式：链接文字和跳转地址写在一起。如：  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/zhuyuanhao/&quot; title=&quot;链接title&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;an example&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;an example&lt;br&gt;参考式：链接文字和跳转地址分开写，通过 &lt;a href=&quot;url/to/image&quot; title=&quot;Optional title attribute&quot;&gt;id&lt;/a&gt; 标识联系起来。 &lt;a href=&quot;url/to/image&quot; title=&quot;Optional title attribute&quot;&gt;id&lt;/a&gt; 标识可以包含字母、数字、空白和标点符号，但是并不区分大小写。跳转地址部分可以出现在文件的任意地方。  &lt;/p&gt;
&lt;p&gt;This is &lt;a href=&quot;http://www.cnblogs.com/zhuyuanhao/&quot; title=&quot;可选title, 可以用单引号&amp;#39;、双引号&amp;quot;或括号()包着，也可以另起一行并缩进&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;an example&lt;/a&gt; reference-style link.  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;apos;跳转地址也可以用尖括号包起来&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;隐式参考链接：使用空标识 [] ，在跳转地址处使用链接文字作为标识。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://google.com/&quot; title=&quot;Google Inc.&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;自动链接：对于网址和电子邮件信箱，只要是用尖括号包起来，Markdown 就会自动把它转成链接，链接文字和跳转地址相同。  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/zhuyuanhao/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/zhuyuanhao/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6c;&amp;#x74;&amp;#x6f;&amp;#58;&amp;#x61;&amp;#100;&amp;#100;&amp;#114;&amp;#101;&amp;#x73;&amp;#x73;&amp;#x40;&amp;#101;&amp;#x78;&amp;#x61;&amp;#109;&amp;#112;&amp;#x6c;&amp;#101;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#109;&quot;&gt;&amp;#x61;&amp;#100;&amp;#100;&amp;#114;&amp;#101;&amp;#x73;&amp;#x73;&amp;#x40;&amp;#101;&amp;#x78;&amp;#x61;&amp;#109;&amp;#112;&amp;#x6c;&amp;#101;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#109;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/zhuyuanhao/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/zhuyuanhao/&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;address@example.com&lt;br&gt;图片用于在当前页面显示图片，也包含行内式和参考式，只需要在链接的样式前加一个惊叹号 ! ，就会被识别为图片。可以使用相对路径引用本地的图片，也能使用 url 引用其他网站的图片。不过到目前为止，Markdown 还没有办法指定图片的宽高。  &lt;/p&gt;
&lt;p&gt;行内式：&lt;br&gt;&lt;img src=&quot;/path/to/img.jpg&quot; alt=&quot;Alt text&quot; title=&quot;Optional title&quot;&gt;&lt;br&gt;参考式：&lt;br&gt;&lt;img src=&quot;url/to/image&quot; alt=&quot;Alt text&quot; title=&quot;Optional title attribute&quot;&gt;    &lt;/p&gt;
&lt;h2 id=&quot;自动生成目录&quot;&gt;&lt;a href=&quot;#自动生成目录&quot; class=&quot;headerlink&quot; title=&quot;自动生成目录&quot;&gt;&lt;/a&gt;自动生成目录&lt;/h2&gt;&lt;p&gt;在需要目录出现的地方（一般在文章一开始）放置一个标记，这样会自动生成一个嵌套的包含所有标题的列表。默认的标记是[TOC]。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[TOC]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# 概述&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;## 定义&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;## 用处&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# 结论&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最前面的那个目录就是用 [TOC]生成的。&lt;/p&gt;
&lt;h2 id=&quot;脚注&quot;&gt;&lt;a href=&quot;#脚注&quot; class=&quot;headerlink&quot; title=&quot;脚注&quot;&gt;&lt;/a&gt;脚注&lt;/h2&gt;&lt;p&gt;脚注用于为正文中的某个条目添加补充注释，说明该条目的引文出处，跟参考文献一样，脚注一般位于文档的末尾，文章内以数字标注。在Markdown Extra也可以很容易的实现脚注。&lt;/p&gt;
&lt;p&gt;语法说明：&lt;/p&gt;
&lt;p&gt;在需要标记脚注文字的后面添加一个方括号，方括号中的内容必须以^开头，再接着是数字或字符串标记：&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;脚注[ ^1]有一个标签[^label]和该标签的定义[^!DEF].&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;接着，在文件的任意地方，你可以把这个脚注的内容定义出来：  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;symbol&quot;&gt; ^1&lt;/span&gt;]: &lt;span class=&quot;link&quot;&gt;这是一个脚注&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;symbol&quot;&gt;^label&lt;/span&gt;]: &lt;span class=&quot;link&quot;&gt;这是脚注的标签&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;symbol&quot;&gt;^!DEF&lt;/span&gt;]: &lt;span class=&quot;link&quot;&gt;这是脚注标签的定义&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;脚注&lt;a href=&quot;这是一个脚注&quot;&gt; ^1&lt;/a&gt;有一个标签&lt;a href=&quot;这是脚注的标签&quot;&gt;^label&lt;/a&gt;和该标签的定义&lt;a href=&quot;这是脚注标签的定义&quot;&gt;^!DEF&lt;/a&gt;.&lt;br&gt;接着，在文件的任意地方，你可以把这个脚注的内容定义出来：  &lt;/p&gt;
&lt;p&gt;脚注内容定义的形式：&lt;/p&gt;
&lt;p&gt;前面引用脚注的标签符号&lt;br&gt;接着一个冒号&lt;br&gt;再接着一个以上的空格或制表符&lt;br&gt;最后是脚注定义的内容。&lt;br&gt;脚注定义的内容可以包含多行、代码区块、区块引用和大多数其他markdown格式的内容。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;figure class=&quot;highlight prolog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是一个脚注[ ^footnote].&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[ ^footnote]: 脚注定义内容的第一行内容.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;定义内容的第二行.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; 一个包含多行的&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; 区块引用.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;转为HTML后为：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;这是一个脚注&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#fn:footnote&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;fnref:footnote&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;See footnote&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;footnote&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;footnotes&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;hr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;fn:footnote&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;脚注定义内容的第一行内容. &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;定义内容的第二行.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;blockquote&lt;/span&gt;&amp;gt;&lt;/span&gt; 一个包含多行的 &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;gt; 区块引用.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;blockquote&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#fnref:footnote&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Return to article&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;reversefootnote&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;↩&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认情况下，脚注内容位于生成的 HTML 文档末尾，上面的脚注内容在该文章的末尾可以看到。&lt;/p&gt;
&lt;h2 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;p&gt;图片链接  公式暂不涉及&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;标题能显示出文章的结构。行首插入1-6个 # ，每增加一个 # 表示更深入层次的内容，对应到标题的深度由 1-6 阶。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="markdown" scheme="http://hangweiping.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>jQuery中的Ajax</title>
    <link href="http://hangweiping.github.io/2014/12/27/jQuery%E4%B8%AD%E7%9A%84Ajax/"/>
    <id>http://hangweiping.github.io/2014/12/27/jQuery中的Ajax/</id>
    <published>2014-12-27T11:45:24.000Z</published>
    <updated>2016-06-10T00:33:08.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;原始ajax的五个步骤&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;准备发送请求 (调用 new XMLHttpRequest())   (readyState == 0)&lt;/li&gt;
&lt;li&gt;打开一个请求  (调用open方法)  (readyState == 1)&lt;/li&gt;
&lt;li&gt;发送请求 (调用send方法,并且接收到响应头)  (readyState == 2)&lt;/li&gt;
&lt;li&gt;开始接受到请求 (readyState == 3)&lt;/li&gt;
&lt;li&gt;接受完成 (readyState == 4)&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Ajax核心对象XMLHttpRequest&quot;&gt;&lt;a href=&quot;#Ajax核心对象XMLHttpRequest&quot; class=&quot;headerlink&quot; title=&quot;Ajax核心对象XMLHttpRequest&quot;&gt;&lt;/a&gt;Ajax核心对象XMLHttpRequest&lt;/h3&gt;&lt;p&gt;这个对象最早在IE中被实现，不过它最早的时候是通过ActiveXObject实现的，如果不需要管兼容的话，IE9或者其他浏览器使用 new XMLHttpRequest() 就能创建了一个 XHR (XMLHttpRequest) 对象,IE中由于存在三个版本的XHR对象，所以如果需要兼容，需要对这三个版本进行处理，从中选出IE浏览器中最新支持对象：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; XMLHttpRequest != &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; ActiveXObject != &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xhr = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; versions = [&lt;span class=&quot;string&quot;&gt;&quot;MSXML2.XMLHttp.6.0&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;MSXML2.XMLHttp.3.0&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;MSXML2.XMLHttp&quot;&lt;/span&gt;]();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i =&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,ilen = versions.length;i\&amp;lt;ilen;i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//避免不支持当前版本报错&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ActiveXObject[versions\[i]()];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//保存当前支持的版本&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  argument.callee.ActiveXString = versions[i]();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (e) &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//返回一个当前浏览器支持的版本的XHR对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ActiveXObject(argument.callee.ActiveXString);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)() ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面这段代码就做了第一阶段的事情，初始化一个请求&lt;/p&gt;
&lt;h3 id=&quot;打开一个请求-open&quot;&gt;&lt;a href=&quot;#打开一个请求-open&quot; class=&quot;headerlink&quot; title=&quot;打开一个请求 open&quot;&gt;&lt;/a&gt;打开一个请求 open&lt;/h3&gt;&lt;p&gt;xhr.open(); // xhr是通过new XMLHttpRequest()返回的对象 并没有发送请求，它只定义了请求的类型，url，以及是否异步，如： xhr.open(“get”,”index.html”, false ); 最常见的请求类型有post和get两种方法，url如果没有指定完整的（带协议前缀的如: &lt;a href=&quot;http://,https://&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://,https://&lt;/a&gt; ）url地址，那么它的地址相对当前执行代码的页面，Ajax最优秀的地方便是可以异步同步发送请求，第三个参数false代表同步，true代表异步。&lt;/p&gt;
&lt;h3 id=&quot;post跟get的区别&quot;&gt;&lt;a href=&quot;#post跟get的区别&quot; class=&quot;headerlink&quot; title=&quot;post跟get的区别&quot;&gt;&lt;/a&gt;post跟get的区别&lt;/h3&gt;&lt;p&gt;对于前端，对它能体现对大的区别就是传参不同，get的参数放在url地址后面以 ?abc=1&amp;amp;bcd=2&amp;amp;dd=3&amp;amp;s=4 的形式传递，而post的参数放在请求主体内，通过 xhr.send() 发送，  xhr.send(“任何想发送给服务器的字符串”);&lt;br&gt;url&lt;br&gt;url相对与执行当前代码的页面。&lt;br&gt;在页面&lt;a href=&quot;http://mydomin.com/test/obj/index.html中调用了xhr.send()表示请求在index.html页面发送，那么url响应的地址就是http://mydomin.com/test/obj/我的请求的url地址。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mydomin.com/test/obj/index.html中调用了xhr.send()表示请求在index.html页面发送，那么url响应的地址就是http://mydomin.com/test/obj/我的请求的url地址。&lt;/a&gt;&lt;br&gt;如果是一个完整的地址，那么必须是同域的情况下才允许发送请求，否在会引发安全报错，同域：同端口同协议的url地址&lt;br&gt;&lt;a href=&quot;http://baidu.com:80&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://baidu.com:80&lt;/a&gt;&lt;br&gt;协议:http&lt;br&gt;端口:80&lt;/p&gt;
&lt;h3 id=&quot;同步与异步的区别&quot;&gt;&lt;a href=&quot;#同步与异步的区别&quot; class=&quot;headerlink&quot; title=&quot;同步与异步的区别&quot;&gt;&lt;/a&gt;同步与异步的区别&lt;/h3&gt;&lt;p&gt;同步请求必须接收完(到达第四阶段)响应才会继续往下执行代码，&lt;br&gt;而异步请求会在发出一个请求继续执行不会阻碍流程，&lt;br&gt;不管是同步或在异步当接收完完响应之后会调用onreadystatechange方法，当xhr属性的readystate的值为4（第四阶段）的时候表示接受完成 xhr.onreadystatechange =function (e){} ，除了第零阶段，几乎每个阶段都对调用onreadystatechange方法，但取决于浏览器的实现。&lt;br&gt;发送一个请求 xhr.send()&lt;br&gt;xhr.send() 阶段才是真真的发起请求阶段，几乎可以用来发送任何数据，在这个阶段，&lt;br&gt;如果是异步请求，那么调用之后就会直接执行下面的代码，&lt;br&gt;如果是同步请求，那么需要等到readyState的值为4也就是接收完所有响应之后才会往下执行。&lt;/p&gt;
&lt;h3 id=&quot;接受响应&quot;&gt;&lt;a href=&quot;#接受响应&quot; class=&quot;headerlink&quot; title=&quot;接受响应&quot;&gt;&lt;/a&gt;接受响应&lt;/h3&gt;&lt;p&gt;xhr对象有四个关于响应的属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;responseText  (响应文本)&lt;/li&gt;
&lt;li&gt;responseXML     （如果响应头是text/xml或在application/xml那么响应数据会添加到这个属性）&lt;/li&gt;
&lt;li&gt;status (响应状态码,200,304,404,500等等)&lt;/li&gt;
&lt;li&gt;statusText (响应状态说明)&lt;br&gt;无论响应的是什么样的内容，都会把服务器返回的内容存在 xhr.responseText 中，所以有时候只需关注  xhr.responseText ，只有响应头的类型是text/xml或在application/xml的时候 xhr.responseXML 才会填充响应数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;status&quot;&gt;&lt;a href=&quot;#status&quot; class=&quot;headerlink&quot; title=&quot;status&quot;&gt;&lt;/a&gt;status&lt;/h3&gt;&lt;p&gt;statusText：表示对响应状态的说明，不过有时候并不能准确解释状态，如我直接访问一个发起一个跨域的请求的时候， statusText 为空，并且每个浏览器对状态的描述并不是所有的都一致。&lt;br&gt;虽然jQuery已经把所有的步骤都封装好，让技术员指需要关注成功与否，但很多时候了解其中的原理，处理问题会让人更加灵活并且得心应手。&lt;/p&gt;
&lt;h2 id=&quot;jQuery中的Ajax&quot;&gt;&lt;a href=&quot;#jQuery中的Ajax&quot; class=&quot;headerlink&quot; title=&quot;jQuery中的Ajax&quot;&gt;&lt;/a&gt;jQuery中的Ajax&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;jQuery 对 Ajax 做了大量的封装，我们使用起来也较为方便，不需要去考虑浏览器兼容性。对于封装的方式，jQuery采用了三层封装：最底层的封装方法为：$.ajax()，而通过这层封装了第二层有三种方法：.load()、$.get()和$.post()，最高层是$.getScript()和$.getJSON()方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Ajax中的load-方法&quot;&gt;&lt;a href=&quot;#Ajax中的load-方法&quot; class=&quot;headerlink&quot; title=&quot;Ajax中的load()方法&quot;&gt;&lt;/a&gt;Ajax中的load()方法&lt;/h3&gt;&lt;figure class=&quot;highlight puppet&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/**   Ajax中的load方法（局部方法，可以直接绑定在需要获取的元素上）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  @&lt;span class=&quot;keyword&quot;&gt;param&lt;/span&gt; &amp;#123;String&amp;#125;        &lt;span class=&quot;keyword&quot;&gt;url&lt;/span&gt;  必须，获取文件地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  @&lt;span class=&quot;keyword&quot;&gt;param&lt;/span&gt; &amp;#123;JSON &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; String&amp;#125;          可选，键值对方式的请求参数或者（使用键值对   形式，请求将转化成post）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  @&lt;span class=&quot;keyword&quot;&gt;param&lt;/span&gt; &amp;#123;Function&amp;#125;      可选，请求成功的回调函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  @&lt;span class=&quot;keyword&quot;&gt;config&lt;/span&gt;   &amp;#123;String&amp;#125;   &lt;span class=&quot;keyword&quot;&gt;responseText&lt;/span&gt;         获得字符串形式的响应数据&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  @&lt;span class=&quot;keyword&quot;&gt;config&lt;/span&gt;   &amp;#123;String&amp;#125;   &lt;span class=&quot;keyword&quot;&gt;textStatus&lt;/span&gt;            文本方式返回HTTP状态码&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  @&lt;span class=&quot;keyword&quot;&gt;config&lt;/span&gt;   &amp;#123;Object&amp;#125;   &lt;span class=&quot;keyword&quot;&gt;XMLHttpRequest&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;xhr&lt;/span&gt;对象，有多种属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.load(url, data, complete(responseText, textStatus, XMLHttpRequest));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;例如下面这段代码  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	$(&lt;span class=&quot;string&quot;&gt;&#39;button&#39;&lt;/span&gt;).click(function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	$(&lt;span class=&quot;string&quot;&gt;&#39;#box&#39;&lt;/span&gt;).load(&lt;span class=&quot;string&quot;&gt;&#39;test.php&#39;&lt;/span&gt;, &amp;#123;url : &lt;span class=&quot;string&quot;&gt;&#39;guowen&#39;&lt;/span&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在控制台可以看到请求为POST，（注意：这里第二个参数若是字符串的情况，例如”url=guowen”，请求仍然为GET。）&lt;br&gt;所以服务器端php文件应该如此设置：  &lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ($_POST[&lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt;]() == &lt;span class=&quot;string&quot;&gt;&quot;guowen&quot;&lt;/span&gt;) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//get请求把POST更改一下就好了&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;\&amp;lt;a href=&#39;http://guowenfh.github.io/&#39;\&amp;gt;三省吾身丶丶\&amp;lt;/a\&amp;gt;&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;其他网站&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于XHR对象上的属性，和HTTP状态码，参考我原来的博客。&lt;/p&gt;
&lt;h3 id=&quot;get-和-post&quot;&gt;&lt;a href=&quot;#get-和-post&quot; class=&quot;headerlink&quot; title=&quot;$.get()和$.post()&quot;&gt;&lt;/a&gt;$.get()和$.post()&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;.load()方法是局部方法，因为他需要一个包含元素的 jQuery 对象作为前缀。而$.get()和$.post()是全局方法，无须指定某个元素。对于用途而言，.load()适合做静态文件的异步获取，而对于需要传递参数到服务器页面的，$.get()和$.post()更加合适。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;$.get()方法有四个参数，前面三个参数和.load()一样，多了一个第四参数type，即服务器返回的内容格式：包括xml、html、script、json、jsonp和text。第一个参数为必选参数，后面三个为可选参数&lt;br&gt;GET方式请求会直接在html后以?Key=value跟随，所以，有三种形式请求数据，  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接跟在url后&lt;/li&gt;
&lt;li&gt;键值对形式的{url:”guowen”}&lt;/li&gt;
&lt;li&gt;字符串形式的”url=guowen”&lt;br&gt;POST请求方式除去不能直接跟在url后之外，剩余两个，使用方法一样&lt;br&gt;注意: 与.load()方法不同的是：.load()方法根据第二个参数的不同类型，请求方式会改变，但这里已经是两个独立的方法了，所以请求类型不会进行转换。&lt;br&gt;第四个参数一般都不进行设置，jQuery会自动转换其类型。强制设置时，有可能会连标签一起返回。&lt;br&gt;至于POST与GET方式请求的差别，在我原来的博客中也有写到，这里就不赘述了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;getScript-和-getJSON&quot;&gt;&lt;a href=&quot;#getScript-和-getJSON&quot; class=&quot;headerlink&quot; title=&quot;$.getScript()和$.getJSON()&quot;&gt;&lt;/a&gt;$.getScript()和$.getJSON()&lt;/h3&gt;&lt;p&gt;jQuery提供了一组用于特定异步加载的方法：$.getScript()，用于加载特定的JS文件；$.getJSON()，用于专门加载JSON文件。&lt;br&gt;$.getJSON()方法与之前的使用方法类似，就是把第四个参数，类型强制设置成了JSON。&lt;br&gt;有时我们希望能够特定的情况再加载JS文件，而不是一开始把所有JS文件都加载了，这时就可以使用$.getScript()方法。&lt;/p&gt;
&lt;p&gt;//点击按钮后再加载 JS 文件&lt;br&gt;$(‘input’).click(function () {&lt;br&gt;$.getScript(‘test.js’);&lt;br&gt;});&lt;/p&gt;
&lt;h3 id=&quot;ajax&quot;&gt;&lt;a href=&quot;#ajax&quot; class=&quot;headerlink&quot; title=&quot;$.ajax()&quot;&gt;&lt;/a&gt;$.ajax()&lt;/h3&gt;&lt;p&gt;$.ajax()是所有 ajax 方法中最底层的方法，所有其他方法都是基于$.ajax()方法的封装。这个方法只有一个参数，传递一个各个功能键值对的对象。&lt;br&gt;参数很多有兴趣的自己去看jQuery.ajax()，本来准备写几个常用的。强迫症犯了，去网上找资料做成了表格。。如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;button&#39;&lt;/span&gt;).click(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$.ajax(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;type : &lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//这里可以换成 GET&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;url : &lt;span class=&quot;string&quot;&gt;&#39;test.php&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;data : &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;url : &lt;span class=&quot;string&quot;&gt;&#39;guowen&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;success : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;response, stutas, xhr&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;#box&#39;&lt;/span&gt;).html(response);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：对于data属性，如果是GET、模式，可以使用三种之前说所的三种形式。如果是POST模式可以使用之前所说的两种形式。（这里不需要考虑之前的data类型的问题了，因为指定了请求类型，不会转化）&lt;/p&gt;
&lt;h3 id=&quot;表单序列化&quot;&gt;&lt;a href=&quot;#表单序列化&quot; class=&quot;headerlink&quot; title=&quot;表单序列化&quot;&gt;&lt;/a&gt;表单序列化&lt;/h3&gt;&lt;p&gt;使用表单序列化方法.serialize()，会智能的获取指定表单内的所有元素。这样，在面对大量表单元素时，会把表单元素内容序列化为字符串，然后再使用Ajax请求。&lt;br&gt;序列化表单内的元素：data : $(‘form’).serialize()，其余部分相同。&lt;br&gt;除此之外还可以直接获取单选框、复选框和下拉列表框等内容除了.serialize()方法，还有一个可以返回 JSON 数据的方法：.serializeArray()。这个方法可以直接把数据整合成键值对的 JSON 对象。&lt;br&gt;使用方法相同$(‘form’).serializeArray().有时，我们可能会在同一个程序中多次调用$.ajax()方法。而它们很多参数都相同，这个时候我们课时使用 jQuery 提供的$.ajaxSetup()请求默认值来初始化参数。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;form input[type=button]()&#39;&lt;/span&gt;).click(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$.ajaxSetup(&amp;#123;&lt;span class=&quot;comment&quot;&gt;//初始化多个ajax方法相同部分参数，后面再写ajax的时候，就不用在写了。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;type : &lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;url : &lt;span class=&quot;string&quot;&gt;&#39;test.php&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;data : $(&lt;span class=&quot;string&quot;&gt;&#39;form&#39;&lt;/span&gt;).serialize()&lt;span class=&quot;comment&quot;&gt;//表单序列化&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$.ajax(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;success : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;response, status, xhr&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(response);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在使用 data 属性传递的时候，如果是以对象形式传递键值对，可以使用$.param()方法将对象转换为字符串键值对格式。&lt;br&gt;主要是针对无法直接使用表单序列化方法.serialize()的情况，且传递参数为对象，建议使用该方法进行解析后再进行传递。&lt;/p&gt;
&lt;h3 id=&quot;Ajax进阶&quot;&gt;&lt;a href=&quot;#Ajax进阶&quot; class=&quot;headerlink&quot; title=&quot;Ajax进阶&quot;&gt;&lt;/a&gt;Ajax进阶&lt;/h3&gt;&lt;p&gt;加载请求，及错误处理。&lt;br&gt;主要是处理网速较慢的情况，出现请求时间较长的问题。而此时若没有一点提示，用户可能会认为你的网页出现了问题。若是能在请求过程中给用户一些提示，比如：正在努力加载中…… 。 可能会对用户更加友好一些。&lt;br&gt;jQuery提供了两个全局事件，jQuery 提供了两个全局事件，.ajaxStart()和.ajaxStop()。&lt;br&gt;这两个全局事件，只要用户触发了 Ajax，请求开始时（未完成其他请求）激活.ajaxStart()，请求结束时（所有请求都结束了）激活.ajaxStop()。&lt;br&gt;值得注意的是，因为是全局事件，所以这两个方法是直接需要直接绑定到document上的。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;).ajaxStart(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;.loading&quot;&lt;/span&gt;).show();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;).ajaxStop(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;.loading&quot;&lt;/span&gt;).hide();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然你也可以自行在ajax内部进行一些设置,如请求超时时间，该ajax函数是否触发全局事件等等。以键值对的方式写明就可以了。&lt;br&gt;错误处理也特别简单&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$.ajax(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//…………&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;timeout : &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;,&lt;span class=&quot;comment&quot;&gt;//如果请求时间太长，可以设置超时&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;global : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;comment&quot;&gt;//如果某个 ajax 不想触发全局事件，可以设置取消&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;error : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;xhr,errorText,errorType&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;//一般都直接用xhr对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&quot;发生错误：&quot;&lt;/span&gt;+xhr.status);&lt;span class=&quot;comment&quot;&gt;//返回错误状态码&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除此之外$.get()、$.post()和.load(),可以通过连缀处理使用局部.error()方法来处理错误，当然还有一个全局的方法：通过全局.ajaxError()事件方法来返回错误信息。即可&lt;/p&gt;
&lt;h3 id=&quot;请求全局事件&quot;&gt;&lt;a href=&quot;#请求全局事件&quot; class=&quot;headerlink&quot; title=&quot;请求全局事件&quot;&gt;&lt;/a&gt;请求全局事件&lt;/h3&gt;&lt;p&gt;jQuery 对于 Ajax 操作提供了很多全局事件方法，除去上面已经提到的.ajaxStart()、.ajaxStop()、.ajaxError()等事件方法。他们都属于请求时触发的全局事件，除了这些，还有一些其他全局事件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;.ajaxSuccess()，对应一个局部方法：.success()，请求成功完成时执行。&lt;/li&gt;
&lt;li&gt;.ajaxComplete()，对应一个局部方法：.complete()，请求完成后注册一个回调函数。&lt;/li&gt;
&lt;li&gt;.ajaxSend()，没有对应的局部方法，只有属性 beforeSend，请求发送之前要绑定的函数。&lt;br&gt;&lt;strong&gt;注意&lt;/strong&gt;：全局事件方法是所有 Ajax 请求都会触发到，并且只能绑定在 document 上。而局部方法，则针对某个 Ajax。&lt;br&gt;对于一些全局事件方法的参数，大部分为对象，而这些对象有哪些属性或方法能调用，可以通过遍历方法得到。如：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//遍历 settings 对象的属性&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;).ajaxSuccess(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;event, xhr, settings&lt;/span&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; settings) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这些全局方法，在$.ajax()方法中都可以直接以参数中的键值对的形式来完成&lt;/p&gt;
&lt;h3 id=&quot;JSON和JSONP&quot;&gt;&lt;a href=&quot;#JSON和JSONP&quot; class=&quot;headerlink&quot; title=&quot;JSON和JSONP&quot;&gt;&lt;/a&gt;JSON和JSONP&lt;/h3&gt;&lt;p&gt;其实在同一个域中时，只要url的后缀是json的文件的，默认就是json。当然你还可以使用$.ajax()方法设置 dataType属性加载 JSON 文件。&lt;br&gt;先来试试本地JSON:&lt;br&gt;php如下：  &lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$_arr= &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;=\&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;=\&amp;gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;=\&amp;gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$_result = json_encode($_arr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $_result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;?\&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;js:  &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$.ajax(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;type:&lt;span class=&quot;string&quot;&gt;&quot;post&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;url:&lt;span class=&quot;string&quot;&gt;&quot;test.php&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dataType:&lt;span class=&quot;string&quot;&gt;&quot;json&quot;&lt;/span&gt;,&lt;span class=&quot;comment&quot;&gt;//因为文件类型是php。但是返回的数据是json，所以必须设置类型，否则返回字符串&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;success:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;response,staus,xhr&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(response.a);&lt;span class=&quot;comment&quot;&gt;//打印出来1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现跨域：这部分需要服务器端配合。  &lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$_arr= &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;=\&amp;gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;=\&amp;gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;=\&amp;gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$_result = json_encode($_arr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$_callback = $_GET[&lt;span class=&quot;string&quot;&gt;&#39;callback&#39;&lt;/span&gt;]();&lt;span class=&quot;comment&quot;&gt;//关键在这。配合客户端JS使用&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $_callback.&lt;span class=&quot;string&quot;&gt;&quot;($_result)&quot;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//php用点号实现字符串拼接&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;?\&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;客户端实现：  &lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$.ajax(&amp;#123;//我本地地址为http://&lt;span class=&quot;number&quot;&gt;127.0.0.1:8020&lt;/span&gt;/ajax.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;type:&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;keyword&quot;&gt;GET&lt;/span&gt;&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;url:&lt;span class=&quot;string&quot;&gt;&quot;http://localhost/test.php?callback=?&quot;&lt;/span&gt;,//这样就可以实现跨域资源的访问了，最后的？号，jQuery会自动转化成字符串&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dataType:&lt;span class=&quot;string&quot;&gt;&quot;json&quot;&lt;/span&gt;,//若这里使用JSONP的话，可以删除上面url的“?callback=?”，jQuery会自动处理。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;success:function(response,staus,xhr)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(response.a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(response)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然我们还可以进行使用$.getJSON()。使用方式同上。&lt;/p&gt;
&lt;h3 id=&quot;jqXHR对象&quot;&gt;&lt;a href=&quot;#jqXHR对象&quot; class=&quot;headerlink&quot; title=&quot;jqXHR对象&quot;&gt;&lt;/a&gt;jqXHR对象&lt;/h3&gt;&lt;p&gt;在之前，我们使用了局部方法：.success()、.complete()和.error()。这三个局部方法并不是 XMLHttpRequest 对象调用的，而是$.ajax()之类的全局方法返回的对象调用的。这个对象，就是 jqXHR 对象，它是原生对象 XHR 的一个超集。&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//获取 jqXHR 对象，查看属性和方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; jqXHR = $.ajax(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;url : &lt;span class=&quot;string&quot;&gt;&#39;test.php&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;data : $(&lt;span class=&quot;string&quot;&gt;&#39;form&#39;&lt;/span&gt;).serialize()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; jqXHR) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(i + &lt;span class=&quot;string&quot;&gt;&#39;\&amp;lt;br /\&amp;gt;&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：如果使用 jqXHR 对象的话，那么建议用.done()、.always()和.fail()代&lt;br&gt;替.success()、.complete()和.error()。以为在未来版本中，很可能将这三种方法废弃取消。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//成功后回调函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;jqXHR.done(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;#box&#39;&lt;/span&gt;).html(response);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 jqXHR 的连缀方式比$.ajax()的属性方式有三大好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可连缀操作，可读性大大提高；&lt;/li&gt;
&lt;li&gt;可以多次执行同一个回调函数；&lt;/li&gt;
&lt;li&gt;为多个操作指定回调函数；&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原始ajax的五个步骤&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;准备发送请求 (调用 new XMLHttpRequest())   (readyState == 0)&lt;/li&gt;
&lt;li&gt;打开一个请求  (调用open方法)  (readyState == 1)&lt;/li&gt;
&lt;li&gt;发送请求 (调用send方法,并且接收到响应头)  (readyState == 2)&lt;/li&gt;
&lt;li&gt;开始接受到请求 (readyState == 3)&lt;/li&gt;
&lt;li&gt;接受完成 (readyState == 4)&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="JS" scheme="http://hangweiping.github.io/categories/JS/"/>
    
      <category term="jQuery" scheme="http://hangweiping.github.io/categories/JS/jQuery/"/>
    
    
      <category term="jQuery" scheme="http://hangweiping.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>css设计指南-定位</title>
    <link href="http://hangweiping.github.io/2014/12/26/css%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97-%E5%AE%9A%E4%BD%8D/"/>
    <id>http://hangweiping.github.io/2014/12/26/css设计指南-定位/</id>
    <published>2014-12-26T10:25:12.000Z</published>
    <updated>2016-06-09T08:29:07.000Z</updated>
    
    <content type="html">&lt;p&gt;其实 HTML 页面中每个元素其实都是一个「盒子」，默认情况下这些盒子的边框不可见，背景也是透明的，所以我们不能直接的看到页面中盒子的结构，但是我们可以借助一些 Web Developer 工具条可以方便地显示盒子的边框和背景，让我们能很直观的看到这些盒子的结构。  &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;理解盒模型&quot;&gt;&lt;a href=&quot;#理解盒模型&quot; class=&quot;headerlink&quot; title=&quot;理解盒模型&quot;&gt;&lt;/a&gt;理解盒模型&lt;/h2&gt;&lt;p&gt;每个盒子都有三组属性：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;外边距(margin)： 可以设置盒子与相邻盒子之间的距离。&lt;/li&gt;
&lt;li&gt;边框(border)： 可以设置边框的宽度、样式和颜色。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内边距(padding)：可以设置盒子内容区和边框之间的距离。&lt;br&gt;一个盒子有四条边，所以这些属性也各有四个属性，分别是上(top)、右(right)、下(bottom)和左(left)，尽管这三组属性共有 12 个属性值，但我们也可以对它们进行简写，这里以margin 为例：  &lt;/p&gt;
&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-top&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-right&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;-botton:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;缩写后的代码如下:&lt;br&gt;&lt;code&gt;margin:1px 1px 1px 1px;&lt;/code&gt;&lt;br&gt;缩写的顺序是&lt;strong&gt;上 -&gt; 右 -&gt; 下 -&gt; 左，顺时针的方向&lt;/strong&gt;。相对的边的值相同，则可以省掉，代码如下:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;// 四个方向的边距相同，等同于margin:1px 1px 1px 1px;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;// 上下边距都为1px，左右边距均为2px，等同于margin:1px 2px 1px 2px&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3px&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;// 右边距和左边距相同，等同于margin:1px 2px 3px 2px;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3px&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;// 注意，这里虽然上下边距都为1px，但是这里不能缩写。&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;盒子的边框-border&quot;&gt;&lt;a href=&quot;#盒子的边框-border&quot; class=&quot;headerlink&quot; title=&quot;盒子的边框(border)&quot;&gt;&lt;/a&gt;盒子的边框(border)&lt;/h3&gt;&lt;p&gt;边框(border)有四个相关属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;宽度(border-width)：可以使用 thin、 medium 和 thick 等文本值，也可以使用 除百分比和负值以外 的任何绝对值。&lt;/li&gt;
&lt;li&gt;样式(border-style)：有 none、 hidden、 dotted、 dashed、 solid、 double、 groove、 ridge、 inset 和 outset 等文本值。&lt;/li&gt;
&lt;li&gt;颜色(border-color)：可以使用任何颜色值，包括 rgb、 hsl、十六进制颜色值和颜色关键字。&lt;/li&gt;
&lt;li&gt;圆角(border-radius)：属于 CSS3 新增属性，可使用百分比、相对值和绝对值。&lt;br&gt;CSS 推荐标准并没有明确规定 border-width 的几个文本值的确切宽度，所以实际宽度会因浏览器而异。border-radius 不影响盒子的定位。&lt;h3 id=&quot;盒子的内边距-padding&quot;&gt;&lt;a href=&quot;#盒子的内边距-padding&quot; class=&quot;headerlink&quot; title=&quot;盒子的内边距(padding)&quot;&gt;&lt;/a&gt;盒子的内边距(padding)&lt;/h3&gt;内边距是盒子内容区与盒子边框之间的距离。在没有设置内边距的情况下，内容紧挨着边框：设置内边距后，内容区与边框有一定的距离(padding 的大小)：&lt;h3 id=&quot;盒子外边距-margin&quot;&gt;&lt;a href=&quot;#盒子外边距-margin&quot; class=&quot;headerlink&quot; title=&quot;盒子外边距(margin)&quot;&gt;&lt;/a&gt;盒子外边距(margin)&lt;/h3&gt;与内边距和边框相比，外边距就要显得复杂的多了，首先是外边距叠加， 垂直方向上的外边距会叠加 ，例如有三个段落应用了如下规则：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;number&quot;&gt;#000&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-bottom&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于第一段的下边距与第二段的上边距相邻，你可能会觉得它们两个盒子边框之间的外边距只和是 80px，但实际上是 50px，像这样上下外边距相遇时，它们会相互重叠，直到一个外边距碰到另一个盒子的边框。就上面例子而言，第二段较宽的上外边距会碰到第一段的边框，也就是说较宽的外边距决定两个盒子之间的距离。&lt;/p&gt;
&lt;h3 id=&quot;外边距的单位&quot;&gt;&lt;a href=&quot;#外边距的单位&quot; class=&quot;headerlink&quot; title=&quot;外边距的单位&quot;&gt;&lt;/a&gt;外边距的单位&lt;/h3&gt;&lt;p&gt;在设置段落文本外边距时应该注意，为了避免因增大字号导致段落间外边距不变引起的整体不协调的问题，在设置段落的上下外边距是应该使用 em 单位，这样当字体大小调整时，段落的上下外边距也会根据字体的大小来调整距离，这样页面的整体布局就会比较协调一致，而左右外边距则可以用 px 绝对单位，确保左右外边距不会因字体大小的调整而发生改变，比如可以这么设置：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1em&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: .&lt;span class=&quot;number&quot;&gt;75em&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样段落垂直距离就会始终保持字体高度的四分之三的高度，水平外边距不会因字体的调整而发生改变了。&lt;/p&gt;
&lt;h2 id=&quot;盒子有多大&quot;&gt;&lt;a href=&quot;#盒子有多大&quot; class=&quot;headerlink&quot; title=&quot;盒子有多大&quot;&gt;&lt;/a&gt;盒子有多大&lt;/h2&gt;&lt;p&gt;作者在本章介绍了块级元素和行内元素的不同行为。&lt;/p&gt;
&lt;h3 id=&quot;没有宽度的盒子&quot;&gt;&lt;a href=&quot;#没有宽度的盒子&quot; class=&quot;headerlink&quot; title=&quot;没有宽度的盒子&quot;&gt;&lt;/a&gt;没有宽度的盒子&lt;/h3&gt;&lt;p&gt;作者在这一节中专门提到了一个 「没有宽度」的概念：没有显式地设置元素的width 属性。如果不设置块级元素的 width 属性，那么这个属性的默认值就是auto ，结果就是会让元素的宽度扩展到与父元素同宽，对于块级元素和行内元素更具体的介绍请看笔者的上一篇文章 CSS 设计指南 学习笔记 一 。&lt;br&gt;&lt;strong&gt;盒模型结论一：&lt;/strong&gt;&lt;br&gt;没有设置宽度的元素始终会扩展到填满其父元素的宽度为止，添加水平外边距、水平边框和水平内边距都会导致内容宽度的减少，减少量等于水平外边距、水平边框和水平内边距的和。&lt;/p&gt;
&lt;h3 id=&quot;有宽度的盒子&quot;&gt;&lt;a href=&quot;#有宽度的盒子&quot; class=&quot;headerlink&quot; title=&quot;有宽度的盒子&quot;&gt;&lt;/a&gt;有宽度的盒子&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;盒模型结论二：&lt;/strong&gt;&lt;br&gt;为设定了宽度的盒子添加外边距、边框和内边距，会导致盒子扩展的更宽，实际上，盒子的 width 属性设定的只是盒子内容区的宽度，而不是盒子要占据的( margin-left + border-left + padding-left + width + padding-right + border-right + margin-right )水平宽度。&lt;br&gt;所以一定要记住的是，给设定了 width 的元素添加外边距、边框和内边距所展示的行为与默认的 auto 状态下的行为会有截然不同的表现。&lt;br&gt;拓展：&lt;br&gt;但是与布局相关的元素大部分都同时设置了 margin 、 border 、 padding 和width ，这就导致了在布局时的各种计算保证总宽度( margin-left + border-left + padding-left + width + padding-right + border-right + margin-right )保持不变，这样不仅麻烦，有的时候还比较容易出错，为了解决这一问题， CSS3 新增了一个 box-sizing 属性，通过它可以将设置了 width 的元素也设定成具有默认的 auto 状态下的行为。这样就省去了许多计算 width 的时间，同时也不会出错，而且它的浏览器支持情况也是一片大好（ 除了 IE 6 和 IE 7 不支持，其他个别老版本的浏览器需要添加浏览器私有前缀才支持 ）。&lt;br&gt;可以这样使用这个属性：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; *&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-webkit-box-sizing&lt;/span&gt;: border-box;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;attribute&quot;&gt;-moz-box-sizing&lt;/span&gt;: border-box;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;box-sizing&lt;/span&gt;: border-box;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;浮动与清除&quot;&gt;&lt;a href=&quot;#浮动与清除&quot; class=&quot;headerlink&quot; title=&quot;浮动与清除&quot;&gt;&lt;/a&gt;浮动与清除&lt;/h2&gt;&lt;p&gt;浮动和清除是页面布局的一大利剑，分别是 float 和 clear ，浮动可以让原来上下堆叠的块级元素变成左右并列，可以实现文字绕图片排列效果。浮动的元素会脱离常规的文档流，原来紧跟其后的元素会在空间允许的情况下向上提升到与浮动元素平起平坐。如果浮动元素后面有两个段落，而你只想让第一段与浮动元素并列（就算旁边还能放下第二段，也不想让它上来），就可以使用 clear 属性清除浮动。&lt;/p&gt;
&lt;h3 id=&quot;围住浮动元素的三种方法&quot;&gt;&lt;a href=&quot;#围住浮动元素的三种方法&quot; class=&quot;headerlink&quot; title=&quot;围住浮动元素的三种方法&quot;&gt;&lt;/a&gt;围住浮动元素的三种方法&lt;/h3&gt;&lt;p&gt;浮动元素脱离了文档流，所以我们看不到包含它的父元素了，这种情况有时候并不是我们想要的，所以作者在本章介绍了如何围住浮动元素的三种方法。&lt;br&gt;&lt;strong&gt;方法一：&lt;/strong&gt; 为父元素添加 overflow: hidden; 强制它包围浮动元素。&lt;br&gt;这种方法在某些情况下也不适用，比如通过浮动设置的水平排列的菜单，对其父元素设置 overflow: hidden; 后，尽管父元素围住了它，但是如果菜单有下拉选项的话，当鼠标移动到上面的时候下拉菜单并不会显示，因为设置了 overflow: hidden; ，所以超出父元素范围的内容都被隐藏掉了。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法二：&lt;/strong&gt; 同时浮动父元素&lt;/p&gt;
&lt;p&gt;父元素设置浮动后，不管其子元素是否是浮动，父元素都会紧紧地包围住它的子元素，因此需要用 width: 100%; 再让父元素的宽度与浏览器容器同宽。同样，尽管父元素围住了它，但是这样会导致页面中出现大量的浮动元素，而浮动元素有往往不好控制，并不利于页面的布局。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法三：&lt;/strong&gt; 添加非浮动的清除元素&lt;/p&gt;
&lt;p&gt;第三种强制父元素包含其浮动的子元素的方式就是给父元素的最后添加一个非浮动的子元素，然后清除该子元素，因此父元素一定会包含这个子元素以及前面的浮动元素：&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// CSS&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;: left;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.clearfix&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;clear&lt;/span&gt;:both;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;尽管这个方法能解决上面提到的两种方法中的问题，但它还不是最好的方法，因为它会在文档中添加无意义的标签，这违反了标签语义化的规则，对搜索引擎并不友好。所以如果你要清楚浮动但既不想浮动父元素又不想对父元素设置 overflow: hidden; 也不想增加无意义的标签的话，可以使用伪元素来清除浮动：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;::after&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: table;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;clear&lt;/span&gt;: both;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在父元素中添加 clearfix 类，因为搜索引擎并不会抓取伪元素，所以这种方法并没有增加无意义的标签，这里应该注意的是，CSS3 标准是用两个冒号来区别伪元素和伪类，而 CSS2.1 中不管是伪元素还是伪类都是用单个冒号表示，然而 IE8 并不支持双冒号的伪元素，所以问题就来了，如果你要遵循 CSS3 的标准使用双冒号的话就不兼容 IE8 了，如果使用但冒号的话又不符合 CSS3 标准规范，当然现在大多数还是使用但冒号的，选择哪种还是看个人的选择。&lt;/p&gt;
&lt;h2 id=&quot;定位&quot;&gt;&lt;a href=&quot;#定位&quot; class=&quot;headerlink&quot; title=&quot;定位&quot;&gt;&lt;/a&gt;定位&lt;/h2&gt;&lt;p&gt;CSS 布局的核心是 position 属性，对元素应用这个属性可以相对于它在常规文档流中的位置重新定位， position 属性有 4 个值： static 、 relative 、absolute 和 fixed 。&lt;/p&gt;
&lt;h3 id=&quot;静态定位-static&quot;&gt;&lt;a href=&quot;#静态定位-static&quot; class=&quot;headerlink&quot; title=&quot;静态定位(static)&quot;&gt;&lt;/a&gt;静态定位(static)&lt;/h3&gt;&lt;p&gt;静态定位下的块级元素会在默认文档流中上下堆叠，想要突破 static 定位提供的这种按顺序布局元素的方式，就必须对元素的 position 属性的值改为其他三个值。&lt;/p&gt;
&lt;h3 id=&quot;相对定位-relative&quot;&gt;&lt;a href=&quot;#相对定位-relative&quot; class=&quot;headerlink&quot; title=&quot;相对定位(relative)&quot;&gt;&lt;/a&gt;相对定位(relative)&lt;/h3&gt;&lt;p&gt;所谓的相对定位就是相对于元素原来的位置（static 状态下的位置）进行定位，也就是说在不设置 top 、 right 、 bottom 或 left 的话，和它在默认(static)情况下的表现是相同的，但是如果对它设置了 top 、 right 、 bottom 或 left 的话，就会相对与它默认的位置进行定位。相对定位的元素可以遮住静态(static)定位的元素。可以给 top 和 left 属性设定负值，把元素向上和向左移动。&lt;/p&gt;
&lt;h3 id=&quot;绝对定位-absolute&quot;&gt;&lt;a href=&quot;#绝对定位-absolute&quot; class=&quot;headerlink&quot; title=&quot;绝对定位(absolute)&quot;&gt;&lt;/a&gt;绝对定位(absolute)&lt;/h3&gt;&lt;p&gt;绝对定位跟静态定位和相对定位是绝对不一样的，静态定位和相对定位并不会脱离文档流，会占居原来的位置，而绝对定位会把元素彻底从文档流中拿出来，然后再相对于其他元素（这里的其他元素指的是定位上下文，默认是 body 元素）定位。&lt;br&gt;绝对定位的一个重要的概念就是 定位上下文 ，把元素的 position 属性设定为relative 、 absolute 或 fixed 后，继而可以使用 top 、 right 、bottom 和 left 属性，相对于「另一个元素」移动该元素的位置。这里的「另一个元素」就是该元素的定位上下文。&lt;br&gt;绝对定位的默认定位上下文是 body ，这是因为 body 是标记中所有元素的唯一的祖先元素，而实际上，绝对定位元素的任何祖先元素都可以成为该绝对定位元素的定位上下文，只要把相应的祖先元素的 position 属性的值设定为 relative 即可。&lt;/p&gt;
&lt;h3 id=&quot;固定定位&quot;&gt;&lt;a href=&quot;#固定定位&quot; class=&quot;headerlink&quot; title=&quot;固定定位&quot;&gt;&lt;/a&gt;固定定位&lt;/h3&gt;&lt;p&gt;从完全脱离文档流的角度说，固定定位与绝对定位类似。但不同之处在于，固定定位的定位上下文是视口（浏览器窗口），因此它不会随页面的滚动而移动。最常见的情况是用它来创建不随页面滚动而移动的导航元素。&lt;/p&gt;
&lt;h3 id=&quot;定位上下文&quot;&gt;&lt;a href=&quot;#定位上下文&quot; class=&quot;headerlink&quot; title=&quot;定位上下文&quot;&gt;&lt;/a&gt;定位上下文&lt;/h3&gt;&lt;p&gt;在讲绝对定位的时候，我们了解到绝对定位元素默认的定位上下文是body元素，因为body是标记中所有元素唯一的祖先元素。而实际上， 绝对定位元素的所有祖先元素都可以成为它的定位上下文，只要把相应祖先元素的position设定为relative即可 。&lt;br&gt;只有将元素的position属性设置为relative、absolute、fixed，这个元素的top、right、bottom和left属性才会起作用。&lt;br&gt;设置了内部div的position属性为absolute之后，内部div就会脱离原来的位置，默认相对于body重新定位。&lt;br&gt;设置了外部div的position属性为relative值之后，它就变成了内部div的定位上下文。 此时内部div的top、left属性参照的就是外部div了。如果你再用left和top属性重新定位外部div，内部div也会跟着移动相同的距离，以保住它与外部div之间的位置关系。&lt;br&gt;事实上，只要把元素的外边距和内边距设定好，多数情况下只用默认的静态定位就足以实现页面布局了。很多刚接触CSS的初学者(include myself)都会错误的设定position属性,最终发现从文档流中挪出来的元素很难控制。因此，除非真需要那么做，否则不要轻易修改元素默认的position属性。&lt;/p&gt;
&lt;h2 id=&quot;显示属性&quot;&gt;&lt;a href=&quot;#显示属性&quot; class=&quot;headerlink&quot; title=&quot;显示属性&quot;&gt;&lt;/a&gt;显示属性&lt;/h2&gt;&lt;p&gt;display 属性的值很多，但常用的除了前面提到的控制块级元素、行内元素和行内块级元素的 block 、 inline 和 inline-block 以外，还有一个比较常用的就是 none ，把元素的 display 属性的值设定为 none 后，该元素及所包含在其中的元素，都不会在页面中显示。他们原先战局的所有空间都会被「回收」，就好像相关元素根本不存在一样。&lt;br&gt;与此类似的属性还有 visibility ，这个属性常用的两个值是 visible (默认值) 和 hidden ，把元素的 visibility 属性的值设定成 hidden ，元素会被隐藏，但它还会占据页面中原来的空间位置。&lt;br&gt;笔者觉得有点类似定位中 absolute 和 relative 的感觉，就是 absolute 定位的元素的原来的位置会被「回收」（脱离文档流），就好像元素根本不存在一样（指的是原来占据的位置不存在一样）， relative 定位的元素还会占据页面中原来的空间位置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本章的内容不少，都是一些很重要的概念，比如盒模型、定位元素、浮动与清除浮动和元素背景属性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;margin、padding的属性值顺序均为 上右下左&lt;/li&gt;
&lt;li&gt;垂直方向上的margin外边距会叠加，取较大值。水平方向则不会，两者之间间距为两者之间margin外间距之和。&lt;/li&gt;
&lt;li&gt;围住浮动元素的三种方法： 一：为父元素添加overflow:hidden   二：同时浮动父元素   三：添加非浮动的清除元素(写一个class，里面包含clear属性)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;其实 HTML 页面中每个元素其实都是一个「盒子」，默认情况下这些盒子的边框不可见，背景也是透明的，所以我们不能直接的看到页面中盒子的结构，但是我们可以借助一些 Web Developer 工具条可以方便地显示盒子的边框和背景，让我们能很直观的看到这些盒子的结构。  &lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://hangweiping.github.io/categories/CSS/"/>
    
    
      <category term="css" scheme="http://hangweiping.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>从右向左阅读r的定义</title>
    <link href="http://hangweiping.github.io/2014/12/25/%E4%BB%8E%E5%8F%B3%E5%90%91%E5%B7%A6%E9%98%85%E8%AF%BBr%E7%9A%84%E5%AE%9A%E4%B9%89/"/>
    <id>http://hangweiping.github.io/2014/12/25/从右向左阅读r的定义/</id>
    <published>2014-12-25T05:15:51.000Z</published>
    <updated>2016-06-09T13:42:26.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;指向指针的引用-从右向左&quot;&gt;&lt;a href=&quot;#指向指针的引用-从右向左&quot; class=&quot;headerlink&quot; title=&quot;指向指针的引用(从右向左)&quot;&gt;&lt;/a&gt;指向指针的引用(从右向左)&lt;/h3&gt;&lt;p&gt;引用本身不是对象，所以不能定义指向引用的指针，但指针是对象，所以存在对指针的引用  &lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p;      &lt;span class=&quot;comment&quot;&gt;//p是int 指针&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *&amp;amp;r = p; &lt;span class=&quot;comment&quot;&gt;//r是一个对指针p的引用&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;r = &amp;amp;i;      &lt;span class=&quot;comment&quot;&gt;//r引用了一个指针，因此给r赋值&amp;amp;i就是令p指向i&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*r = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;      &lt;span class=&quot;comment&quot;&gt;//解引用r得到i,也就是p指向的对象，将i值改为0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt; 要理解一个变量类型到底是什么，最简单的就是从右向左阅读r的定义，离变量名进的符号对变量的类型有直接的影响。因此r是一个引用，声明符的其余部分用来确定r引用的类型是什么，*说明r引用的是一个指针。最后声明的基本数据类型指出r引用的是一个int指针.&lt;/p&gt;
&lt;h3 id=&quot;const指针-从右向左&quot;&gt;&lt;a href=&quot;#const指针-从右向左&quot; class=&quot;headerlink&quot; title=&quot;const指针(从右向左)&quot;&gt;&lt;/a&gt;const指针(从右向左)&lt;/h3&gt;&lt;p&gt; 所以的指针的类型都要和它所指的对象严格匹配，除了(1)允许令一个指向常量的指针指向一个非常量对象(2)暂时不需知道&lt;/p&gt;
 &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; pi = &lt;span class=&quot;number&quot;&gt;3.14&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; *ptr = &amp;amp;pi;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; *cptr = &amp;amp;pi;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*cptr = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;谓指向常量的指针仅仅要求不能通过该指针改变对象的值，而没有规定那个对象的值不能通过其他途径改变&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;指针是对象,const修饰符修饰一个变量，则此变量的值在初始化之后无法改变。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; errNumb = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; curErr = &amp;amp;errNumb;&lt;span class=&quot;comment&quot;&gt;//curErr将一直指向errNumb&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; pi = &lt;span class=&quot;number&quot;&gt;3.1415&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; pip = &amp;amp;pi;&lt;span class=&quot;comment&quot;&gt;//pip是一个指向常量对象的常量指针&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 指针本身是一个常量并不意味着不通过指针修改其所指对象的值，能否这样做完全取决于所指对象的类型.所&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;指向指针的引用-从右向左&quot;&gt;&lt;a href=&quot;#指向指针的引用-从右向左&quot; class=&quot;headerlink&quot; title=&quot;指向指针的引用(从右向左)&quot;&gt;&lt;/a&gt;指向指针的引用(从右向左)&lt;/h3&gt;&lt;p&gt;引用本身不是对象，所以不能定义指向引用的指针，但指针是对象，所以存在对指针的引用  &lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p;      &lt;span class=&quot;comment&quot;&gt;//p是int 指针&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *&amp;amp;r = p; &lt;span class=&quot;comment&quot;&gt;//r是一个对指针p的引用&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;r = &amp;amp;i;      &lt;span class=&quot;comment&quot;&gt;//r引用了一个指针，因此给r赋值&amp;amp;i就是令p指向i&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*r = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;      &lt;span class=&quot;comment&quot;&gt;//解引用r得到i,也就是p指向的对象，将i值改为0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="C++" scheme="http://hangweiping.github.io/categories/C/"/>
    
      <category term="指针" scheme="http://hangweiping.github.io/categories/C/%E6%8C%87%E9%92%88/"/>
    
    
      <category term="C++" scheme="http://hangweiping.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hangweiping.github.io/2014/12/24/hello-world/"/>
    <id>http://hangweiping.github.io/2014/12/24/hello-world/</id>
    <published>2014-12-24T08:45:32.000Z</published>
    <updated>2016-06-09T14:06:09.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo generate&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo deploy&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
