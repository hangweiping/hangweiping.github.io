<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>活着</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hangweiping.github.io/"/>
  <updated>2016-08-30T09:35:26.000Z</updated>
  <id>http://hangweiping.github.io/</id>
  
  <author>
    <name>hangweiping</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript设计模式</title>
    <link href="http://hangweiping.github.io/2016/07/23/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hangweiping.github.io/2016/07/23/JavaScript设计模式/</id>
    <published>2016-07-23T10:23:13.000Z</published>
    <updated>2016-08-30T09:35:26.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;1-弱类型语言&quot;&gt;&lt;a href=&quot;#1-弱类型语言&quot; class=&quot;headerlink&quot; title=&quot;1.弱类型语言&quot;&gt;&lt;/a&gt;1.弱类型语言&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在JavaScript中，定义变量时不必声明其类型。但这并不意味着变量没有类型。一个变量可以属于几种类型之一，这取决于其包含的数据。JavaScript中有&lt;strong&gt;三种原始类型&lt;/strong&gt;：布尔型、数值型和字符串类型(不区分整数和浮点数是JavaScript与大多数其他主流语言的一个不同之处)。此外，还有&lt;strong&gt;对象类型&lt;/strong&gt;和包含可执行代码的&lt;strong&gt;函数类型&lt;/strong&gt;，前者是一种复合数据类型(数组是一种特殊的对象，它包含着一批值的有序集合)。最后，还有&lt;strong&gt;空类型(null)&lt;/strong&gt;和&lt;strong&gt;未定义类型(undefined)&lt;/strong&gt;这两种数据类型。原始数据类型按值传送，而其他数据类型则按引用传送。&lt;/li&gt;
&lt;li&gt;与其他弱类型语言一样，JavaScript中的变量可以根据所赋的值改变类型。原始类型之间也可以进行类型转换。toString可以把数值或布尔值转为字符串。parseFloat和parseInt函数可以把字符串转变为数值。双重“非”可以把字符串或数值转变为布尔值：&lt;code&gt;var bool = !!num;&lt;/code&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;2-初谈闭包&quot;&gt;&lt;a href=&quot;#2-初谈闭包&quot; class=&quot;headerlink&quot; title=&quot;2.初谈闭包&quot;&gt;&lt;/a&gt;2.初谈闭包&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;匿名函数最有趣的用途是用来创建闭包。闭包是一个受到保护的变量空间，由内嵌函数生成。JavaScript具有函数级的作用域。这意味着定义在函数内部的变量在函数外部不能被访问。JavaScript的作用域又是词法性质的。这意味着函数运行在定义它的作用域中，而不是在调用它的作用域中。把这两个因素结合起来，就能通过把变量包裹在匿名函数中而对其加以保护。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;3-依赖于接口的设计模式&quot;&gt;&lt;a href=&quot;#3-依赖于接口的设计模式&quot; class=&quot;headerlink&quot; title=&quot;3.依赖于接口的设计模式&quot;&gt;&lt;/a&gt;3.依赖于接口的设计模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;下面列出的设计模式，尤其依赖接口：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工厂模式&lt;/strong&gt;。对象工厂所创建的具体对象会因具体情况而异。使用接口可以确保所创建出来的这些对象可以互换使用。也就是说，对象工厂可以保证其生产出来的对象都实现了必需的方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组合模式&lt;/strong&gt;。如果不用接口你就不可能用这个模式。组合模式的中心思想在于可以将对象群体与其组成对象同等对待。这是通过让它们实现同样的接口来做到的。如果不进行某种形式的鸭式辨型或类型检查，组合模式就会失去大部分作用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;装饰者模式&lt;/strong&gt;。装饰者通过透明地为另一对象提供包装而发挥作用。这是通过实现与另外那个对象完全相同的接口而做到的。对于外界而言，一个装饰者和它所包装的对象看不出有什么区别。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命令模式&lt;/strong&gt;。代码中所有的命令对象都要实现同一批方法。通过使用接口，你为执行这些命令对象而创建的类可以不必知道这些对象具体是什么，只要知道它们都实现了正确的接口即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;4-用命名规范区别私用成员&quot;&gt;&lt;a href=&quot;#4-用命名规范区别私用成员&quot; class=&quot;headerlink&quot; title=&quot;4.用命名规范区别私用成员&quot;&gt;&lt;/a&gt;4.用命名规范区别私用成员&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在一些方法和属性的名称前面加下划线以示其私用性。下划线的这种用法是一个众所周知的命名规范，它表明一个属性(或方法)仅供对象内部使用，直接访问它或设置它可能会导致意想不到的后果。这有助于防止程序员对它的无意使用，却不能防止对它的有意使用。后一个目标的实现需要有真正私用性的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;5-作用域&quot;&gt;&lt;a href=&quot;#5-作用域&quot; class=&quot;headerlink&quot; title=&quot;5.作用域&quot;&gt;&lt;/a&gt;5.作用域&lt;/h3&gt;&lt;p&gt;下面这个示例说明了JavaScript中作用域的特点：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        a *= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    bar();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个示例中，a定义在函数foo中，但函数bar可以访问它，因为bar也定义在foo中。bar在执行过程中将a设置为a乘以2。当bar在foo中被调用时它能够访问a，这可以理解。但是如果bar是在foo外部被调用呢？&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        a *= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bar;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; baz = foo();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(baz());&lt;span class=&quot;comment&quot;&gt;//20&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(baz());&lt;span class=&quot;comment&quot;&gt;//40&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(baz());&lt;span class=&quot;comment&quot;&gt;//80&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; blat = foo();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(blat());&lt;span class=&quot;comment&quot;&gt;//20&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上述代码中，所返回的对bar函数的引用被赋给变量baz。这个函数现在是在foo外部被调用，但它依然能够访问a。这是因为JavaScript的作用域是词法性的。&lt;strong&gt;函数是运行在定义它们的作用域中(本例中是foo内部的作用域)，而不是运行在调用它们的作用域中。&lt;/strong&gt;只要bar被定义在foo中，它就能访问在foo中定义的所有变量，即使foo的执行已经结束。&lt;br&gt;这就是闭包的一个例子。在foo返回后，它的作用域被保存下来，但只有它返回的那个函数能够访问这个作用域。在前面的示例中，baz和blat各有这个作用域及a的一个副本，而且只有它们自己能对其进行修改。返回一个内嵌函数是创建闭包最常用的手段。&lt;/p&gt;
&lt;h3 id=&quot;6-用闭包实现私用成员的弊端&quot;&gt;&lt;a href=&quot;#6-用闭包实现私用成员的弊端&quot; class=&quot;headerlink&quot; title=&quot;6.用闭包实现私用成员的弊端&quot;&gt;&lt;/a&gt;6.用闭包实现私用成员的弊端&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在门户打开型对象创建模式中，所有方法都创建在原型对象中，因此不管派生多少对象实例，这些方法在内存中只存在一份。而包含特权方法、私用成员的创建模式中，每生成一个新的对象示例都将为每一个私用方法和特权方法生成一个新的副本。这会比其他做法耗费更多内存，所以只宜用在需要真正的私用成员的场合。这种对象创建模式也不利于派生子类，因为所派生出的子类不能访问超类的任何私用属性或方法。相比之下，在大多数语言中，子类都能访问超类的所有私有属性和方法。故在JavaScript中用闭包实现私用成员导致的派生问题称为“继承破坏封装”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;7-静态方法和属性&quot;&gt;&lt;a href=&quot;#7-静态方法和属性&quot; class=&quot;headerlink&quot; title=&quot;7.静态方法和属性&quot;&gt;&lt;/a&gt;7.静态方法和属性&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;前面所讲的作用域和闭包的概念可用于创建静态成员，包括公用和私用的。大多数方法和属性所关联的是类的实例，而静态成员所关联的则是类本身。换句话说，静态成员是在累的层次上操作，而不是在实例的层次上操作。每个静态成员都只有一份。稍后将会看到，静态成员是直接通过类对象访问的。&lt;br&gt;下面是添加了静态属性和方法的Book类：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Book = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//私有静态变量&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; numOfBooks = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//私有静态方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;checkIsbn&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;isbn&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//返回一个构造器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;newIsbn, newTitle, newAuthor&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//私有属性&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isbn, title, author;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//特权方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getIsbn = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; isbn;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setIsbn = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;newIsbn&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!checkIsbn(newIsbn)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Book: Invalid ISBN.&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            isbn = newIsbn;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getTitle = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; title;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setTitle = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;newTitle&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            title = newTitle || &lt;span class=&quot;string&quot;&gt;&quot;No title specified&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getAuthor = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; author;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setAuthor = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;newAuthor&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            author = newAuthor || &lt;span class=&quot;string&quot;&gt;&quot;No author specified&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//Constructed code.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        numOfBooks++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (numOfBooks &amp;gt; &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setIsbn(newIsbn);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setTitle(newTitle);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setAuthor(newAuthor);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//公共静态方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Book.convertToTitleCase = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;inputString&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//公共非特权方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Book.prototype = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    display: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的私用成员和特权成员仍然被声明在构造器中(分别使用var和this关键字)。但哪个构造器却从原来的普通函数变成了一个内嵌函数，并且被作为包含它的函数的返回值赋给变量Book。这就创建了一个闭包，你可以把静态的私用成员声明在里面。位于外层函数声明之后的一对空括号很重要，其作用是一段代码载入就立即执行这个函数(而不是在调用Book构造函数时)。这个函数的返回值是另一个函数，它被赋给Book变量，Book因此成了一个构造函数。在实例化Book时，所调用的是这个内层函数。外层那个函数只是用于创建一个可以用来存放静态私用成员的闭包。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在本例中，checkIsbn被设计为静态方法 ，原因是为Book的每个实例都生成这个方法的一个新副本毫无道理。此外还有一个静态属性numOfBooks，其作用在于跟踪Book构造器的总调用次数。本例利用这个属性将Book实例的个数限制为不超过50个。&lt;/li&gt;
&lt;li&gt;这些私用的静态成员可以从构造器内部访问，这意味着所有私用函数和特权函数都能访问它们。与其他方法相比，它们有一个明显的优点，那就是内存中只会存放一份。因为其中那些静态方法被声明在构造器之外，所以它们不是特权方法，不能访问任何定义在构造器中的私用属性。定义在构造器中的私用方法能够调用那些私用静态方法，反之则不然。要判断一个私用方法是否应该被设计为静态方法，一条经验法则是看它是否需要访问任何实例数据。如果它不需要，那么将其设计为静态方法会更有效率(从内存占用的意义上来讲)，因为它只会被创建一份。&lt;/li&gt;
&lt;li&gt;创建公用的静态成员则容易得多，只需直接将其作为构造函数这个对象的属性创建即可，前述代码中的方法converToTitleCase就是一例。这实际上相当于把构造器作为命名空间来使用。&lt;/li&gt;
&lt;li&gt;所有公用静态方法如果作为独立的函数来声明其实也同样简单，但最好还是像这样把相关行为集中在一起。这些方法用于与类这个整体相关的任务，而不是与类的任一特定实例相关的任务。它们并不直接依赖于对象实例中包含的任何数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;8-私用变量模仿常量&quot;&gt;&lt;a href=&quot;#8-私用变量模仿常量&quot; class=&quot;headerlink&quot; title=&quot;8.私用变量模仿常量&quot;&gt;&lt;/a&gt;8.私用变量模仿常量&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;通过创建只有取值器而没有赋值器的私用变量可以模仿常量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Class = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; UPPER_BOUND = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//构造器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ctor = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(constructorArgument)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//静态特权方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ctor.getUPPER_BOUND = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; UPPER_BOUND;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ctor;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;9-封装之弊&quot;&gt;&lt;a href=&quot;#9-封装之弊&quot; class=&quot;headerlink&quot; title=&quot;9.封装之弊&quot;&gt;&lt;/a&gt;9.封装之弊&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;私用方法很难进行单元测试。因为它们及其内部变量都是私用的，所以在对象外部无法访问到它们。这个问题没有什么很好的应对之策。你要么通过使用公用方法来提供访问途径(这样一来就葬送了使用私有方法所带来的大多数好处)，要么设法在对象内部定义并执行所有单元测试。最好的解决办法是只对公用方法进行单元测试。这应该能覆盖到所有私用方法，尽管对它们的测试只是间接的。这种问题不是JavaScript所独有的，只对公用方法进行单元测试是一种广为接收的处理方式。&lt;/li&gt;
&lt;li&gt;使用封装意味着不得不与复杂的作用域链打交道。&lt;/li&gt;
&lt;li&gt;封装可能会损害类的灵活性，致使其无法被用于某些你未曾想到过的目的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;10-单体模式&quot;&gt;&lt;a href=&quot;#10-单体模式&quot; class=&quot;headerlink&quot; title=&quot;10.单体模式&quot;&gt;&lt;/a&gt;10.单体模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;单体模式是JavaScript中最基本但又最有用的模式之一，它可能比其他任何模式都更常用。这种模式提供了一种将代码组织为一个逻辑单元的手段，这个逻辑单元中的代码可以通过单一的变量进行访问。通过确保单体对象只存在一份实例，你就可以确信自己的所有代码使用的都是同样的全局资源。&lt;br&gt;单体类在JavaScript中有许多用处。它们可以用来划分命名空间，以减少网页中全局变量的数目。更重要的是，借助于单体模式，你可以把代码组织得更为一致，从而使其更容易阅读和维护。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;11-单体的基本结构&quot;&gt;&lt;a href=&quot;#11-单体的基本结构&quot; class=&quot;headerlink&quot; title=&quot;11.单体的基本结构&quot;&gt;&lt;/a&gt;11.单体的基本结构&lt;/h3&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Singleton = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    attribute1: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    attribute2: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    method1: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    method2: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;这个单体对象可以被修改。你可以为其添加新成员，这一点与别的对象字面量没有什么不同。你也可以用delete运算符删除其现有成员。这实际上违背了面向对象设计的一条原则：类可以被扩展，但不应该被修改。&lt;/li&gt;
&lt;li&gt;按传统的定义，单体是一个只能被实例化一次并且可以通过一个众所周知的访问点访问的类。要是严格按照这个定义来说，前面的例子所示的并不是一个单体，因为它不是一个可实例化的类。我们打算把单体模式定义的更广义一些：单体是一个用来划分命名空间并将一批相关方法和属性组织在一起的对象，如果可以被实例化，那么它只能被实例化一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;12-划分命名空间&quot;&gt;&lt;a href=&quot;#12-划分命名空间&quot; class=&quot;headerlink&quot; title=&quot;12.划分命名空间&quot;&gt;&lt;/a&gt;12.划分命名空间&lt;/h3&gt;&lt;p&gt;为了避免无意中改写变量，最好的解决办法之一是用单体对象将代码组织在命名空间之中。下面是前面的例子用单体模式改良后的结果：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; MyNamespace = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    findProduct: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(id)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在findProduct函数是MyNamespace中的一个方法，它不会被全局命名空间中声明的任何新变量改写。要注意，该方法仍然可以从各个地方访问。不同之处在于现在其调用方式不是findProduct(id)，而是MyNamespace.findProduct(id)。还有一个好处就是，这可以让其他程序员大体知道这个方法的声明地点及其作用。用命名空间把类似的方法组织到一起，也有助于增强代码的文档性。&lt;/p&gt;
&lt;h3 id=&quot;13-模块模式&quot;&gt;&lt;a href=&quot;#13-模块模式&quot; class=&quot;headerlink&quot; title=&quot;13.模块模式&quot;&gt;&lt;/a&gt;13.模块模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;有一种单体模式被称为模块模式，因为它可以把一批相关方法和属性组织为模块并起到划分命名空间的作用。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; MyNamespace.Singleton = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;     &lt;span class=&quot;comment&quot;&gt;//私有成员&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; privateAttribute1 = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; privateAttribute2 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;privateMethod1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;privateMethod2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;         &lt;span class=&quot;comment&quot;&gt;//public members&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;         publicAttribute1: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;         publicAttribute2: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;         publicMethod1: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;         &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;         publicMethod2: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;         &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; &amp;#125;)();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;14-简单工厂模式&quot;&gt;&lt;a href=&quot;#14-简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;14.简单工厂模式&quot;&gt;&lt;/a&gt;14.简单工厂模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;最好用一个例子来说明简单工厂模式的概念。假设你想开几个自行车商店，每个店都有几种型号的自行车出售。这可以用一个类来表示：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*BicycleShop class.*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; BicycleShop = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;BicycleShop.prototype = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sellBicycle: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(model)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bicycle;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (model) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;The Speedster&quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                bicycle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SpeedSter();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;The Lowrider&quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                bicycle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Lowrider();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;The Comfort Cruiser&quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                bicycle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ComfortCruiser();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Interface.ensureImplements(bicycle, Bicycle);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        bicycle.assemble();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        bicycle.wash();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bicycle;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;sellBicycle方法根据所要求的自行车型号用switch语句创建一个自行车的实例。各种型号的自行车实例可以互换使用，因为它们都实现了Bicycle接口：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;comment&quot;&gt;/* The Bicycle interface. */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Bicycle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Interface(&lt;span class=&quot;string&quot;&gt;&#39;Bicycle&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;assemble&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;wash&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ride&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;repair&#39;&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;comment&quot;&gt;/* Speedster class. */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Speedster = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; Speedster.prototype = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;     assemble: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;     &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;     wash: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;     &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;     ride: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;     &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;     repair: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要出售某种型号的自行车，只要调用sellBicycle方法即可：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; californiaCruisers = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BicycleShop();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; yourNewBike = californiaCruisers.sellBicycle(&lt;span class=&quot;string&quot;&gt;&quot;The Speedster&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;在情况发生变化之前，这倒也挺管用。但要是你想在供货目录中加入一款新车型又会怎么样呢？你得为此修改BicycleShop的代码，哪怕这个类的实际功能实际上并没有发生改变——依旧是创建一个自行车的新实例，组装它，清洗它，然后把它交给顾客。更好的解决办法是把sellBicycle方法中“创建新实例”这部分工作转交给一个简单工厂对象：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* BicycleFactory namespace. */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; BicycleFactory = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    createBicycle:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(model)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bicycle;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (model) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;The Speedster&quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                bicycle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SpeedSter();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;The Lowrider&quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                bicycle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Lowrider();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;The Comfort Cruiser&quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                bicycle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ComfortCruiser();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Interface.ensureImplements(bicycle, Bicycle);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bicycle;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;BicycleFactory是一个单体，用来把createBicycle方法封装在一个命名空间中。这个方法返回一个实现了Bicycle接口的对象，然后你可以照常对其进行组装和清洗：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* BicycleShop class, improved. */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; BicycleShop = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;BicycleShop.prototype = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sellBicycle: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(model)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bicycle = BicycleFactory.createBicycle(model);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        bicycle.assemble();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        bicycle.wash();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bicycle;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个BicycleFactory对象可以供各种类用来创建新的自行车实例。有关可供车型的所有信息集中在一个地方管理 ，所以添加更多车型很容易：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* BicycleFactory namespace,with more models. */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; BicycleFactory = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    createBicycle: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(model)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bicycle;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (model) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;The Speedster&quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                bicycle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SpeedSter();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;The Lowrider&quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                bicycle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Lowrider();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;The Flatlander&quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                bicycle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Flatlander();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;The Comfort Cruiser&quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                bicycle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ComfortCruiser();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Interface.ensureImplements(bicycle, Bicycle);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bicycle;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;15-工厂模式&quot;&gt;&lt;a href=&quot;#15-工厂模式&quot; class=&quot;headerlink&quot; title=&quot;15.工厂模式&quot;&gt;&lt;/a&gt;15.工厂模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;真正的工厂模式与简单工厂模式的区别在于，它不是另外使用一个类或对象来创建自行车，而是使用一个子类。按照正式定义，工厂是一个将其成员对象的实例化推迟到子类中进行的类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;16-工厂模式的适用场合&quot;&gt;&lt;a href=&quot;#16-工厂模式的适用场合&quot; class=&quot;headerlink&quot; title=&quot;16.工厂模式的适用场合&quot;&gt;&lt;/a&gt;16.工厂模式的适用场合&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;动态实现：如果需要创建一些用不同方式实现同一接口的对象，那么可以使用一个工厂方法或简单工厂对象来简化选择实现的过程。&lt;/li&gt;
&lt;li&gt;节省设置开销：如果对象需要进行复杂并且彼此相关的设置，那么使用工厂模式可以减少每种对象所需的代码量。如果这种设置只需要为特定类型的所有实例执行一次即可，这种作用尤为突出。把这种设置代码放到类的构造函数中并不是一种高效的做法，这是因为即便设置工作已经完成，每次创建新实例的时候这些代码还是会执行，而且这样做会把设置代码分散到不同的类中。工厂方法非常适合于这种场合。它可以在实例化所有需要的对象之前先一次性地进行设置。无论有多少类会被实例化，这种办法都可以让设置代码集中在一个地方。&lt;/li&gt;
&lt;li&gt;用许多小型对象组成一个大对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;17-工厂模式之利&quot;&gt;&lt;a href=&quot;#17-工厂模式之利&quot; class=&quot;headerlink&quot; title=&quot;17.工厂模式之利&quot;&gt;&lt;/a&gt;17.工厂模式之利&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;工厂模式的主要好处在于消除对象间的耦合。通过使用工厂方法而不是new关键字及具体类，你可以把所有实例化的代码集中在一个位置。这可以大大简化更换所用的类或在运行期间动态选择所用的类的工作。在派生子类时它也提供了更强大的灵活性。&lt;/li&gt;
&lt;li&gt;所有这些好处都与面向对象设计的这两条原则有关：弱化对象间的耦合；防止代码的重复。在一个方法中进行类的实例化，可以消除重复性的代码。这是在用一个对接口的调用取代一个具体的实现。这些都有助于创建模块化的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;18-桥接模式&quot;&gt;&lt;a href=&quot;#18-桥接模式&quot; class=&quot;headerlink&quot; title=&quot;18.桥接模式&quot;&gt;&lt;/a&gt;18.桥接模式&lt;/h3&gt;&lt;p&gt;桥接模式最常见和实际的应用场合之一就是事件监听器回调函数。假设有一个名为getBeerById的API函数，它根据一个标识符返回有关某种啤酒的信息。你希望用户在点击的时候获取这种信息。那个被点击的元素很可能有啤酒的标识符信息，它可能是作为元素自身的ID保存，也可能是作为别的自定义属性保存。下面是一种做法：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;addEvent(element, &lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, getBeerById);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getBeerById&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    asyncRequest(&lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;beer.uri?id=&#39;&lt;/span&gt; + id, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;resp&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(resp.responseText);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个API只能工作在浏览器中，如果要对这个API函数做单元测试，或者在命令行中执行，可能会报错。一个优良的API设计，不应该把它与任何特定的实现搅在一起。&lt;/p&gt;
&lt;figure class=&quot;highlight haxe&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getBeerById&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(id, callback)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    asyncRequest(&lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;beer.uri?id=&#39;&lt;/span&gt; + id, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(resp)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;callback&lt;/span&gt;(resp.responseText);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们将针对接口而不是实现进行编程，用桥接模式把抽象隔离开来：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;addEvent(element, &lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, getBeerByIdBridge);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getBeerBIdBridge&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    getBeerById(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.id, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;beer&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(beer);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这下getBeerById并没有和事件对象捆绑在一起了。&lt;/p&gt;
&lt;h3 id=&quot;19-用桥接模式联结多个类&quot;&gt;&lt;a href=&quot;#19-用桥接模式联结多个类&quot; class=&quot;headerlink&quot; title=&quot;19.用桥接模式联结多个类&quot;&gt;&lt;/a&gt;19.用桥接模式联结多个类&lt;/h3&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Class1 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(a, b, c)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a = a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.b = b;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.c = c;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Class2 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(d)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.d = d;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; BridgeClass = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(a, b, c, d)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.one = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Class1(a, b, c);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.two = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Class2(d);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;20-适配器模式&quot;&gt;&lt;a href=&quot;#20-适配器模式&quot; class=&quot;headerlink&quot; title=&quot;20.适配器模式&quot;&gt;&lt;/a&gt;20.适配器模式&lt;/h3&gt;&lt;p&gt;适配器模式可以用来在现有接口和不兼容的类之间进行适配。使用这种模式的对象又叫包装器，因为它们是在用一个新的接口包装另一个对象。&lt;/p&gt;
&lt;h3 id=&quot;21-适配器的特点&quot;&gt;&lt;a href=&quot;#21-适配器的特点&quot; class=&quot;headerlink&quot; title=&quot;21.适配器的特点&quot;&gt;&lt;/a&gt;21.适配器的特点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;适配器可以被添加到现有代码中以协调两个不同的接口。如果现有代码的接口能很好地满足需要，那就可能没有必要使用适配器。&lt;/li&gt;
&lt;li&gt;从表面上看，适配器模式很像门面模式。它们都要对别的对象进行包装并改变其呈现的接口。二者的差别在于它们如何改变接口。门面元素展现的是一个简化的接口，它并不提供额外的选择，而且有时为了方便完成某些常见任务它还会做出一些假定。而适配器则要把一个接口转换为另一个接口，它并不会滤除某些能力，也不会简化接口。如果客户系统期待的API不可用，那就需要用到适配器。&lt;/li&gt;
&lt;li&gt;适配器可被实现为不兼容的方法调用之间的一个代码薄层。&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;li&gt;假如你有一个对象还有一个以三个字符串为参数的函数：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; clientObject = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    string1: &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    string2: &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    string3: &lt;span class=&quot;string&quot;&gt;&quot;baz&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;interfaceMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(str1, str2, str3)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了把clientObject作为参数传递给interfaceMethod，需要用到适配器。我们可以这样创建一个：&lt;/p&gt;
&lt;figure class=&quot;highlight delphi&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;clientToInterfaceAdapter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(o)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    interfaceMethod(o.string1, o.string2, o.string3);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//现在就可以把整个对象传给这个函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;clientToInterfaceAdapter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(clientObject)&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;clientToInterfaceAdapter函数的作用就在于对interfaceMethod函数进行包装，并把传递给它的参数转换给后者需要的形式。&lt;/p&gt;
&lt;h3 id=&quot;22-装饰者模式&quot;&gt;&lt;a href=&quot;#22-装饰者模式&quot; class=&quot;headerlink&quot; title=&quot;22.装饰者模式&quot;&gt;&lt;/a&gt;22.装饰者模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;装饰者模式可用来透明地把对象包装在具有同样接口的另一对象中。这样一来，你可以给一个方法添加一些行为，然后将方法调用传递给原始对象。相对于创建子类来说，使用装饰者对象是一种更灵活的选择。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;23-享元模式&quot;&gt;&lt;a href=&quot;#23-享元模式&quot; class=&quot;headerlink&quot; title=&quot;23.享元模式&quot;&gt;&lt;/a&gt;23.享元模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;享元模式最适合于解决因创建大量类似对象而累及的性能问题。这种模式在JavaScript中尤其有用，因为复杂的JavaScript代码可能很快就会用光浏览器的所有可用内存。通过把大量独立对象转化为少量共享对象，可以降低运行Web应用程序所需的资源数量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;享元模式用于减少应用程序所需对象的数量。这是通过将对象的内部状态划分为内在数据和外在数据两类而实现的。内在数据是指类的内部方法所需的信息，没有这种数据的话类不能正常运转。外在数据则是可以从类身上剥离并存储在其外部的信息。我们可以将内在状态相同的所有对象替换为同一个共享对象，这种方法可以把对象数量减少到不同内在状态的数量。&lt;/p&gt;
&lt;h3 id=&quot;24-实现享元模式的一般步骤&quot;&gt;&lt;a href=&quot;#24-实现享元模式的一般步骤&quot; class=&quot;headerlink&quot; title=&quot;24.实现享元模式的一般步骤&quot;&gt;&lt;/a&gt;24.实现享元模式的一般步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;将所有外在数据从目标剥离。&lt;/strong&gt;具体做法是尽可能多地删除该类的属性，所删除的应该是那种因实例而异的属性。构造函数的参数也要这样处理。这些参数应该被添加到该类的各个方法。这些外在数据现在不再保存在类的内部，而是由管理器提供给类的方法。经过这样的处理后，目标类应该依然具有与之前一样的功能。唯一的区别在于数据的来源发生了变化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建一个用来控制该类的实例化的工厂。&lt;/strong&gt;这个工厂应该掌握该类所有已创建出来的独一无二的实例。&lt;strong&gt;其具体做法之一是用一个对象字面量来保存每一个这类对象的引用，并以用来生成这些对象的参数的唯一性组合作为它们的索引。&lt;/strong&gt;这样一来，每次要求工厂提供一个对象时，它会先检查那个对象字面量，看看以前是否请求过这个对象。如果是，那么只要返回那个现有对象的引用就行。否则它会创建一个新对象并将其引用保存在那个对象字面量中，然后返回这个对象。&lt;strong&gt;另一种做法称为对象池&lt;/strong&gt;，这种技术用数组来保存所创建的对象的引用。它适合于注重可用对象的数量而不是那些单独配置的实例的场合。这种技术可用来将所实例化的对象的数目维持在最低值。工厂会处理根据内在数据创建对象的所有事宜。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建一个用来保存外在数据的管理器。&lt;/strong&gt;该管理器对象负责控制处理外在数据的种种事宜。在实施优化之前，要是需要一个目标类的实例，你会把所有数据传给构造函数以创建其新实例。而现在要是需要一个实例，你会调用管理器的某个方法，把所有数据都提供给它。这个方法会分辨内在数据和外在数据。它把内在数据提供给工厂对象以创建一个对象(或者，如果已经存在这样一个对象的话，则重用该对象)。外在数据则被保存在管理器内的一个数据结构中。管理器随后会根据需要将这些数据提供给共享对象的方法，其效果就如同该类有许多实例一样。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;25-观察者模式&quot;&gt;&lt;a href=&quot;#25-观察者模式&quot; class=&quot;headerlink&quot; title=&quot;25.观察者模式&quot;&gt;&lt;/a&gt;25.观察者模式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在事件驱动的环境中，比如浏览器这种持续寻求用户关注的环境中，观察者模式(又名发布者-订阅者模式)是一种管理人与其任务之间的关系(确切的说，是对象及其行为和状态之间的关系)的得力工具。&lt;/li&gt;
&lt;li&gt;观察者模式中存在两个角色：观察者和被观察者。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-弱类型语言&quot;&gt;&lt;a href=&quot;#1-弱类型语言&quot; class=&quot;headerlink&quot; title=&quot;1.弱类型语言&quot;&gt;&lt;/a&gt;1.弱类型语言&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在JavaScript中，定义变量时不必声明其类型。但这并不意味着变量没有类型。一个变量可以属于几种类型之一，这取决于其包含的数据。JavaScript中有&lt;strong&gt;三种原始类型&lt;/strong&gt;：布尔型、数值型和字符串类型(不区分整数和浮点数是JavaScript与大多数其他主流语言的一个不同之处)。此外，还有&lt;strong&gt;对象类型&lt;/strong&gt;和包含可执行代码的&lt;strong&gt;函数类型&lt;/strong&gt;，前者是一种复合数据类型(数组是一种特殊的对象，它包含着一批值的有序集合)。最后，还有&lt;strong&gt;空类型(null)&lt;/strong&gt;和&lt;strong&gt;未定义类型(undefined)&lt;/strong&gt;这两种数据类型。原始数据类型按值传送，而其他数据类型则按引用传送。&lt;/li&gt;
&lt;li&gt;与其他弱类型语言一样，JavaScript中的变量可以根据所赋的值改变类型。原始类型之间也可以进行类型转换。toString可以把数值或布尔值转为字符串。parseFloat和parseInt函数可以把字符串转变为数值。双重“非”可以把字符串或数值转变为布尔值：&lt;code&gt;var bool = !!num;&lt;/code&gt;
    
    </summary>
    
    
      <category term="JS" scheme="http://hangweiping.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>es6的十大特性</title>
    <link href="http://hangweiping.github.io/2016/07/16/es6%E7%9A%84%E5%8D%81%E5%A4%A7%E7%89%B9%E6%80%A7/"/>
    <id>http://hangweiping.github.io/2016/07/16/es6的十大特性/</id>
    <published>2016-07-16T09:24:56.000Z</published>
    <updated>2016-08-30T09:31:55.000Z</updated>
    
    <content type="html">&lt;p&gt;以下是ES6排名前十的最佳特性列表（排名不分先后）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Default Parameters（默认参数） in ES6&lt;/li&gt;
&lt;li&gt;Template Literals （模板文本）in ES6&lt;/li&gt;
&lt;li&gt;Multi-line Strings （多行字符串）in ES6&lt;/li&gt;
&lt;li&gt;Destructuring Assignment （解构赋值）in ES6&lt;/li&gt;
&lt;li&gt;Enhanced Object Literals （增强的对象文本）in ES6&lt;/li&gt;
&lt;li&gt;Arrow Functions （箭头函数）in ES6&lt;/li&gt;
&lt;li&gt;Promises in ES6&lt;/li&gt;
&lt;li&gt;Block-Scoped Constructs Let and Const（块作用域构造Let and Const）&lt;/li&gt;
&lt;li&gt;Classes（类） in ES6&lt;/li&gt;
&lt;li&gt;Modules（模块） in ES6&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
声明：这些列表仅是个人主观意见。它绝不是为了削弱ES6其它功能，这里只列出了10条比较常用的特性。&lt;br&gt;首先回顾一下JavaScript的历史，不清楚历史的人，很难理解JavaScript为什么会这样发展。下面就是一个简单的JavaScript发展时间轴：&lt;br&gt;1、1995：JavaScript诞生，它的初始名叫LiveScript。&lt;br&gt;2、1997：ECMAScript标准确立。&lt;br&gt;3、1999：ES3出现，与此同时IE5风靡一时。&lt;br&gt;4、2000–2005： XMLHttpRequest又名AJAX， 在Outlook Web Access (2000)、Oddpost (2002)，Gmail (2004)和Google Maps (2005)大受重用。&lt;br&gt;5、2009： ES5出现，（就是我们大多数人现在使用的）例如foreach，Object.keys，Object.create和JSON标准。&lt;br&gt;6、2015：ES6/ECMAScript2015出现。&lt;br&gt;历史回顾就先到此，现让我们进入正题。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;1-Default-Parameters（默认参数）-in-ES6&quot;&gt;&lt;a href=&quot;#1-Default-Parameters（默认参数）-in-ES6&quot; class=&quot;headerlink&quot; title=&quot;1.Default Parameters（默认参数） in ES6&quot;&gt;&lt;/a&gt;1.Default Parameters（默认参数） in ES6&lt;/h2&gt;&lt;p&gt;还记得我们以前不得不通过下面方式来定义默认参数：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; link = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;height, color, url&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; height = height || &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;color&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;color&lt;/span&gt; || &lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt; || &lt;span class=&quot;string&quot;&gt;&#39;http://azat.co&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一切工作都是正常的，直到参数值是0后，就有问题了，因为在JavaScript中，0表示fasly，它是默认被hard-coded的值，而不能变成参数本身的值。当然，如果你非要用0作为值，我们可以忽略这一缺陷并且使用逻辑OR就行了！但在ES6，我们可以直接把默认值放在函数申明里：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; link = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(height = 50, color = &lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;, url = &lt;span class=&quot;string&quot;&gt;&#39;http://azat.co&#39;&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;顺便说一句，这个语法类似于&lt;code&gt;Ruby&lt;/code&gt;！&lt;/p&gt;
&lt;h2 id=&quot;2-Template-Literals（模板对象）-in-ES6&quot;&gt;&lt;a href=&quot;#2-Template-Literals（模板对象）-in-ES6&quot; class=&quot;headerlink&quot; title=&quot;2.Template Literals（模板对象） in ES6&quot;&gt;&lt;/a&gt;2.Template Literals（模板对象） in ES6&lt;/h2&gt;&lt;p&gt;在其它语言中，使用模板和插入值是在字符串里面输出变量的一种方式。因此，在ES5，我们可以这样组合一个字符串：&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&#39;Your name is &#39;&lt;/span&gt; + first + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + &lt;span class=&quot;literal&quot;&gt;last&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;var&lt;/span&gt; url = &lt;span class=&quot;string&quot;&gt;&#39;http://localhost:3000/api/messages/&#39;&lt;/span&gt; + id;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;幸运的是，在ES6中，我们可以使用新的语法$ {NAME}，并把它放在反引号里：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;`Your name is &lt;span class=&quot;subst&quot;&gt;$&amp;#123;first&amp;#125;&lt;/span&gt; &lt;span class=&quot;subst&quot;&gt;$&amp;#123;last&amp;#125;&lt;/span&gt;. `&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;`http://localhost:3000/api/messages/&lt;span class=&quot;subst&quot;&gt;$&amp;#123;id&amp;#125;&lt;/span&gt;`&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-Multi-line-Strings-（多行字符串）in-ES6&quot;&gt;&lt;a href=&quot;#3-Multi-line-Strings-（多行字符串）in-ES6&quot; class=&quot;headerlink&quot; title=&quot;3.Multi-line Strings （多行字符串）in ES6&quot;&gt;&lt;/a&gt;3.Multi-line Strings （多行字符串）in ES6&lt;/h2&gt;&lt;p&gt;ES6的多行字符串是一个非常实用的功能。在ES5中，我们不得不使用以下方法来表示多行字符串：&lt;/p&gt;
&lt;figure class=&quot;highlight vbnet&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var roadPoem = &lt;span class=&quot;comment&quot;&gt;&#39;Then took the other, as just as fair,nt&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    + &lt;span class=&quot;comment&quot;&gt;&#39;And having perhaps the better claimnt&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    + &lt;span class=&quot;comment&quot;&gt;&#39;Because it was grassy and wanted wear,nt&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    + &lt;span class=&quot;comment&quot;&gt;&#39;Though as for that the passing therent&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    + &lt;span class=&quot;comment&quot;&gt;&#39;Had worn them really about the same,nt&#39;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var fourAgreements = &lt;span class=&quot;comment&quot;&gt;&#39;You have the right to be you.n&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    You can only be you &lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; you &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; your best.&lt;span class=&quot;comment&quot;&gt;&#39;;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而在ES6中，仅仅用反引号就可以解决了：&lt;/p&gt;
&lt;figure class=&quot;highlight oxygene&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; roadPoem = `&lt;span class=&quot;keyword&quot;&gt;Then&lt;/span&gt; took the other, &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; just &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; fair,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;And&lt;/span&gt; having perhaps the better claim&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Because it was grassy &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; wanted wear,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Though &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; that the passing there&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Had worn them really about the same,`;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fourAgreements = `You have the right &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; be you.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    You can only be you when you &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; your best.`;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;4-Destructuring-Assignment-（解构赋值）in-ES6&quot;&gt;&lt;a href=&quot;#4-Destructuring-Assignment-（解构赋值）in-ES6&quot; class=&quot;headerlink&quot; title=&quot;4.Destructuring Assignment （解构赋值）in ES6&quot;&gt;&lt;/a&gt;4.Destructuring Assignment （解构赋值）in ES6&lt;/h2&gt;&lt;p&gt;解构可能是一个比较难以掌握的概念。先从一个简单的赋值讲起，其中house 和 mouse是key，同时house 和mouse也是一个变量，在ES5中是这样：&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; = $(&#39;&lt;span class=&quot;title&quot;&gt;body&#39;&lt;/span&gt;).&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;(), // &lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; has properties house and mouse&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; house = &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;.house,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; mouse = &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;.mouse;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以及在node.js中用ES5是这样：&lt;/p&gt;
&lt;figure class=&quot;highlight ada&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var jsonMiddleware = require(&lt;span class=&quot;symbol&quot;&gt;&#39;body&lt;/span&gt;-parser&#39;).jsonMiddleware ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var &lt;span class=&quot;keyword&quot;&gt;body&lt;/span&gt; = req.&lt;span class=&quot;keyword&quot;&gt;body&lt;/span&gt;, // &lt;span class=&quot;keyword&quot;&gt;body&lt;/span&gt; has username &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; password&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   username = &lt;span class=&quot;keyword&quot;&gt;body&lt;/span&gt;.username,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   password = &lt;span class=&quot;keyword&quot;&gt;body&lt;/span&gt;.password;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在ES6，我们可以使用这些语句代替上面的ES5代码：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123; house, mouse&amp;#125; = $(&lt;span class=&quot;string&quot;&gt;&#39;body&#39;&lt;/span&gt;).data(); &lt;span class=&quot;comment&quot;&gt;// we&#39;ll get house and mouse variables&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123;jsonMiddleware&amp;#125; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;body-parser&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123;username, password&amp;#125; = req.body;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个同样也适用于数组，非常赞的用法：&lt;/p&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var [col&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, col&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]  = $&lt;span class=&quot;comment&quot;&gt;(&#39;.column&#39;)&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   [li&lt;span class=&quot;symbol&quot;&gt;ne1&lt;/span&gt;, li&lt;span class=&quot;symbol&quot;&gt;ne2&lt;/span&gt;, li&lt;span class=&quot;symbol&quot;&gt;ne3&lt;/span&gt;, , li&lt;span class=&quot;symbol&quot;&gt;ne5&lt;/span&gt;] = file.split&lt;span class=&quot;comment&quot;&gt;(&#39;n&#39;)&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可能需要一些时间来习惯解构赋值语法的使用，但是它确实能给我们带来许多意外的收获。&lt;/p&gt;
&lt;h2 id=&quot;5-Enhanced-Object-Literals-（增强的对象字面量）in-ES6&quot;&gt;&lt;a href=&quot;#5-Enhanced-Object-Literals-（增强的对象字面量）in-ES6&quot; class=&quot;headerlink&quot; title=&quot;5.Enhanced Object Literals （增强的对象字面量）in ES6&quot;&gt;&lt;/a&gt;5.Enhanced Object Literals （增强的对象字面量）in ES6&lt;/h2&gt;&lt;p&gt;使用对象文本可以做许多让人意想不到的事情！通过ES6，我们可以把ES5中的JSON变得更加接近于一个类。&lt;br&gt;下面是一个典型ES5对象文本，里面有一些方法和属性：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; serviceBase = &amp;#123;port: &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;, url: &lt;span class=&quot;string&quot;&gt;&#39;azat.co&#39;&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; getAccounts = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; accountServiceES5 = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; port: serviceBase.port,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; url: serviceBase.url,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; getAccounts: getAccounts,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; toString: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.valueOf());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; getUrl: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;http://&quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.url + &lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.port&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; valueOf_1_2_3: getAccounts()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们想让它更有意思，我们可以用Object.create从serviceBase继承原型的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; accountServiceES5ObjectCreate = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(serviceBase)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; accountServiceES5ObjectCreate = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  getAccounts: getAccounts,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  toString: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.valueOf());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  getUrl: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;http://&quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.url + &lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.port&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  valueOf_1_2_3: getAccounts()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们知道，accountServiceES5ObjectCreate 和accountServiceES5 并不是完全一致的，因为一个对象(accountServiceES5)在&lt;strong&gt;proto&lt;/strong&gt;对象中将有下面这些属性：&lt;/p&gt;
&lt;p&gt;new1&lt;/p&gt;
&lt;p&gt;为了方便举例，我们将考虑它们的相似处。所以在ES6的对象文本中，既可以直接分配getAccounts: getAccounts,也可以只需用一个getAccounts，此外，我们在这里通过&lt;strong&gt;proto&lt;/strong&gt;（并不是通过’proto’）设置属性，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; serviceBase = &amp;#123;port: &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;, url: &lt;span class=&quot;string&quot;&gt;&#39;azat.co&#39;&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;getAccounts = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; accountService = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; __proto__: serviceBase,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; getAccounts,&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，我们可以调用super防范，以及使用动态key值(valueOf_1_2_3):&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; toString() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; JSON.stringify((&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.valueOf()));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; getUrl() &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;http://&quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.url + &lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.port&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; [ &lt;span class=&quot;string&quot;&gt;&#39;valueOf_&#39;&lt;/span&gt; + getAccounts().join(&lt;span class=&quot;string&quot;&gt;&#39;_&#39;&lt;/span&gt;) ]: getAccounts()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(accountService)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;new2&lt;/p&gt;
&lt;p&gt;ES6对象文本是一个很大的进步对于旧版的对象文本来说。&lt;/p&gt;
&lt;h2 id=&quot;6-Arrow-Functions-in（箭头函数）-ES6&quot;&gt;&lt;a href=&quot;#6-Arrow-Functions-in（箭头函数）-ES6&quot; class=&quot;headerlink&quot; title=&quot;6.Arrow Functions in（箭头函数） ES6&quot;&gt;&lt;/a&gt;6.&lt;strong&gt;Arrow Functions in（箭头函数） ES6&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;这是我迫不及待想讲的一个特征，CoffeeScript 就是因为它丰富的箭头函数让很多开发者喜爱。在ES6中，也有了丰富的箭头函数。这些丰富的箭头是令人惊讶的因为它们将使许多操作变成现实，比如，&lt;br&gt;以前我们使用闭包，this总是预期之外地产生改变，而箭头函数的迷人之处在于，现在你的this可以按照你的预期使用了，身处箭头函数里面，this还是原来的this。&lt;br&gt;有了箭头函数在ES6中， 我们就不必用that = this或 self = this 或 _this = this 或.bind(this)。例如，下面的代码用ES5就不是很优雅：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _this = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;.btn&#39;&lt;/span&gt;).click(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _this.sendData();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在ES6中就不需要用 _this = this：&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;.btn&#39;&lt;/span&gt;).click(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(event)&lt;/span&gt; =&amp;gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.sendData();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不幸的是，ES6委员会决定，以前的function的传递方式也是一个很好的方案，所以它们仍然保留了以前的功能。&lt;br&gt;下面这是一个另外的例子，我们通过call传递文本给logUpperCase() 函数在ES5中：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; logUpperCase = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _this = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.string = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.string.toUpperCase();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(_this.string);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;logUpperCase.call(&amp;#123; string: &lt;span class=&quot;string&quot;&gt;&#39;ES6 rocks&#39;&lt;/span&gt; &amp;#125;)();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而在ES6，我们并不需要用_this浪费时间：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; logUpperCase = function() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;.toUpperCase();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; () =&amp;gt; console.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;logUpperCase.call(&amp;#123; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;ES6 rocks&#39;&lt;/span&gt; &amp;#125;)();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;请注意，只要你愿意，在ES6中=&amp;gt;可以混合和匹配老的函数一起使用。当在一行代码中用了箭头函数，它就变成了一个表达式。它将暗地里返回单个语句的结果。如果你超过了一行，将需要明确使用return。&lt;br&gt;这是用ES5代码创建一个消息数组：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ids = [&lt;span class=&quot;string&quot;&gt;&#39;5632953c4e345e145fdf2df8&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;563295464e345e145fdf2df9&#39;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; messages = ids.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;ID is &quot;&lt;/span&gt; + value; &lt;span class=&quot;comment&quot;&gt;// explicit return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用ES6是这样：&lt;/p&gt;
&lt;figure class=&quot;highlight fortran&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var ids = [&lt;span class=&quot;string&quot;&gt;&#39;5632953c4e345e145fdf2df8&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;563295464e345e145fdf2df9&#39;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var messages = ids.map(&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt; =&amp;gt; `ID is $&amp;#123;&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;&amp;#125;`); // &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;请注意，这里用了字符串模板。&lt;br&gt;在箭头函数中，对于单个参数，括号()是可选的，但当你超过一个参数的时候你就需要他们。&lt;br&gt;在ES5代码有明确的返回功能：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ids = [&lt;span class=&quot;string&quot;&gt;&#39;5632953c4e345e145fdf2df8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;563295464e345e145fdf2df9&#39;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; messages = ids.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(value, index, list)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;ID of &#39;&lt;/span&gt; + index + &lt;span class=&quot;string&quot;&gt;&#39; element is &#39;&lt;/span&gt; + value + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// explicit return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在ES6中有更加严谨的版本，参数需要被包含在括号里并且它是隐式的返回：&lt;/p&gt;
&lt;figure class=&quot;highlight fortran&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var ids = [&lt;span class=&quot;string&quot;&gt;&#39;5632953c4e345e145fdf2df8&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;563295464e345e145fdf2df9&#39;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var messages = ids.map((&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;index&lt;/span&gt;, list) =&amp;gt; `ID of $&amp;#123;&lt;span class=&quot;built_in&quot;&gt;index&lt;/span&gt;&amp;#125; element is $&amp;#123;&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;&amp;#125; `); // &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;7-Promises-in-ES6&quot;&gt;&lt;a href=&quot;#7-Promises-in-ES6&quot; class=&quot;headerlink&quot; title=&quot;7. Promises in ES6&quot;&gt;&lt;/a&gt;7. Promises in ES6&lt;/h2&gt;&lt;p&gt;Promises 是一个有争议的话题。因此有许多略微不同的promise 实现语法。Q，bluebird，deferred.js，vow, avow, jquery 一些可以列出名字的。也有人说我们不需要promises，仅仅使用异步，生成器，回调等就够了。但令人高兴的是，在ES6中有标准的Promise实现。&lt;br&gt;下面是一个简单的用setTimeout()实现的异步延迟加载函数:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Yay!&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在ES6中，我们可以用promise重写:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wait1000 =  &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  setTimeout(resolve, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Yay!&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者用ES6的箭头函数：&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var wait1000 =  &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Promise(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(resolve, reject)&lt;/span&gt;=&amp;gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  setTimeout(resolve, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;).&lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;=&amp;gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Yay!&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到目前为止，代码的行数从三行增加到五行，并没有任何明显的好处。确实，如果我们有更多的嵌套逻辑在setTimeout()回调函数中，我们将发现更多好处：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Yay!&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Wheeyee!&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在ES6中我们可以用promises重写：&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var wait1000 =  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Promise(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(resolve, reject)&lt;/span&gt;=&amp;gt;&lt;/span&gt; &amp;#123;setTimeout(resolve, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;wait1000()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .&lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;(function() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Yay!&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wait1000()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .&lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;(function() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Wheeyee!&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还是不确信Promises 比普通回调更好？其实我也不确信，我认为一旦你有回调的想法，那么就没有必要额外增加promises的复杂性。&lt;br&gt;虽然，ES6 有让人崇拜的Promises 。Promises 是一个有利有弊的回调但是确实是一个好的特性，更多详细的信息关于promise:&lt;a href=&quot;http://jamesknelson.com/grokking-es6-promises-the-four-functions-you-need-to-avoid-callback-hell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to ES6 Promises&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;8-Block-Scoped-Constructs-Let-and-Const（块作用域和构造let和const）&quot;&gt;&lt;a href=&quot;#8-Block-Scoped-Constructs-Let-and-Const（块作用域和构造let和const）&quot; class=&quot;headerlink&quot; title=&quot;8.Block-Scoped Constructs Let and Const（块作用域和构造let和const）**&quot;&gt;&lt;/a&gt;8.Block-Scoped Constructs Let and Const（块作用域和构造let和const）**&lt;/h2&gt;&lt;p&gt;在ES6代码中，你可能已经看到那熟悉的身影let。在ES6里let并不是一个花俏的特性，它是更复杂的。Let是一种新的变量申明方式，它允许你把变量作用域控制在块级里面。我们用大括号定义代码块，在ES5中，块级作用域起不了任何作用：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;calculateTotalAmount&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;vip&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; amount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (vip) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; amount = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;comment&quot;&gt;// more crazy blocks!&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; amount = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; amount = &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; amount;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(calculateTotalAmount(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果将返回1000，这真是一个bug。在ES6中，我们用let限制块级作用域。而var是限制函数作用域。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;calculateTotalAmount&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;vip&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; amount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// probably should also be let, but you can mix var and let&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (vip) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; amount = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// first amount is still 0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;comment&quot;&gt;// more crazy blocks!&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; amount = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// first amount is still 0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; amount = &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// first amount is still 0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; amount;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(calculateTotalAmount(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个结果将会是0，因为块作用域中有了let。如果（amount=1）.那么这个表达式将返回1。谈到const，就更加容易了；它就是一个不变量，也是块级作用域就像let一样。下面是一个演示，这里有一堆常量，它们互不影响，因为它们属于不同的块级作用域:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;calculateTotalAmount&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;vip&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; amount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (vip) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; amount = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;comment&quot;&gt;// more crazy blocks!&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; amount = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; amount = &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; amount;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(calculateTotalAmount(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从我个人看来，let 和const使这个语言变复杂了。没有它们的话，我们只需考虑一种方式，现在有许多种场景需要考虑。&lt;/p&gt;
&lt;h2 id=&quot;9-Classes-（类）in-ES6&quot;&gt;&lt;a href=&quot;#9-Classes-（类）in-ES6&quot; class=&quot;headerlink&quot; title=&quot;9. Classes （类）in ES6&quot;&gt;&lt;/a&gt;9. Classes （类）in ES6&lt;/h2&gt;&lt;p&gt;如果你喜欢面向对象编程（OOP），那么你将喜爱这个特性。以后写一个类和继承将变得跟在facebook上写一个评论那么容易。&lt;br&gt;类的创建和使用真是一件令人头疼的事情在过去的ES5中，因为没有一个关键字class （它被保留，但是什么也不能做）。在此之上，大量的继承模型像&lt;a href=&quot;http://javascript.info/tutorial/pseudo-classical-pattern&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pseudo classical&lt;/a&gt;,&lt;a href=&quot;http://www.crockford.com/javascript/inheritance.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;classical&lt;/a&gt;, &lt;a href=&quot;http://javascript.info/tutorial/factory-constructor-pattern&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;functional&lt;/a&gt; 更加增加了混乱，JavaScript 之间的宗教战争只会更加火上浇油。&lt;br&gt;用ES5写一个类，有很多种方法，这里就先不说了。现在就来看看如何用ES6写一个类吧。ES6没有用函数, 而是使用原型实现类。我们创建一个类baseModel ，并且在这个类里定义了一个constructor 和一个 getName()方法：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;baseModel&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(options, &lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// class constructor，node.js 5.6暂时不支持options = &amp;#123;&amp;#125;, data = []这样传参&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = &lt;span class=&quot;string&quot;&gt;&#39;Base&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.url = &lt;span class=&quot;string&quot;&gt;&#39;http://azat.co/api&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.options = options;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    getName() &amp;#123; &lt;span class=&quot;comment&quot;&gt;// class method&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        console.log(`Class name: $&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name&amp;#125;`);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意我们对options 和data使用了默认参数值。此外方法名也不需要加function关键字，而且冒号(：)也不需要了。另外一个大的区别就是你不需要分配属性this。现在设置一个属性的值，只需简单的在构造函数中分配。&lt;br&gt;AccountModel 从类baseModel 中继承而来:&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AccountModel&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;baseModel&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    constructor(options, data) &amp;#123;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了调用父级构造函数，可以毫不费力的唤起super()用参数传递：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(&amp;#123;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;, [&lt;span class=&quot;string&quot;&gt;&#39;32113123123&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;524214691&#39;&lt;/span&gt;]); &lt;span class=&quot;comment&quot;&gt;//call the parent method with super&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = &lt;span class=&quot;string&quot;&gt;&#39;Account Model&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.url +=&lt;span class=&quot;string&quot;&gt;&#39;/accounts/&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你想做些更好玩的，你可以把 accountData 设置成一个属性：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; accountsData() &amp;#123; &lt;span class=&quot;comment&quot;&gt;//calculated attribute getter&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ... make XHR&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么，你如何调用他们呢？它是非常容易的：&lt;/p&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; accounts = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; AccountModel(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;accounts.getName();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&#39;Data &lt;span class=&quot;built_in&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;%s&lt;/span&gt;&#39;, accounts.accountsData);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果令人惊讶，输出是：&lt;/p&gt;
&lt;figure class=&quot;highlight fortran&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;: Account Model&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Data&lt;/span&gt; is  &lt;span class=&quot;number&quot;&gt;32113123123&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;524214691&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;10-Modules-（模块）in-ES6&quot;&gt;&lt;a href=&quot;#10-Modules-（模块）in-ES6&quot; class=&quot;headerlink&quot; title=&quot;10. Modules （模块）in ES6&quot;&gt;&lt;/a&gt;10. Modules （模块）in ES6&lt;/h2&gt;&lt;p&gt;众所周知，在ES6以前JavaScript并不支持本地的模块。人们想出了AMD，RequireJS，CommonJS以及其它解决方法。现在ES6中可以用模块import 和export 操作了。&lt;br&gt;在ES5中，你可以在 &lt;script&gt;中直接写可以运行的代码（简称IIFE），或者一些库像AMD。然而在ES6中，你可以用export导入你的类。下面举个例子，在ES5中,module.js有port变量和getAccounts 方法:&lt;/p&gt;
&lt;figure class=&quot;highlight openscad&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;exports&lt;/span&gt; =&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  port: &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  getAccounts: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在ES5中，main.js需要依赖require(‘module’) 导入module.js：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; service = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;module.js&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(service.port); &lt;span class=&quot;comment&quot;&gt;// 3000&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但在ES6中，我们将用export and import。例如，这是我们用ES6 写的module.js文件库：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; port = &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getAccounts&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;url&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果用ES6来导入到文件main.js中，我们需用import {name} from ‘my-module’语法，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;port, getAccounts&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;module&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(port); &lt;span class=&quot;comment&quot;&gt;// 3000&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者我们可以在main.js中把整个模块导入, 并命名为 service：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; service &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;module&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(service.port); &lt;span class=&quot;comment&quot;&gt;// 3000&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从我个人角度来说，我觉得ES6模块是让人困惑的。但可以肯定的事，它们使语言更加灵活了。&lt;br&gt;并不是所有的浏览器都支持ES6模块，所以你需要使用一些像jspm去支持ES6模块。&lt;br&gt;更多的信息和例子关于ES6模块，请看 &lt;a href=&quot;http://exploringjs.com/es6/ch_modules.html&quot;&gt;this text&lt;/a&gt;。不管怎样，请写模块化的JavaScript。&lt;br&gt;如何使用ES6 (Babel)&lt;br&gt;ES6已经敲定，但并不是所有的浏览器都完全支持，详见：&lt;a href=&quot;http://kangax.github.io/compat-table/es6/&quot;&gt;http://kangax.github.io/compat-table/es6/&lt;/a&gt;。要使用ES6，需要一个编译器例如：babel。你可以把它作为一个独立的工具使用，也可以把它放在构建中。grunt，gulp和webpack中都有可以支持babel的插件。&lt;/p&gt;
&lt;p&gt;6941baebjw1f61bokq3xbj20yb0pdq6a&lt;/p&gt;
&lt;p&gt;这是一个gulp案列，安装gulp-babel插件：&lt;/p&gt;
&lt;figure class=&quot;highlight q&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install --&lt;span class=&quot;built_in&quot;&gt;save&lt;/span&gt;-&lt;span class=&quot;built_in&quot;&gt;dev&lt;/span&gt; gulp-babel&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在gulpfile.js中，定义一个任务build，放入src/app.js，并且编译它进入构建文件中。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  babel = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-babel&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;src/app.js&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(babel())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Node-js-and-ES6&quot;&gt;&lt;a href=&quot;#Node-js-and-ES6&quot; class=&quot;headerlink&quot; title=&quot;Node.js and ES6&quot;&gt;&lt;/a&gt;Node.js and ES6&lt;/h2&gt;&lt;p&gt;在nodejs中，你可以用构建工具或者独立的Babel模块 babel-core 来编译你的Node.js文件。安装如下：&lt;/p&gt;
&lt;figure class=&quot;highlight q&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install --&lt;span class=&quot;built_in&quot;&gt;save&lt;/span&gt;-&lt;span class=&quot;built_in&quot;&gt;dev&lt;/span&gt; babel-core&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在node.js中，你可以调用这个函数：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;babel-core&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;attribute&quot;&gt;transform&lt;/span&gt;(ES5Code, options);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;ES6总结&quot;&gt;&lt;a href=&quot;#ES6总结&quot; class=&quot;headerlink&quot; title=&quot;ES6总结&quot;&gt;&lt;/a&gt;ES6总结&lt;/h2&gt;&lt;p&gt;这里还有许多ES6的其它特性你可能会使用到，排名不分先后：&lt;br&gt;1、全新的Math, Number, String, Array 和 Object 方法&lt;br&gt;2、二进制和八进制数据类型&lt;br&gt;3、默认参数不定参数扩展运算符&lt;br&gt;4、Symbols符号&lt;br&gt;5、tail调用&lt;br&gt;6、Generators (生成器)&lt;br&gt;7、New data structures like Map and Set(新的数据构造对像MAP和set)&lt;/p&gt;
&lt;/script&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;以下是ES6排名前十的最佳特性列表（排名不分先后）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Default Parameters（默认参数） in ES6&lt;/li&gt;
&lt;li&gt;Template Literals （模板文本）in ES6&lt;/li&gt;
&lt;li&gt;Multi-line Strings （多行字符串）in ES6&lt;/li&gt;
&lt;li&gt;Destructuring Assignment （解构赋值）in ES6&lt;/li&gt;
&lt;li&gt;Enhanced Object Literals （增强的对象文本）in ES6&lt;/li&gt;
&lt;li&gt;Arrow Functions （箭头函数）in ES6&lt;/li&gt;
&lt;li&gt;Promises in ES6&lt;/li&gt;
&lt;li&gt;Block-Scoped Constructs Let and Const（块作用域构造Let and Const）&lt;/li&gt;
&lt;li&gt;Classes（类） in ES6&lt;/li&gt;
&lt;li&gt;Modules（模块） in ES6
    
    </summary>
    
    
      <category term="es6" scheme="http://hangweiping.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>webpack使用指南</title>
    <link href="http://hangweiping.github.io/2016/07/15/webpack%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://hangweiping.github.io/2016/07/15/webpack使用指南/</id>
    <published>2016-07-15T13:45:25.000Z</published>
    <updated>2016-08-27T04:00:46.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://img1.tuicool.com/bA367nA.png!web&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;webpack介绍&quot;&gt;&lt;a href=&quot;#webpack介绍&quot; class=&quot;headerlink&quot; title=&quot;webpack介绍&quot;&gt;&lt;/a&gt;webpack介绍&lt;/h1&gt;&lt;h2 id=&quot;关于&quot;&gt;&lt;a href=&quot;#关于&quot; class=&quot;headerlink&quot; title=&quot;关于&quot;&gt;&lt;/a&gt;关于&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1、什么是 webpack？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;webpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理,它能有Grunt或Gulp所有基本功能。webpack的官网是 &lt;a href=&quot;http://webpack.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://webpack.github.io/&lt;/a&gt; ，文档地址是&lt;a href=&quot;http://webpack.github.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; http://webpack.github.io/docs/&lt;/a&gt;，官网对webpack的定义是MODULE BUNDLER，他的目的就是把有依赖关系的各种文件打包成一系列的静态资源。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、webpack 的优势&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其优势主要可以归类为如下几个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;webpack 是以 commonJS 的形式来书写脚本滴，但对 AMD/CMD 的支持也很全面，方便旧项目进行代码迁移。&lt;/li&gt;
&lt;li&gt;支持很多模块加载器的调用，可以使模块加载器灵活定制，比如babel-loader加载器，该加载器能使我们使用ES6的语法来编写代码;less-loader加载器，可以将less编译成css文件；&lt;/li&gt;
&lt;li&gt;开发便捷，能替代部分 grunt/gulp 的工作，比如打包、压缩混淆、图片转base64等。&lt;/li&gt;
&lt;li&gt;可以通过配置打包成多个文件，有效的利用浏览器的缓存功能提升性能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;3、wepback它的目标是是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;webpack它能将依赖的模块转化成可以代表这些包的静态文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将依赖的模块分片化，并且按需加载&lt;/li&gt;
&lt;li&gt;解决大型项目初始化加载慢的问题&lt;/li&gt;
&lt;li&gt;每一个静态文件都可以看成一个模块&lt;/li&gt;
&lt;li&gt;可以整合第三方库&lt;/li&gt;
&lt;li&gt;能够在大型项目中运用&lt;/li&gt;
&lt;li&gt;可以自定义切割模块的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4、webpack较之其他类似工具有什么不同？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有同步和异步两种不同的加载方式&lt;/li&gt;
&lt;li&gt;Loader,加载器可以将其他资源整合到JS文件中，通过这种方式，可以讲所有的源文件形成一个模块&lt;/li&gt;
&lt;li&gt;优秀的语法分析能力，支持 CommonJs AMD 规范&lt;/li&gt;
&lt;li&gt;有丰富的开源插件库，可以根据自己的需求自定义webpack的配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;5、webpack为什么要将所有资源放在一个文件里面？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们知道，对于浏览器来说，加载的资源越少，响应的速度也就越快，所以有时候我们为了优化浏览器的性能，会尽可能的将资源合并到一个主文件app.js里面。但是这导致的很大的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当你的项目十分庞大的时候，不同的页面不能做到按需加载，而是将所有的资源一并加载，耗费时间长，性能降低。&lt;/li&gt;
&lt;li&gt;会导致依赖库之间关系的混乱，特别是大型项目时，会变得难以维护和跟踪。比如:哪些文件是需要A模块加载完后才能执行的？哪些页面会受到多个样式表同时影响的？ 等许多问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而webpack可以很好的解决以上缺点,因为它是一个十分聪明的模块打包系统，当你正确配置后，它会比你想象中的更强大，更优秀。&lt;/p&gt;
&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h2&gt;&lt;p&gt;一项技术、一个工具的出现，肯定是为了解决问题的。那么，webpack 是解决什么问题？答案是： &lt;strong&gt;文件依赖管理&lt;/strong&gt; 。我们在浏览器中的 js 中，不能直接引用其它 js, css 等文件（或说，模块）。而 webpack 就是用来解决这个问题的，让你的项目可以很好地分文件、分模块，而且它对外部文件的引入同时支持 cmd, amd 和 commondJs 这三种形式，够有诚意。&lt;/p&gt;
&lt;p&gt;或许你要说了，解决文件依赖，早在 require.js 和 sea.js 的时候，都已经解决了呀！那么，webpack 在这方面，有哪些新的突破：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持依赖各种拓展名的文件,Scss，less等CSS预处理器&lt;/li&gt;
&lt;li&gt;能够在不依赖 gulp 或 grunt 的情况下直接产出打包文件, Webpack的处理速度更快更直接，能打包更多不同类型的文件。&lt;/li&gt;
&lt;li&gt;支持实时编译，浏览器同步刷新&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用commonJs的形式书写脚本。也对AMD，CMD的写法支持。&lt;/li&gt;
&lt;li&gt;&lt;u&gt;所有的静态资源都可以是模块引用&lt;/u&gt;，而不仅仅是JavaScript文件了。&lt;/li&gt;
&lt;li&gt;便捷开发，能够替代部分的grunt/gulp的工作。&lt;/li&gt;
&lt;li&gt;扩展性强，插件机制完善。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把项目当作一个整体，通过一个给定的主文件(如：app.js)，webpack将从这个文件开始找到项目中的所有依赖文件，通过loaders处理它们，打包为一个浏览器可以识别的JavaScript文件。&lt;/p&gt;
&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;p&gt;webpack可以在终端中使用，其最基础的命令是&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;webpack &amp;#123;entry &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;/入口文件&amp;#125; &amp;#123;destination &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; bundled &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;/存放bundle.js的地方&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;webpack&lt;/code&gt; 执行一次编译&lt;/p&gt;
&lt;p&gt;&lt;code&gt;webpack -p&lt;/code&gt; 发布环境编译(压缩代码)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;webpck -w&lt;/code&gt; 进行开发过程持续的增量编译&lt;/p&gt;
&lt;p&gt;&lt;code&gt;webpack -d&lt;/code&gt; 生成map映射文件，告知那些模块被最终打包大哪里了&lt;/p&gt;
&lt;p&gt;&lt;code&gt;webpack --config xx.js&lt;/code&gt; 使用另外一份配置文件来打包&lt;/p&gt;
&lt;h3 id=&quot;完整的配置&quot;&gt;&lt;a href=&quot;#完整的配置&quot; class=&quot;headerlink&quot; title=&quot;完整的配置&quot;&gt;&lt;/a&gt;完整的配置&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;下面是一个比较完整的webpack.config.js的代码：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//详细的webpack.config.js结构分析：&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; webpack = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;webpack&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; HtmlWebpackPlugin = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;html-webpack-plugin&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; TransferWebpackPlugin = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;transfer-webpack-plugin&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    devtool: &lt;span class=&quot;string&quot;&gt;&#39;source-map&#39;&lt;/span&gt;,&lt;span class=&quot;comment&quot;&gt;//由于打包后的代码是合并以后的代码，不利于排错和定位，只需要在config中添加，这样出错以后就会采用source-map的形式直接显示你出错代码的位置。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//noParse:[/jquery/],//表示跳过jquery,不对其进行编译,这样可以提高打包的速度&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//页面入口文件配置&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    entry: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        page1: &lt;span class=&quot;string&quot;&gt;&quot;./src/index.js&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//page2: [&quot;./src/index.js&quot;, &quot;./src/main.js&quot;],支持数组形式，将加载数组中的所有模块，但以最后一个模块作为输出&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//入口文件输出配置&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        path: &lt;span class=&quot;string&quot;&gt;&quot;dist/js/page&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        filename: &lt;span class=&quot;string&quot;&gt;&quot;[name].bundle.js&quot;&lt;/span&gt;,&lt;span class=&quot;comment&quot;&gt;// page1.bundle.js 和 page2.bundle.js，并存放到 ./dist/js/page 文件夹下。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        publicPath: &lt;span class=&quot;string&quot;&gt;&quot;/dist/&quot;&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;//网站运行时的访问路径。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// module.loaders 是最关键的一块配置。它告知 webpack每一种文件都需要使用什么加载器来处理：&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        loaders: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.css$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&#39;style-loader!css-loader&#39;&lt;/span&gt; &amp;#125;,&lt;span class=&quot;comment&quot;&gt;//.css 文件使用 style-loader 和 css-loader 来处理.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//&amp;#123; test: /\.css$/, loader: &#39;style!css&#39; &amp;#125;,其他写法1、&quot;-loader&quot;其实是可以省略不写的，多个loader之间用“!”连接起来。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//&amp;#123; test: /\.css$/, loaders: [&quot;style&quot;, &quot;css&quot;] &amp;#125;，其他写法2、用loaders数组形式;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.scss$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&#39;style!css!sass?sourceMap&#39;&lt;/span&gt;&amp;#125;,&lt;span class=&quot;comment&quot;&gt;//.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理。在chrome中我们通过sourcemap可以直接调试less、sass源文件文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.less$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&#39;style!css!less?sourceMap&#39;&lt;/span&gt;&amp;#125;,&lt;span class=&quot;comment&quot;&gt;//.less 文件使用 style-loader、css-loader 和 less-loader 来编译处理&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.js$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&#39;babel!jsx&#39;&lt;/span&gt; &amp;#125;, &lt;span class=&quot;comment&quot;&gt;//.js 文件使用babel-loader来编译处理&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.jsx$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&quot;jsx-loader?harmony&quot;&lt;/span&gt; &amp;#125;,&lt;span class=&quot;comment&quot;&gt;//.jsx 文件使用 jsx-loader 来编译处理&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.(png|jpg|jpeg|gif)$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&#39;url-loader?limit=8192&#39;&lt;/span&gt;&amp;#125;, &lt;span class=&quot;comment&quot;&gt;//图片文件使用 url-loader 来处理，小于8kb的直接转为base64&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.jade$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&quot;jade-loader&quot;&lt;/span&gt; &amp;#125;,&lt;span class=&quot;comment&quot;&gt;//.jade 文件使用 jade-loader 来编译处理&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.coffee$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&#39;coffee-loader&#39;&lt;/span&gt; &amp;#125;&lt;span class=&quot;comment&quot;&gt;//.coffee 文件使用 coffee-loader 来编译处理&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//分内置插件和外置插件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  		&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.optimize.CommonsChunkPlugin(&lt;span class=&quot;string&quot;&gt;&#39;common.js&#39;&lt;/span&gt;),&lt;span class=&quot;comment&quot;&gt;//使用了一个 CommonsChunkPlugin 的插件，它用于提取多个入口文件的公共脚本部分，然后生成一个common.js来方便多页面之间进行复用。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.optimize.UglifyJsPlugin(&amp;#123;&lt;span class=&quot;comment&quot;&gt;//压缩文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        compressor: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          warnings: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;comment&quot;&gt;//supresses warnings, usually from module minification&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        except: [&lt;span class=&quot;string&quot;&gt;&#39;$super&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;$&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;exports&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;require&#39;&lt;/span&gt;]    &lt;span class=&quot;comment&quot;&gt;//排除关键字(可选)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.DefinePlugin(&amp;#123;&lt;span class=&quot;comment&quot;&gt;// definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             __DEV__: &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(process.env.BUILD_DEV || &lt;span class=&quot;string&quot;&gt;&#39;true&#39;&lt;/span&gt;)),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             __PRERELEASE__: &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(process.env.BUILD_PRERELEASE || &lt;span class=&quot;string&quot;&gt;&#39;false&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.ProvidePlugin(&amp;#123;&lt;span class=&quot;comment&quot;&gt;//把一个全局变量插入到所有的代码中,支持jQuery plugin的使用;使用ProvidePlugin加载使用频率高的模块&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &lt;span class=&quot;comment&quot;&gt;//provide $, jQuery and window.jQuery to every script&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             $: &lt;span class=&quot;string&quot;&gt;&quot;jquery&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             jQuery: &lt;span class=&quot;string&quot;&gt;&quot;jquery&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &lt;span class=&quot;string&quot;&gt;&quot;window.jQuery&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;jquery&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.NoErrorsPlugin(), &lt;span class=&quot;comment&quot;&gt;//允许错误不打断程序&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TransferWebpackPlugin([ &lt;span class=&quot;comment&quot;&gt;//把指定文件夹下的文件复制到指定的目录&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;www&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      ], path.resolve(__dirname,&lt;span class=&quot;string&quot;&gt;&quot;src&quot;&lt;/span&gt;)),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HtmlwebpackPlugin(&amp;#123;&lt;span class=&quot;comment&quot;&gt;//用于生产符合要求的html文件;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         title: &lt;span class=&quot;string&quot;&gt;&#39;Hello World app&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           filename: &lt;span class=&quot;string&quot;&gt;&#39;assets/admin.html&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//其它解决方案配置&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    resolve: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        root: &lt;span class=&quot;string&quot;&gt;&#39;E:/github/flux-example/src&#39;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//绝对路径, 查找module的话从这里开始查找(可选)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        extensions: [&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.js&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.json&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.scss&#39;&lt;/span&gt;], &lt;span class=&quot;comment&quot;&gt;//自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        alias: &amp;#123;                            &lt;span class=&quot;comment&quot;&gt;//模块别名定义，方便后续直接引用别名，无须多写长长的地址//后续直接 require(&#39;AppStore&#39;) 即可&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            AppStore : &lt;span class=&quot;string&quot;&gt;&#39;js/stores/AppStores.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ActionType : &lt;span class=&quot;string&quot;&gt;&#39;js/actions/ActionType.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            AppAction : &lt;span class=&quot;string&quot;&gt;&#39;js/actions/AppAction.js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 		modulesDirectories: [&lt;span class=&quot;comment&quot;&gt;//取相对路径，所以比起 root ，所以会多很多路径。查找module(可选)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &lt;span class=&quot;string&quot;&gt;&#39;node_modules&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &lt;span class=&quot;string&quot;&gt;&#39;bower_components&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &lt;span class=&quot;string&quot;&gt;&#39;lib&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &lt;span class=&quot;string&quot;&gt;&#39;src&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;打包对象&quot;&gt;&lt;a href=&quot;#打包对象&quot; class=&quot;headerlink&quot; title=&quot;打包对象&quot;&gt;&lt;/a&gt;打包对象&lt;/h3&gt;&lt;p&gt;单页面打包：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 入口：要进行处理的实例（js）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    entry: &lt;span class=&quot;string&quot;&gt;&#39;./src/pages/index/index.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 出口：输出配置&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 输出到哪个目录&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        path: &lt;span class=&quot;string&quot;&gt;&#39;./asset/dev/&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 静态资源的引用路径&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        publicpath: &lt;span class=&quot;string&quot;&gt;&#39;/asset/dev/&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 实例最终输出的名字&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        filename: &lt;span class=&quot;string&quot;&gt;&#39;[name].js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 其它配置...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;多页面打包如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;entry: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    index: &lt;span class=&quot;string&quot;&gt;&#39;./src/pages/index/index.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    list: &lt;span class=&quot;string&quot;&gt;&#39;./src/pages/list/index.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    common: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;./src/base/base.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;./src/base/base.css&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;参数详解&quot;&gt;&lt;a href=&quot;#参数详解&quot; class=&quot;headerlink&quot; title=&quot;参数详解&quot;&gt;&lt;/a&gt;参数详解&lt;/h3&gt;&lt;h4 id=&quot;entry&quot;&gt;&lt;a href=&quot;#entry&quot; class=&quot;headerlink&quot; title=&quot;entry&quot;&gt;&lt;/a&gt;entry&lt;/h4&gt;&lt;p&gt;entry参数定义了打包后的入口文件，可以是个字符串或数组或者是对象；如果是数组，数组中的所有文件会打包生成一个filename文件；如果是对象，可以将不同的文件构建成不同的文件:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;entry&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        page1: &lt;span class=&quot;string&quot;&gt;&quot;./page1&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //支持数组形式，将加载数组中的所有模块，但以最后一个模块作为输出&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        page2: [&lt;span class=&quot;string&quot;&gt;&quot;./entry1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;./entry2&quot;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;output&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;dist/js/page&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        publicPath: &lt;span class=&quot;string&quot;&gt;&quot;/output/&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        filename: &lt;span class=&quot;string&quot;&gt;&quot;[name].bundle.js&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该段代码最终会生成一个 page1.bundle.js 和 page2.bundle.js，并存放到 ./dist/js/page 文件夹下&lt;/p&gt;
&lt;h4 id=&quot;output&quot;&gt;&lt;a href=&quot;#output&quot; class=&quot;headerlink&quot; title=&quot;output&quot;&gt;&lt;/a&gt;output&lt;/h4&gt;&lt;p&gt;output参数是个对象，定义了输出文件的位置及名字：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;output&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;dist/js/page&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    publicPath: &lt;span class=&quot;string&quot;&gt;&quot;/output/&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    filename: &lt;span class=&quot;string&quot;&gt;&quot;[name].bundle.js&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; : 打包文件存放的绝对路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;publicPath&lt;/code&gt; : 网站运行时的访问路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filename&lt;/code&gt; :打包后的文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当我们在 &lt;code&gt;entry&lt;/code&gt; 中定义构建多个文件时， &lt;code&gt;filename&lt;/code&gt; 可以对应的更改为 &lt;code&gt;[name].js&lt;/code&gt; 用于定义不同文件构建后的名字。&lt;/p&gt;
&lt;h4 id=&quot;module&quot;&gt;&lt;a href=&quot;#module&quot; class=&quot;headerlink&quot; title=&quot;module&quot;&gt;&lt;/a&gt;module&lt;/h4&gt;&lt;p&gt;在webpack中JavaScript，CSS，LESS，TypeScript，JSX，CoffeeScript，图片等静态文件都是模块，不同模块的加载是通过模块加载器（webpack-loader）来统一管理的。loaders之间是可以串联的，一个加载器的输出可以作为下一个加载器的输入，最终返回到JavaScript上：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//加载器配置&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        loaders: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//.css 文件使用 style-loader 和 css-loader 来处理&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.css$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&#39;style-loader!css-loader&#39;&lt;/span&gt; &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//.js 文件使用 jsx-loader 来编译处理&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.js$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&#39;jsx-loader?harmony&#39;&lt;/span&gt; &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.scss$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&#39;style!css!sass?sourceMap&#39;&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//图片文件使用 url-loader 来处理，小于8kb的直接转为base64&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.(png|jpg)$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&#39;url-loader?limit=8192&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;test&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示匹配的资源类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;loader&lt;/code&gt; 或 &lt;code&gt;loaders&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示用来加载这种类型的资源的loader&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;！&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义loader的串联关系，多个loader之间用“!”连接起来&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;exclude&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;: /node_modules/,忽略的文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;query&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;: {presets: [‘es2015’, ‘react’]}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;此外，还可以添加用来定义png、jpg这样的图片资源在小于10k时自动处理为base64图片的加载器：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; &lt;span class=&quot;attribute&quot;&gt;test&lt;/span&gt;: /\.(png|jpg)$/,loader: &lt;span class=&quot;string&quot;&gt;&#39;url-loader?limit=10000&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;给css和less还有图片添加了loader之后，我们不仅可以像在node中那样 &lt;code&gt;require()&lt;/code&gt; js文件了，我们还可以 &lt;code&gt;require()&lt;/code&gt; css、less甚至图片文件：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./bootstrap.css&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./myapp.less&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; img = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&#39;img&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;img.src = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./glyph.png&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意， &lt;code&gt;require()&lt;/code&gt; 还支持在资源path前面指定loader，即 &lt;code&gt;require(![loaders list]![source path])&lt;/code&gt; 形式：&lt;/p&gt;
&lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;!style!css!less!bootstrap/less/bootstrap.less&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; “bootstrap.less”这个资源会先被&lt;span class=&quot;string&quot;&gt;&quot;less-loader&quot;&lt;/span&gt;处理，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 其结果又会被&lt;span class=&quot;string&quot;&gt;&quot;css-loader&quot;&lt;/span&gt;处理，接着是&lt;span class=&quot;string&quot;&gt;&quot;style-loader&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 可类比&lt;span class=&quot;keyword&quot;&gt;pipe&lt;/span&gt;操作&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;require()&lt;/code&gt; 时指定的loader会覆盖配置文件里对应的loader配置项。&lt;/p&gt;
&lt;h4 id=&quot;resolve&quot;&gt;&lt;a href=&quot;#resolve&quot; class=&quot;headerlink&quot; title=&quot;resolve&quot;&gt;&lt;/a&gt;resolve&lt;/h4&gt;&lt;p&gt;webpack在构建包的时候会按目录的进行文件的查找， &lt;code&gt;resolve&lt;/code&gt; 属性中的 &lt;code&gt;extensions&lt;/code&gt; 数组中用于配置程序可以自行补全哪些文件后缀：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;resolve: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;//查找module的话从这里开始查找&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       root: &lt;span class=&quot;string&quot;&gt;&#39;/pomy/github/flux-example/src&#39;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//绝对路径&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;//自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       extensions: [&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.js&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.json&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.scss&#39;&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;//模块别名定义，方便后续直接引用别名，无须多写长长的地址&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       alias: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           AppStore : &lt;span class=&quot;string&quot;&gt;&#39;js/stores/AppStores.js&#39;&lt;/span&gt;,&lt;span class=&quot;comment&quot;&gt;//后续直接 require(&#39;AppStore&#39;) 即可&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           ActionType : &lt;span class=&quot;string&quot;&gt;&#39;js/actions/ActionType.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           AppAction : &lt;span class=&quot;string&quot;&gt;&#39;js/actions/AppAction.js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们想要加载一个js文件时，只要 &lt;code&gt;require(&amp;#39;common&amp;#39;)&lt;/code&gt; 就可以加载 &lt;code&gt;common.js&lt;/code&gt; 文件了。&lt;/p&gt;
&lt;p&gt;注意一下, &lt;code&gt;extensions&lt;/code&gt; 第一个是空字符串! 对应不需要后缀的情况.&lt;/p&gt;
&lt;h4 id=&quot;plugin&quot;&gt;&lt;a href=&quot;#plugin&quot; class=&quot;headerlink&quot; title=&quot;plugin&quot;&gt;&lt;/a&gt;plugin&lt;/h4&gt;&lt;p&gt;webpack提供了[丰富的组件]用来满足不同的需求，当然我们也可以自行实现一个组件来满足自己的需求：&lt;/p&gt;
&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;plugins:&lt;/span&gt; [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;//your plugins list&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; ]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在webpack中编写js文件时，可以通过require的方式引入其他的静态资源，可通过loader对文件自动解析并打包文件。通常会将js文件打包合并，css文件会在页面的header中嵌入style的方式载入页面。但开发过程中我们并不想将样式打在脚本中，最好可以独立生成css文件，以外链的形式加载。这时 &lt;code&gt;extract-text-webpack-plugin&lt;/code&gt;插件可以帮我们达到想要的效果。需要使用npm的方式加载插件，然后参见下面的配置，就可以将js中的css文件提取，并以指定的文件名来进行加载。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extract&lt;/span&gt;-&lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt;-webpack-&lt;span class=&quot;keyword&quot;&gt;plugin&lt;/span&gt; –-&lt;span class=&quot;keyword&quot;&gt;save&lt;/span&gt;-dev&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;plugins:&lt;/span&gt; [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ExtractTextPlugin(&lt;span class=&quot;string&quot;&gt;&#39;styles.css&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;externals&quot;&gt;&lt;a href=&quot;#externals&quot; class=&quot;headerlink&quot; title=&quot;externals&quot;&gt;&lt;/a&gt;externals&lt;/h4&gt;&lt;p&gt;当我们想在项目中require一些其他的类库或者API，而又不想让这些类库的源码被构建到运行时文件中，这在实际开发中很有必要。此时我们就可以通过配置externals参数来解决这个问题：&lt;/p&gt;
&lt;figure class=&quot;highlight avrasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;externals:&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;jquery&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;jQuery&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样我们就可以放心的在项目中使用这些API了： &lt;code&gt;var jQuery = require(“jquery”)&lt;/code&gt; ;&lt;/p&gt;
&lt;h4 id=&quot;context&quot;&gt;&lt;a href=&quot;#context&quot; class=&quot;headerlink&quot; title=&quot;context&quot;&gt;&lt;/a&gt;context&lt;/h4&gt;&lt;p&gt;当我们在require一个模块的时候，如果在require中包含变量，像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;require(&lt;span class=&quot;string&quot;&gt;&quot;./mods/&quot;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;.js&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么在编译的时候我们是不能知道具体的模块的。但这个时候，webpack也会为我们做些分析工作：&lt;/p&gt;
&lt;p&gt;1.分析目录：’./mods’；2.提取正则表达式：’/^.*.js$/’；&lt;/p&gt;
&lt;p&gt;于是这个时候为了更好地配合wenpack进行编译，我们可以给它指明路径，像在cake-webpack-config中所做的那样（我们在这里先忽略abcoption的作用）：&lt;/p&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; currentBase = process.cwd();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;context&lt;/span&gt; = abcOptions.options.&lt;span class=&quot;built_in&quot;&gt;context&lt;/span&gt; ? abcOptions.options.&lt;span class=&quot;built_in&quot;&gt;context&lt;/span&gt; : &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;path.isAbsolute(entryDir) ? entryDir : path.&lt;span class=&quot;built_in&quot;&gt;join&lt;/span&gt;(currentBase, entryDir);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于 webpack.config.js 更详尽的配置可以参考 &lt;a href=&quot;http://webpack.github.io/docs/configuration.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Webpack Configuration&lt;/a&gt; 。&lt;/p&gt;
&lt;h1 id=&quot;webpack-dev-server&quot;&gt;&lt;a href=&quot;#webpack-dev-server&quot; class=&quot;headerlink&quot; title=&quot;webpack-dev-server&quot;&gt;&lt;/a&gt;webpack-dev-server&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;devServer: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      inline: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      port: &lt;span class=&quot;number&quot;&gt;7777&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;//默认端口为8080，若要修改，需添加此配置&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;释放双手&quot;&gt;&lt;a href=&quot;#释放双手&quot; class=&quot;headerlink&quot; title=&quot;释放双手&quot;&gt;&lt;/a&gt;释放双手&lt;/h2&gt;&lt;p&gt;你肯定希望，这样的功能。那么，开始吧！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;自动编译&lt;/p&gt;
&lt;p&gt;如果你只是想支持自动编译，那么很简单。只要运行 &lt;code&gt;$ webpack -w&lt;/code&gt; 就可以开启它的自动编译功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 webpack-dev-server 实现：自动编译 + 浏览器同步刷新&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先，你需要安装 &lt;code&gt;webpack-dev-server&lt;/code&gt; 这个包。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm &lt;span class=&quot;selector-tag&quot;&gt;i&lt;/span&gt; webpack-dev-server -D&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后，我简单介绍下它： &lt;a href=&quot;https://webpack.github.io/docs/webpack-dev-server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webpack-dev-server 文档&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;运行时，它会启动一个本地 Node 服务器，默认端口8080. 即：localhost:8080. 并且自动识别当前目录下的 &lt;code&gt;webpack.config.js&lt;/code&gt; 文件，来作为 &lt;code&gt;webpack&lt;/code&gt; 配置文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;产出的编译后文件，不在 output.path 里，而在它自己定义的内存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;行内参数说明：&lt;ul&gt;
&lt;li&gt;inline: 使用命令行模式。&lt;/li&gt;
&lt;li&gt;content-base: 指定网站的根地址，如果你想指定为项目根目录，那么 &lt;code&gt;--content-base ./&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;hot: 开启热替换。一般用在 React 和 Vue 当中，我们这里不用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好了，那么，启动它吧：&lt;/p&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;webpack&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;server&lt;/span&gt;  &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，你在浏览器中，访问 &lt;code&gt;http://localhost:8080/views_dev/index.html&lt;/code&gt; 就会发现，你修改代码的时候，实时编译，并且浏览器同步刷新了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可以添加命令至&lt;code&gt;npm scripts&lt;/code&gt;,    &lt;code&gt;&amp;quot;start&amp;quot;:&amp;quot;webpack-dev-server&amp;quot;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h2&gt;&lt;p&gt;可通过 &lt;code&gt;npm script&lt;/code&gt; 进行启动。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  scripts&quot;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &quot;dev&quot;: &quot;webpack-dev-server --devtool eval-source-map --progress --colors --hot --inline --content-base ./dist&quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &quot;build&quot;: &quot;webpack --progress --colors&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我的目录结构是:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;app&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |__dist&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |   |__styles&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |   |__js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |       |__bundle.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |   |__index.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |__src&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |   |__styles&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |   |__js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |       |__index.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |__node_modules&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |__package.json&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |__webpack.config.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;content-base&quot;&gt;&lt;a href=&quot;#content-base&quot; class=&quot;headerlink&quot; title=&quot;content-base&quot;&gt;&lt;/a&gt;content-base&lt;/h2&gt;&lt;p&gt;设定 &lt;code&gt;webpack-dev-server&lt;/code&gt; 伺服的 &lt;code&gt;directory&lt;/code&gt; 。如果不进行设定的话，默认是在当前目录下。&lt;/p&gt;
&lt;figure class=&quot;highlight ada&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;webpack-dev-server &lt;span class=&quot;comment&quot;&gt;--content-base ./dist&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个时候还要注意的一点就是在 &lt;code&gt;webpack.config.js&lt;/code&gt; 文件里面，如果配置了 &lt;code&gt;output&lt;/code&gt; 的 &lt;code&gt;publicPath&lt;/code&gt; 这个字段的值的话，在 &lt;code&gt;index.html&lt;/code&gt; 文件里面也应该做出调整。 因为 &lt;code&gt;webpack-dev-server&lt;/code&gt; 伺服的文件是相对 &lt;code&gt;publicPath&lt;/code&gt; 这个路径的。因此，如果你的 &lt;code&gt;webpack.config.js&lt;/code&gt; 配置成这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        entry: &lt;span class=&quot;string&quot;&gt;&#39;./src/js/index.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            path: &lt;span class=&quot;string&quot;&gt;&#39;./dist/js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            filename: &lt;span class=&quot;string&quot;&gt;&#39;bundle.js&#39;&lt;/span&gt;，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            publicPath: &lt;span class=&quot;string&quot;&gt;&#39;/assets/&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么，在 &lt;code&gt;index.html&lt;/code&gt; 文件当中引入的路径也发生相应的变化:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Demo&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;assets/bundle.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果在 &lt;code&gt;webpack.config.js&lt;/code&gt; 里面没有配置 &lt;code&gt;output&lt;/code&gt; 的 &lt;code&gt;publicPath&lt;/code&gt; 的话，那么 &lt;code&gt;index.html&lt;/code&gt; 最后引入的文件 &lt;code&gt;js文件&lt;/code&gt; 路径应该是下面这样的。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Demo&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bundle.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img1.tuicool.com/bA367nA.png!web&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://hangweiping.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>JS--array对象全面解析</title>
    <link href="http://hangweiping.github.io/2016/07/07/JS--array%E5%AF%B9%E8%B1%A1%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/"/>
    <id>http://hangweiping.github.io/2016/07/07/JS--array对象全面解析/</id>
    <published>2016-07-07T11:21:33.000Z</published>
    <updated>2016-08-23T09:12:04.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;结合《javascript高级程序设计》《javascript权威指南》《javascript语言精粹》做的一篇关于Array对象的全面解析。分为两篇：基础篇和扩展应用篇。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1-概念及特点&quot;&gt;&lt;a href=&quot;#1-概念及特点&quot; class=&quot;headerlink&quot; title=&quot;1.概念及特点&quot;&gt;&lt;/a&gt;1.概念及特点&lt;/h2&gt;&lt;p&gt;数组是值的有序集合，每个值称为一个元素，每个元素在数组中有特定位置，以数字表示，称为索引，JavaScript中的数组是一个类数组的对象，虽然在性能上比真正的数组会慢，但它使用起来更方便。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;元素类型任意性&lt;/td&gt;
&lt;td&gt;数组元素可以是基础数据类型，对象，也可以是数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;动态性&lt;/td&gt;
&lt;td&gt;根据需要它们会增长或缩减，并且在变化时无需重新分配内存空间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;稀疏性&lt;/td&gt;
&lt;td&gt;数组元素的索引不一定是连续的，它们之间可以有空缺，&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;2-创建方式&quot;&gt;&lt;a href=&quot;#2-创建方式&quot; class=&quot;headerlink&quot; title=&quot;2.创建方式&quot;&gt;&lt;/a&gt;2.创建方式&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;2.1 数组字面量方式 ： 元素用逗号隔开即可。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; empty = [];&lt;span class=&quot;comment&quot;&gt;//创建空数组&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt; = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;//创建5个数值类型元素的的数组&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mix = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;jozo&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;,[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;jozo&#39;&lt;/span&gt;&amp;#125;];&lt;span class=&quot;comment&quot;&gt;//创建任意类型元素的数组&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2.2 构造函数方式 : 调用构造函数Array()，根据参数不同，创建不同的数组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2 构造函数方式 : 调用构造函数Array()，根据参数不同，创建不同的数组&lt;/strong&gt;&lt;br&gt;a.不传递参数&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Arry();&lt;span class=&quot;comment&quot;&gt;//创建一个空数组，但我们更常用下面的方式&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = [];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;b.传递一个数值参数，这个参数用来指定数组长度&lt;/p&gt;
&lt;figure class=&quot;highlight pony&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Arry&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 创建了一个长度为5的数组&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;c.传递多个参数，用这些参数作为数组元素初始化数组。&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Arry(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;jozo&#39;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;span class=&quot;comment&quot;&gt;//构造函数的参数将会成为数组元素&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-添加与删除&quot;&gt;&lt;a href=&quot;#3-添加与删除&quot; class=&quot;headerlink&quot; title=&quot;3.添加与删除&quot;&gt;&lt;/a&gt;3.添加与删除&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;3.1 添加&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;a.通过索引添加&lt;/p&gt;
&lt;figure class=&quot;highlight prolog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var a = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;jozo&#39;&lt;/span&gt;;//此时 a = [&lt;span class=&quot;string&quot;&gt;&#39;jozo&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;blog&#39;&lt;/span&gt;;//此时 a = [&lt;span class=&quot;string&quot;&gt;&#39;jozo&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;blog&#39;&lt;/span&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;b.通过数组方法添加&lt;/p&gt;
&lt;p&gt;&lt;code&gt;push(),concat(),splice(),unshift()&lt;/code&gt;方法都可以为数组添加元素，后面将会详细介绍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.2 删除&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;a.删除数组元素&lt;/p&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;delet a[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;//删除第一个元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(a[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(a[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(a.length);&lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出，通过&lt;code&gt;delete&lt;/code&gt;运算符删除数组元素也有一些注意的地方。&lt;code&gt;1.&lt;/code&gt;原数组长度不变。&lt;code&gt;2.&lt;/code&gt;被删除的元素的值变为&lt;code&gt;undefined&lt;/code&gt;.&lt;code&gt;3.&lt;/code&gt;数组内的其他元素的索引没有改变。其实就是原数组变成了&lt;code&gt;稀疏数组&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;splice(),pop(),shift()&lt;/code&gt;数组方法也可以用于删除数组元素，后面讲解。&lt;/p&gt;
&lt;p&gt;b.删除整个数组对象&lt;/p&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;第一种方式：直接操作数组对象（推荐用法）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.length = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(a);&lt;span class=&quot;comment&quot;&gt;//输出: []&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第二种方式：改变变量的引用 （不算真正的删除）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(a);&lt;span class=&quot;comment&quot;&gt;//输出: []&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-常用方法属性详解&quot;&gt;&lt;a href=&quot;#3-常用方法属性详解&quot; class=&quot;headerlink&quot; title=&quot;3.常用方法属性详解&quot;&gt;&lt;/a&gt;3.常用方法属性详解&lt;/h2&gt;&lt;p&gt;其实上面的知识点不讲我们都差不多都知道的。但是数组的一些方法属性我们虽然知道但是却不会用，或是总是忘记该怎么用，因为它的方法属性也很多，我们来分析下各个方法的特点：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;常用方法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;th&gt;影响原数组&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.join()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用不同的分隔符将数组转换成包含分隔符的字符串&lt;/td&gt;
&lt;td&gt;转换后的字符串&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;2.reverse()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;颠倒数组元素的顺序&lt;/td&gt;
&lt;td&gt;重排序的数组&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;3.sort()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;通常会接受一个比较函数将数组特定的顺序排序&lt;/td&gt;
&lt;td&gt;重排序的数组&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;4.concat()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将传递给该方法的每一个参数添加到原数组中&lt;/td&gt;
&lt;td&gt;修改后的数组副本&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;5.slice()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;获取当前数组中的一或多个元素创建一个新的数组&lt;/td&gt;
&lt;td&gt;返回新的数组&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;6.splice()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;通过传递参数不同，可实现数组的增删改&lt;/td&gt;
&lt;td&gt;新的数组&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;7.push()/pop()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;两个数组的栈方法（后进先出），在数组的末尾增加或删除数组&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pop()&lt;/code&gt;返回数组长度，&lt;code&gt;push()&lt;/code&gt;返回被删除的元素&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;8.unshift()/shift()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;两个数组的堆方法（先进先出），在数组的前端增加或删除数组&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unshift()&lt;/code&gt;返回数组长度，&lt;code&gt;shift()&lt;/code&gt;返回删除的元素&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;3.1 join()方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将数组中的所有元素都转化为字符串链接在一起，可以指定一个可选的分隔符来分隔各个元素，若未指定分隔符，默认使用逗号：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; boys = [&lt;span class=&quot;string&quot;&gt;&#39;jozo&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;jozo1&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;jozo2&#39;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; newboy1 = boys.join();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; newboy2 = boys.join(&lt;span class=&quot;string&quot;&gt;&#39;+&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; newboy3 = boys.join(&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(newboy1); &lt;span class=&quot;comment&quot;&gt;// jozo,jozo1,jozo2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(newboy2); &lt;span class=&quot;comment&quot;&gt;// jozo+jozo1+jozo2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(newboy3); &lt;span class=&quot;comment&quot;&gt;// jozo,jozo1,jozo2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(boys); &lt;span class=&quot;comment&quot;&gt;// [&quot;jozo&quot;, &quot;jozo1&quot;, &quot;jozo2&quot;]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从上面的代码可以看出一些问题：&lt;code&gt;1.&lt;/code&gt;给&lt;code&gt;join()&lt;/code&gt;方法传递&lt;code&gt;undefined&lt;/code&gt;，也会默认使用逗号分隔符，但是IE7及一下版本会直接用&lt;code&gt;&amp;#39;undefined&amp;#39;&lt;/code&gt;作为分隔符。&lt;code&gt;2.join()&lt;/code&gt;方法并没有改变原数组。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.2 reverse()方法&lt;/strong&gt;&lt;br&gt;将数组元素颠倒顺序(&lt;code&gt;注意：并不是从大到小或者是从小到大&lt;/code&gt;)，返回逆序的数组，这个方法直接对原数组中排序。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a.reserse());&lt;span class=&quot;comment&quot;&gt;// [2,3,1] 只是颠倒顺序，不是按大小排序&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a);&lt;span class=&quot;comment&quot;&gt;//[2,3,1] 改变了原数组&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个方法快速直观明了，但不够灵活，很多时候我们需要特定的排序，所以有了下面的更灵活的方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.3 sort()方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，sort()方法按从小到大的排序，但是如果是数值，sort()方法会调用每个元素的toString()方法转换为字符串后再比较：&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt;  = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(&lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt;.sort()); &lt;span class=&quot;comment&quot;&gt;//[1,10,15,5]  按照字符串比较。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt;  = [&lt;span class=&quot;string&quot;&gt;&#39;jozo&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(&lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt;.sort()); &lt;span class=&quot;comment&quot;&gt;//[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;jozo&#39;]  按照字符串比较。&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认的sort()方法以字母表顺序进行排序，这有时也不是最佳方案，因此我们可以传递一个函数类型的参数作为比较函数，改变排序方式，以便我们确定哪个值在前面。&lt;/p&gt;
&lt;p&gt;默认的sort()方法以字母表顺序进行排序，这有时也不是最佳方案，因此我们可以传递一个函数类型的参数作为比较函数，改变排序方式，以便我们确定哪个值在前面。&lt;br&gt;比较函数：接受两个参数，函数的返回值决定数组的排序方式。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;th&gt;排序方式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;负数&lt;/td&gt;
&lt;td&gt;从小到大&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;正数&lt;/td&gt;
&lt;td&gt;从大到小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;顺序无关紧要&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;看下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 为了直观一点，写个罗嗦的比较函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; compare = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a,b&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a &amp;lt; b)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a &amp;gt; b)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num1  = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(num1.sort(compare)); &lt;span class=&quot;comment&quot;&gt;//[1,5,10,15]  从小到大&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num2  = [&lt;span class=&quot;string&quot;&gt;&#39;jozo&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(num2.sort(compare)); &lt;span class=&quot;comment&quot;&gt;//[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;jozo&#39;]  从小到大&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// compare()函数可以改进下：&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//从小到大的比较函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; compare = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a,b&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a - b;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//从大到小的比较函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; compare = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a,b&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b - a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//或者直接给sort()方法传递一个匿名比较函数：&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;num.sort(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a,b&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a -b&amp;#125;); &lt;span class=&quot;comment&quot;&gt;// 推荐用法&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;3.4 concat()方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个方法先会创建当前数组的一个副本，然后将收到的参数添加到副本数组的末尾，返回重新构建的数组。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1.&lt;/code&gt;当没有传递参数时，只是返回当前数组的一个副本。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;b = a.concat();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b);&lt;span class=&quot;comment&quot;&gt;//[1,2] a 的副本&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a);&lt;span class=&quot;comment&quot;&gt;//[1,2]; a 未改变&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;2.&lt;/code&gt;当传递的参数为非数组时，将会把每个参数添加到副本中&lt;/p&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;b = a.concat(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(b);&lt;span class=&quot;comment&quot;&gt;//[1,2,3,4] 在a的副本上添加&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(a);&lt;span class=&quot;comment&quot;&gt;//[1,2]; a 未改变&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;3.&lt;/code&gt;当传递的参数是数组时，将会把数组的每一个元素添加到副本中。&lt;/p&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;b = a.concat([&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(b);&lt;span class=&quot;comment&quot;&gt;//[1,2,3,4] 在a的副本上添加&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(a);&lt;span class=&quot;comment&quot;&gt;//[1,2]; a 未改变&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//来看看参数的另一种形式&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;b = a.concat([&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;，[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]]); &lt;span class=&quot;comment&quot;&gt;//数组的数组&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(b);&lt;span class=&quot;comment&quot;&gt;//[1,2,3,4,[5,6]]  //数组的数组直接添加到副本&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(a);&lt;span class=&quot;comment&quot;&gt;//[1,2]; a 未改变&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;3.5 slice()方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个方法返回指定数组的一个片段或子数组，接受一个或两个参数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1.&lt;/code&gt;一个参数 ：返回该参数指定位置（包含）到数组末尾的元素的新数组&lt;/p&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.slice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 返回 [1,2,3,4,5]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.slice(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 返回 [2,3,4,5]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.slice(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 返回 [] 参数超过数组索引，返回空数组&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.slice(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//返回 [5] 用数组长度-1 相当于slice(4);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(a);&lt;span class=&quot;comment&quot;&gt;//返回 [1,2,3,4,5] 原数组不变&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;2.&lt;/code&gt;两个参数 ：参数作为始末位置，但不包含第二个参数指定的位置。&lt;/p&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.slice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 返回 [1,2,3,4]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.slice(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 返回 [2,3,4]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.slice(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 返回 [2,3,4,5] 参数超过数组索引，则到数组末尾&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.slice(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//返回 [2,3,4] 用数组长度-1 相当于slice(1,4);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.slice(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-7&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//返回 [] 当结束位置小于起始位置，返回空数组&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(a);&lt;span class=&quot;comment&quot;&gt;//返回 [1,2,3,4,5] 原数组不变&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;3.6 splice()方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个数组恐怕是数组里最强大的方法了，它有多种用法，主要用途是向数组中部插入元素，请不要和上面的slice()方法混淆了，这是两个完全不同的方法。由参数的不同，可实现下列三种方法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1.&lt;/code&gt;删除 ：指定一个或两个参数，第一个参数是删除的起始位置，第二个参数是要删除的元素个数，若省略第二个参数，则从起始位置删除至末尾：&lt;/p&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.splice(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//返回 [4,5] 从索引3开始，删除2个元素，此时 a = [1,2,3]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.splice(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 返回 [2,3] 此时 a = [1]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;2.&lt;/code&gt;插入：指定3个及以上个参数，前两个参数和上面的一致，第二个参数一般为&lt;code&gt;0&lt;/code&gt;，后面的参数表示要插入的元素：&lt;/p&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.splice(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//返回 [] 从索引4开始，删除0个元素，此时 a = [1,2,3,4,5,6,7]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//下面这种情况又和concat()不同，直接插入数组而非数组元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.splice(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,[&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]);&lt;span class=&quot;comment&quot;&gt;//返回 [] 从索引4开始，删除0个元素，此时 a = [1,2,3,4,5,[6,7]]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;3.&lt;/code&gt;更新：指定3个及以上个参数，前两个参数和上面的一致，第二个参数指定要删除的元素个数，后面的参数表示要插入的元素：&lt;/p&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.splice(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//返回 [4,5] 从索引3开始，删除2个元素，此时 a = [1,2,3,6,7]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;3.7 push()/pop()方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;补充下数据结构的知识，栈是一种&lt;code&gt;LIFO(Last-In-First-Out，后进先出)&lt;/code&gt;的数据结构，也就是最新添加的项最早被移除。而栈中项的插入和移除只发生在栈顶部。数组的&lt;code&gt;push(),pop()&lt;/code&gt;方法就为数组实现了类似栈的功能：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1.push()：&lt;/code&gt;该方法可以接受任意数量，任意类型的的参数，并将它们添加至数组的末尾（栈顶），最后&lt;code&gt;返回修改后的数组的长度&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; = []&lt;span class=&quot;comment&quot;&gt;;// 创建空数组&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var lng = &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt;.push(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;// 添加数组元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;// 输出：[1,2,3]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(lng)&lt;span class=&quot;comment&quot;&gt;;// 输出：3  返回数组长度3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var lng2 = &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt;.push(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;])&lt;span class=&quot;comment&quot;&gt;;//&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(lng2);&lt;span class=&quot;comment&quot;&gt; // 输出：5  返回数组长度5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;//输出：[1,2,3,4,[5,6]]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;2.pop() ：&lt;/code&gt;相反，该方法删除数组的最后一个元素，减小数组长度，并返回删除的元素。不带参数。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; last= a.pop();&lt;span class=&quot;comment&quot;&gt;// 删除数组最后一个元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a);&lt;span class=&quot;comment&quot;&gt;// 输出：[1,2]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(last);&lt;span class=&quot;comment&quot;&gt;// 输出：3  被删除的元素是 3&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出，这两个方法都是直接修改原数组。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.8 unshift()/shift()方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面提到了栈的数据结构，这里再提一个队列的数据结构，这是一种&lt;code&gt;FIFO(First-In-First-Out,先进先出)&lt;/code&gt;的数据结构，队列添加元素是在末端，删除是在前端。很多同学就会猜测了，&lt;code&gt;unshift()&lt;/code&gt;就是在末端添加元素，&lt;code&gt;shift()&lt;/code&gt;就是在前端删除元素，其实不然：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1.shift()：&lt;/code&gt;用于在前端删除数组元素，返回被删除的元素，与&lt;code&gt;push()&lt;/code&gt;方法结合便是一对队列方法。&lt;/p&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.push(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//此时 a = [1,2,3,4,5] &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var start = a.shift();&lt;span class=&quot;comment&quot;&gt;//此时 a = [2,3,4,5] 删除最前端的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(start);&lt;span class=&quot;comment&quot;&gt;// 1 返回删除的元素&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;2.unshift()：&lt;/code&gt;用于在前端添加元素，返回修改后的数组的长度，与pop()方法结合便是一对反操作的队列。&lt;/p&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a.unshift(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//此时 a = [4,5,1,2,3] 在前端添加元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var end= a.pop();&lt;span class=&quot;comment&quot;&gt;//此时 a = [4,5,1,2] &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(end);&lt;span class=&quot;comment&quot;&gt;// 3 返回删除的元素&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这两个方法同样都是直接修改原数组。&lt;/p&gt;
&lt;h2 id=&quot;4-ES5的数组方法&quot;&gt;&lt;a href=&quot;#4-ES5的数组方法&quot; class=&quot;headerlink&quot; title=&quot;4.ES5的数组方法&quot;&gt;&lt;/a&gt;4.ES5的数组方法&lt;/h2&gt;&lt;p&gt;ECMAScript定义了9个操作数组的数组方法:&lt;/p&gt;
&lt;p&gt;遍历：&lt;code&gt;forEach()&lt;/code&gt;&lt;br&gt;映射：&lt;code&gt;map()&lt;/code&gt;&lt;br&gt;过滤：&lt;code&gt;filter()&lt;/code&gt;&lt;br&gt;检测：&lt;code&gt;every(),some()&lt;/code&gt;&lt;br&gt;简化：&lt;code&gt;reduce(),reduceRight()&lt;/code&gt;&lt;br&gt;搜索：&lt;code&gt;indexOf(),lastIndexOf()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;每个方法都接受两个参数：&lt;code&gt;1.&lt;/code&gt;要在每个数组元素上运行的函数；&lt;code&gt;2.&lt;/code&gt;运行函数的作用域对象 — this指向 (可选参数)&lt;br&gt;第一个参数–函数又可传递三个参数&lt;code&gt;（简化和搜索方法除外）&lt;/code&gt;，分别代表：&lt;code&gt;1.&lt;/code&gt;每个数组元素的值；&lt;code&gt;2.&lt;/code&gt;元素的索引；&lt;code&gt;3.&lt;/code&gt;数组本身&lt;/p&gt;
&lt;p&gt;注意：所有这些方法都不会修改原始数组，但是传递的函数是可以修改的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.1 forEach()&lt;/strong&gt;&lt;br&gt;该方法对数组的每一项运行给定的函数。这个方法没有返回值。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nums = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;nums.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;)&lt;/span&gt;&amp;#123;sum += num;&amp;#125;); &lt;span class=&quot;comment&quot;&gt;//没有对原数组进行修改&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(sum); &lt;span class=&quot;comment&quot;&gt;// 6  1+2+3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;nums.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value,i,ary&lt;/span&gt;)&lt;/span&gt;&amp;#123;ary[i] = value +&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&amp;#125;); &lt;span class=&quot;comment&quot;&gt;//对数组进行了修改&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(nums);&lt;span class=&quot;comment&quot;&gt;//[2,3,4]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;4.2 map()&lt;/strong&gt;&lt;br&gt;该方法对数组的每一项运行给定的函数，返回每次函数调用的结果组成的数组。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nums = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; squer = nums.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value*vlaue&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(squer); &lt;span class=&quot;comment&quot;&gt;// [1,4,9]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(nums);&lt;span class=&quot;comment&quot;&gt;// [1,2,3]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：这可能看起来有点像forEach()方法，但细看会发现 该方法有返回值，而前者没有，而且返回值是数组，这个数组是新数组，并没有对原始数组进行修改。如果原始数组是稀疏数组，返回的也是相同方式的数组，具有相同的长度和相同的缺失元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.3 filter()&lt;/strong&gt;&lt;br&gt;该方法对数组的每一项运行给定的函数，返回该函数会返回true的项组成的数组。&lt;/p&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;smallValue = a.filter(function(value)&amp;#123;return value &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&amp;#125;);&lt;span class=&quot;comment&quot;&gt;// [1,2]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：filter()会跳过稀疏数组中缺少的元素，他的返回数组总是稠密的。下面的方式可以压缩稀疏数组的看空缺：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;//有两个空缺元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Var&lt;/span&gt; uglify = a.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&amp;#125;); &lt;span class=&quot;comment&quot;&gt;//[1,3,5]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还可以过滤undefined和null的元素：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,,&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;//有两个空缺元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Var uglify = a.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(value)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value != &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; value != &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;); &lt;span class=&quot;comment&quot;&gt;//[1,3,5]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;4.4 every(),some()&lt;/strong&gt;&lt;br&gt;&lt;code&gt;every()：&lt;/code&gt;对数组的每一项运行给定的函数，如果该函数对数组的每一项都返回true，则返回true,注意是&lt;code&gt;每一项&lt;/code&gt;，有一项为false则为false.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nums = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bigresult = nums.every(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value &amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;); &lt;span class=&quot;comment&quot;&gt;// false 不全大于2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = nums.every(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;); &lt;span class=&quot;comment&quot;&gt;//true 全部大于0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;some()：&lt;/code&gt;对数组的每一项运行给定的函数，如果该函数对数组的&lt;code&gt;任一项&lt;/code&gt;返回true，则返回true。&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nums = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bigresult = nums.every(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(value)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value &amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;); &lt;span class=&quot;comment&quot;&gt;// true 有大于2的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = nums.every(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(value)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;); &lt;span class=&quot;comment&quot;&gt;//false 全部大于0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：在数组是空数组时，every()返回true,some()返回false&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xaw6e.com1.z0.glb.clouddn.com/wp-content/uploads/2015/04/19/20150419_553357286aaad.png&quot; alt=&quot;[ JS 基础 ] Array 对象全面解析 -- 掌握基础  ( 4 )&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.5 reduce(),reduceRight()&lt;/strong&gt;&lt;br&gt;这两个方法都会迭代数组的所有项，然后构建一个最终的返回值。reduce()从数组的第一项开始，逐个遍历到最后；reduceRight()从数组的最后一项开始，逐个遍历到第一项。&lt;/p&gt;
&lt;p&gt;这两个方法都是接收两个参数，一个是在每项上调用的函数，另一个是作为遍历的初始值。调用的函数又接收四个参数，分别是：前一个值，当前值，索引，数组对象。这个函数的返回值都会自动作为下一次遍历的函数的第一个参数。若未指定初始值，第一次遍历发生在数组的第二项上，因此第一个参数就是数组第一项，第二个参数就是数组的第二项。我们来个求和运算：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nums = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;nums.reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;pre,cur,index,ary&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; pre + cur;&amp;#125;); &lt;span class=&quot;comment&quot;&gt;// 15 &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//指定初始值,则第一个参数就是初始值，第二个参数就是数组第一项&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;nums.reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;pre,cur,index,ary&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; pre + cur;&amp;#125;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;); &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在简单的数字元算上，reduce()和reduceRight()除了顺序不同，其他的完全相同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.6 indexOf(),lastIndexOf()&lt;/strong&gt;&lt;br&gt;这两个方法都接受两个参数：要查找的项，查找起点位置的索引（可选）；indexOf()从数组头部开始检索,lastIndexOf()则从数组尾部向前开始检索。&lt;br&gt;两个方法都都返回找到的元素的第一次出项的位置（索引），在没有找到的情况下返回 -1 。&lt;br&gt;要注意的是：在检索时会与数组的每一项进行全等的比较，也就是必须严格相等（===）。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var nums = [1,2,3,4,5,4,3,2,1];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(nums.indexOf(3)); // 2  索引为2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(nums.lastIndexOf(3)) // 6 从后面开始找，索引为6;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(nums.indexOf(3,3)); // 6  从位置3开始向后找&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(nums.lastIndexOf(3,3)) // 2 从位置3开始向前找&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(nums.indexOf(6)); // -1  没有找到&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var class= &amp;#123;name : &#39;ruanjian&#39;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var students = [&amp;#123;name : &#39;jozo&#39;&amp;#125;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(students.indexOf(class)); //false  非严格相等(不是同一个对象)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var school = [class];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(school.indexOf(class);); //true 严格相等(同一个对象)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;5-总结&quot;&gt;&lt;a href=&quot;#5-总结&quot; class=&quot;headerlink&quot; title=&quot;5.总结&quot;&gt;&lt;/a&gt;5.总结&lt;/h2&gt;&lt;p&gt;结合高级程序设计与权威指南两本书，内容比较多，写了好长，写的过程中有种觉得没必要的感觉，但是写完之后就会觉得很有价值，至少对我来说。不是我不会，而是记得不深刻，重新书写一遍之后感觉对数组这东西比较透彻了。我也建议各位多做一个学习总结，如有不正确的，请提醒修正。谢谢。下一篇文章继续介绍数组！关于ES6的一些扩展以及数组一些应用。&lt;/p&gt;
&lt;h2 id=&quot;附：JavaScript中的splice方法&quot;&gt;&lt;a href=&quot;#附：JavaScript中的splice方法&quot; class=&quot;headerlink&quot; title=&quot;附：JavaScript中的splice方法&quot;&gt;&lt;/a&gt;附：JavaScript中的splice方法&lt;/h2&gt;&lt;p&gt;JavaScript中的splice主要用来对js中的数组进行操作，包括删除，添加，替换等。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;删除-用于删除元素，两个参数，第一个参数（要删除第一项的位置），第二个参数（要删除的项数） &lt;/li&gt;
&lt;li&gt;插入-向数组指定位置插入任意项元素。三个参数，第一个参数（插入位置），第二个参数（0），第三个参数（插入的项） &lt;/li&gt;
&lt;li&gt;替换-向数组指定位置插入任意项元素，同时删除任意数量的项，三个参数。第一个参数（起始位置），第二个参数（删除的项数），第三个参数（插入任意数量的项）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在&lt;code&gt;js&lt;/code&gt;中数组是经常被使用到的，我们除了要学习数组的方法，还需要了解诶一下某一些方法是如何来实现的。然而我看了《javascript语言精粹》中方法的一章，想记录下书上的代码，以便加深印象。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pop&lt;/code&gt;和&lt;code&gt;push&lt;/code&gt;方法使得数组可以从堆栈一样工作。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.method(&lt;span class=&quot;string&quot;&gt;&#39;pop&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.splice(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;push&lt;/code&gt;方法把一个或者多个的参数附加到一个数组的尾部。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.method(&lt;span class=&quot;string&quot;&gt;&#39;push&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.splice.apply( &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, [&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].concat(&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice.apply(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;)));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;shift&lt;/code&gt;方法移除数组中的第一个元素并且放回该元素。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.method(&lt;span class=&quot;string&quot;&gt;&#39;shift&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.splice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;unshift&lt;/code&gt;方法像&lt;code&gt;push&lt;/code&gt;一样，用于把元素添加到数组中，但它是吧参数插入到数组开始部分而不是尾部。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.method(&lt;span class=&quot;string&quot;&gt;&#39;unshift&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.splice.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].concat(&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice.apply(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;)));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;splice&lt;/code&gt;方法从数组中移除一个或者多个元素，并且用新的参数替换它们。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.method(&lt;span class=&quot;string&quot;&gt;&#39;splice&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;start, deleteCount&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; max = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.max,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        min = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.min,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        delta, el, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        insertCount = max(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        len = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        new_len, result = [], shift_count;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    start = start || &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (start &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        start += len;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    start = max(min(start, len), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    deleteCount = max(min(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; deleteCount === &lt;span class=&quot;string&quot;&gt;&#39;number&#39;&lt;/span&gt; ? deleteCount : len, len - start), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    delta = insertCount - deleteCount;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    new_len = len + delta;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (k &amp;lt; deleteCount) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        el = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[start + k];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (el !== &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            result[k] = el;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        k += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    shift_count = len - start - deleteCount;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (delta &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        k = start = insertCount;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (shift_count) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[k] = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[k - delta];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            k += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            shift_count -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length = new_len;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (delta &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        k = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (shift_count) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[new_len - k] = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[len - k];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            k += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            shift_count -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length = new_len;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k &amp;lt; insertCount; k ++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[start + k] = &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;[k + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里只是摘抄了书上的一些实例，还有许多数组的方法可以思考如何去实现，如果有什么不对的地方请指教，与大家共勉！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;结合《javascript高级程序设计》《javascript权威指南》《javascript语言精粹》做的一篇关于Array对象的全面解析。分为两篇：基础篇和扩展应用篇。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JS" scheme="http://hangweiping.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS的6种实现继承的方式及Object.create</title>
    <link href="http://hangweiping.github.io/2016/07/06/JS%E7%9A%846%E7%A7%8D%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E7%9A%84%E6%96%B9%E5%BC%8F%E5%8F%8AObject.create/"/>
    <id>http://hangweiping.github.io/2016/07/06/JS的6种实现继承的方式及Object.create/</id>
    <published>2016-07-06T11:33:29.000Z</published>
    <updated>2016-08-22T09:14:50.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;一般只使用&lt;u&gt;第三种&lt;/u&gt;&lt;/strong&gt;—&lt;strong&gt;组合式继承&lt;/strong&gt;是将原型链式继承和构造函数式继承组合在一起使用，从而发挥两者的长处。Object.create 用于创建一个新的对象，当为 Object 时 prototype 为 null, 作用与 new Object(); 或 {} 一致;当为 function 时，作用与 new FunctionName 一样.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;①原型链式继承&quot;&gt;&lt;a href=&quot;#①原型链式继承&quot; class=&quot;headerlink&quot; title=&quot;①原型链式继承&quot;&gt;&lt;/a&gt;①原型链式继承&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name=name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; Person.prototype.getName=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Male&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;age&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age=age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Male.prototype=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;John&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Male.prototype.getAge=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; maleA=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Male(&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maleA.getAge());&lt;span class=&quot;comment&quot;&gt;//12&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maleA.getName());&lt;span class=&quot;comment&quot;&gt;//John&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; maleB=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Male(&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maleB.getAge());&lt;span class=&quot;comment&quot;&gt;//25&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maleB.getName());&lt;span class=&quot;comment&quot;&gt;//John&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原型链式继承的实质是重写构造函数的原型对象，代之以一个所要继承的类型的实例。该例子中Male类型继承了Person类型。这种继承方式，所有的子类型共享父类型的属性和方法，因为原型指向的是同一个父类型实例。所以，当任一个子类型实例改变了继承来的原型属性的值，那么其他实例的原型属性的值也将被改变。为了解决这个问题，出现了借用构造函数式继承。&lt;/p&gt;
&lt;h3 id=&quot;②借用构造函数式继承&quot;&gt;&lt;a href=&quot;#②借用构造函数式继承&quot; class=&quot;headerlink&quot; title=&quot;②借用构造函数式继承&quot;&gt;&lt;/a&gt;②借用构造函数式继承&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name=name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Person.prototype.getName=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Male&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Person.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age=age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Male.prototype.getAge=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; maleA=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Male(&lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maleA.getAge());&lt;span class=&quot;comment&quot;&gt;//12&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maleA.name);&lt;span class=&quot;comment&quot;&gt;//A&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; maleA.getName);&lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; maleB=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Male(&lt;span class=&quot;string&quot;&gt;&quot;B&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maleB.getAge());&lt;span class=&quot;comment&quot;&gt;//25&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maleB.name);&lt;span class=&quot;comment&quot;&gt;//B&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; maleB.getName);&lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;借用构造函数式继承的实质是在构造函数内调用父类型的构造函数，那么子类型将继承父类型构造函数内所添加的属性和方法。借用构造函数式继承的优点是可以在继承父类型的时候向父类型的构造函数传递参数，缺点是不能继承定义在父类型原型上的方法和属性。为了解决借用构造函数式继承的这个缺点，出现了组合式继承。&lt;/p&gt;
&lt;h3 id=&quot;③组合式继承&quot;&gt;&lt;a href=&quot;#③组合式继承&quot; class=&quot;headerlink&quot; title=&quot;③组合式继承&quot;&gt;&lt;/a&gt;③组合式继承&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name=name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Person.prototype.getName=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Male&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Person.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age=age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Male.prototype=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Male.prototype.getAge=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; maleA=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Male(&lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maleA.getAge());&lt;span class=&quot;comment&quot;&gt;//12&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maleA.name);&lt;span class=&quot;comment&quot;&gt;//A&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maleA.getName());&lt;span class=&quot;comment&quot;&gt;//A&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; maleB=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Male(&lt;span class=&quot;string&quot;&gt;&quot;B&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maleB.getAge());&lt;span class=&quot;comment&quot;&gt;//25&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maleB.name);&lt;span class=&quot;comment&quot;&gt;//B&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maleB.getName());&lt;span class=&quot;comment&quot;&gt;//B&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;组合式继承是将原型链式继承和构造函数式继承组合在一起使用，从而发挥两者的长处。其背后的思路是使用原型链来实现对原型属性和方法的继承，而通过借用构造函数实现对实例属性的继承。这样，既通过在原型上定义方法实现了函数复用，又能保证每个实例都有它自己的属性。&lt;/p&gt;
&lt;h3 id=&quot;④原型式继承&quot;&gt;&lt;a href=&quot;#④原型式继承&quot; class=&quot;headerlink&quot; title=&quot;④原型式继承&quot;&gt;&lt;/a&gt;④原型式继承&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;object&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;o&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;F&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    F.prototype=o;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; F();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person=&amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person.name=&lt;span class=&quot;string&quot;&gt;&#39;John&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person.getName=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; male=object(person);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;male.age=&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;male.getAge=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(male.name);&lt;span class=&quot;comment&quot;&gt;//John&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(male.getName())&lt;span class=&quot;comment&quot;&gt;//John&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(male.age);&lt;span class=&quot;comment&quot;&gt;//22&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(male.getAge())&lt;span class=&quot;comment&quot;&gt;//22&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原型式继承是基于现有对象然后借助原型创建新的对象，新对象拥有现有对象的所有属性和方法，同时还不用创建自定义类型，其实质上是对现有对象的浅复制，新对象与现有对象共享现有对象的属性和方法。ECMASctipt5通过新增Object.create()方法规范了原型式继承。这个方法接受两个参数，一个用作新对象原型的对象和（可选的）一个为新对象定义额外属性的对象。上面的例子可以改写为：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person=&amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person.name=&lt;span class=&quot;string&quot;&gt;&#39;John&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person.getName=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; male=&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(person,&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    age:&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        value:&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;male.getAge=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(male.name);&lt;span class=&quot;comment&quot;&gt;//John&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(male.getName())&lt;span class=&quot;comment&quot;&gt;//John&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(male.age);&lt;span class=&quot;comment&quot;&gt;//22&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(male.getAge());&lt;span class=&quot;comment&quot;&gt;//22&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;⑤寄生式继承&quot;&gt;&lt;a href=&quot;#⑤寄生式继承&quot; class=&quot;headerlink&quot; title=&quot;⑤寄生式继承&quot;&gt;&lt;/a&gt;⑤寄生式继承&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Male&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;original,age&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; clone=&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(original);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    clone.age=age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    clone.getAge=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; clone;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person=&amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person.name=&lt;span class=&quot;string&quot;&gt;&quot;John&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person.getName=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; male=Male(person,&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(male.name);&lt;span class=&quot;comment&quot;&gt;//John&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(male.getName())&lt;span class=&quot;comment&quot;&gt;//John&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(male.age);&lt;span class=&quot;comment&quot;&gt;//22&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(male.getAge());&lt;span class=&quot;comment&quot;&gt;//22&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;寄生式继承与寄生构造函数和工厂模式类似，即创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再像真是它做了所有工作一样的返回对象。这种继承方式新对象与现有对象共享现有对象的所有属性和方法。改变先有对象的属性的值，新对象对应属性的值也将改变。原型式继承和寄生式继承，都不能实现函数的复用。为了解决这一问题，出现了寄生组合式继承。&lt;/p&gt;
&lt;h3 id=&quot;⑥寄生组合式继承&quot;&gt;&lt;a href=&quot;#⑥寄生组合式继承&quot; class=&quot;headerlink&quot; title=&quot;⑥寄生组合式继承&quot;&gt;&lt;/a&gt;⑥寄生组合式继承&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inheritPrototype&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;subType,superType&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prototype=&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(superType.prototype);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    prototype.constructor=subType;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    subType.prototype=prototype;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name=name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Person.prototype.getName=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Male&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Person.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age=age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;inheritPrototype(Male,Person);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Male.prototype.getAge=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; maleA=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Male(&lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maleA.name);&lt;span class=&quot;comment&quot;&gt;//A&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maleA.getName())&lt;span class=&quot;comment&quot;&gt;//A&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maleA.age);&lt;span class=&quot;comment&quot;&gt;//22&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maleA.getAge());&lt;span class=&quot;comment&quot;&gt;//22&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;寄生组合式继承，即通过借用构造函数来继承属性，通过原型链的混成形式来继承方法，其背后的基本思路是：不必为了指定子类型的原型而调用父类型的构造函数，我们所需要的无非就是父类型的原型的一个副本而已。本质上，就是使用寄生式继承来继承父类型的原型，然后再将结果指定给子类型的原型。&lt;/p&gt;
&lt;h2 id=&quot;原型模式-Object-create-与-prototype&quot;&gt;&lt;a href=&quot;#原型模式-Object-create-与-prototype&quot; class=&quot;headerlink&quot; title=&quot;原型模式 : Object.create 与 prototype&quot;&gt;&lt;/a&gt;原型模式 : Object.create 与 prototype&lt;/h2&gt;&lt;h3 id=&quot;原型模式说明&quot;&gt;&lt;a href=&quot;#原型模式说明&quot; class=&quot;headerlink&quot; title=&quot;原型模式说明&quot;&gt;&lt;/a&gt;原型模式说明&lt;/h3&gt;&lt;p&gt;说明：使用原型实例来 拷贝 创建新的可定制的对象；新建的对象，不需要知道原对象创建的具体过程；&lt;/p&gt;
&lt;p&gt;过程：Prototype =&amp;gt; new ProtoExam =&amp;gt; clone to new Object;&lt;/p&gt;
&lt;p&gt;使用相关代码:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Prototype&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.sex = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Prototype.prototype.userInfo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;个人信息, 姓名: &#39;&lt;/span&gt;+&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name+&lt;span class=&quot;string&quot;&gt;&#39;, 年龄: &#39;&lt;/span&gt;+&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age+&lt;span class=&quot;string&quot;&gt;&#39;, 性别:&#39;&lt;/span&gt;+&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.sex+&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;br /&amp;gt;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在需要两个或以上的个人信息内容:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; proto = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Prototype();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person1 = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(proto);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person1.name = &lt;span class=&quot;string&quot;&gt;&#39;小明&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person1.sex = &lt;span class=&quot;string&quot;&gt;&#39;男&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person1.age = &lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person1.userInfo(); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person2 = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(proto);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person2.name = &lt;span class=&quot;string&quot;&gt;&#39;小华&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person2.sex = &lt;span class=&quot;string&quot;&gt;&#39;女&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person2.age = &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person2.userInfo();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出返回:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;个人信息, 姓名: 小明, 年龄: 35, 性别: 男&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;个人信息, 姓名: 小华, 年龄: 33, 性别: 女&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原型模式，一般用于 抽象结构复杂，但内容组成差不多，抽象内容可定制，新创建只需在原创建对象上稍微修改即可达到需求的情况；&lt;/p&gt;
&lt;h3 id=&quot;Object-create-使用说明&quot;&gt;&lt;a href=&quot;#Object-create-使用说明&quot; class=&quot;headerlink&quot; title=&quot;Object.create 使用说明&quot;&gt;&lt;/a&gt;Object.create 使用说明&lt;/h3&gt;&lt;p&gt;1&amp;gt;. 定义: 创建一个可指定原型对象的并可以包含可选自定义属性的对象；&lt;/p&gt;
&lt;p&gt;2&amp;gt; Object.create(proto [, properties]);  可选，用于配置新对象的属性;&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt; proto: 要创建新对象的 原型，必须，可为 &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;; 这个 proto 要是已经创建的[&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;过]，或 对象.prototype 才有价值;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt; properties: 可选，结构为:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     propField: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       value: &lt;span class=&quot;string&quot;&gt;&#39;val&#39;&lt;/span&gt;|&amp;#123;&amp;#125;|&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       writable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;|&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       enumerable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;|&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       configurable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;|&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(value)&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;自定的属性有以下的四种本置属性：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;value: 自定义属性值;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;writable: 该项值是否可编辑，默认为 &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, 当为 &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; 时，obj.prodField 可赋值；否则只读;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;enumerable: 可枚举; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;confirurable: 可配置;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;还可以包含 &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; 访问器方法；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;其中，[&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;] 与 value 和 writable 不能同时出现；&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;创建原型对象类:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ProtoClass&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a = &lt;span class=&quot;string&quot;&gt;&#39;ProtoClass&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.c = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.b = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建原型方法:&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ProtoClass.prototype.aMethod = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;//this.a;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;//this.b();&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　 &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;以 ProtoClass.prototype 创建一个对象;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; obj1 = Object.create(ProtoClass&lt;span class=&quot;selector-class&quot;&gt;.prototype&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    foo:&amp;#123;value: &lt;span class=&quot;string&quot;&gt;&#39;obj1&#39;&lt;/span&gt;, writable: true&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;obj1 就具有 ProtoClass 原型方法 aMethod 的方法;&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;obj1&lt;span class=&quot;selector-class&quot;&gt;.aMethod&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//就会输出 undefined 方法可访问，ProtoClass 成员无法访问&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是这种方法执行不到 ProtoClass 下 a, b, c 的成员属性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用 实例化的 ProtoClass 做原型:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; proto = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ProtoClass();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj2 = Object.create(proto, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    foo:&amp;#123;&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;obj2&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样创建的 obj2 就具有 ProtoClass 的所有的成员属性 a, b, c 以及 aMethod 原型方法; 并添加了一个 foo 只读 数据属性；&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;obj2&lt;span class=&quot;selector-class&quot;&gt;.a&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//ProtoClass&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;obj2&lt;span class=&quot;selector-class&quot;&gt;.c&lt;/span&gt;: &lt;span class=&quot;comment&quot;&gt;//[Object]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;obj2&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.b&lt;/span&gt;(); &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;obj2&lt;span class=&quot;selector-class&quot;&gt;.aMethod&lt;/span&gt;(); &lt;span class=&quot;comment&quot;&gt;//ProtoClass&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;obj2&lt;span class=&quot;selector-class&quot;&gt;.foo&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//obj2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;子类继承:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SubClass&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SubClass.prototype = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(ProtoClass.prototype ,&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  foo:&amp;#123;value: &lt;span class=&quot;string&quot;&gt;&#39;subclass&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SubClass.prototype.subMethod = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a || &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.foo;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种方法可以继承 到 ProtoClass 的 aMethod 方法，执行;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; func = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubClass();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func.aMethod() ;&lt;span class=&quot;comment&quot;&gt;//undefined,读不到 ProtoClass 的成员属性,a,b,c&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func.subMethod();&lt;span class=&quot;comment&quot;&gt;//subclass&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要让 SubClass 能读取到 ProtoClass 的成员属性，SubClass 要改下:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SubClass&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ProtoClass.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//其他代码;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种方法就可以获取 ProtoClass 的成员属性及原型方法;:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; func = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubClass();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func.aMethod() ;&lt;span class=&quot;comment&quot;&gt;//ProtoClass&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func.subMethod();&lt;span class=&quot;comment&quot;&gt;//ProtoClass&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有一种方法，就是使用 实例化的 ProtoClass 对象，做为 SubClass 的原型;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; proto = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ProtoClass();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SubClass&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SubClass.prototype = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(proto, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    foo:&amp;#123;value: &lt;span class=&quot;string&quot;&gt;&#39;subclass&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样 SubClass 实例化后，就可以获取到 ProtoClass 所有的属性及原型方法，以及创建一个只读数据属性 foo;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; func = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubClass();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func.foo; &lt;span class=&quot;comment&quot;&gt;//subclass&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func.a; &lt;span class=&quot;comment&quot;&gt;//ProtoClass&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func.b(); &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func.c; &lt;span class=&quot;comment&quot;&gt;//[Object]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func.aMethod(); &lt;span class=&quot;comment&quot;&gt;//ProtoClass&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;另外的创建继承方法，跟 Object.create 使用 实例化的ProtoClass 做原型 效果一样:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SubClass&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.foo = &lt;span class=&quot;string&quot;&gt;&#39;subclass&#39;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//不过这边可读写&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SubClass.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ProtoClass();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Object-create-相关说明&quot;&gt;&lt;a href=&quot;#Object-create-相关说明&quot; class=&quot;headerlink&quot; title=&quot;Object.create 相关说明&quot;&gt;&lt;/a&gt;Object.create 相关说明&lt;/h3&gt;&lt;p&gt;Object.create 用于创建一个新的对象，当为 Object 时 prototype 为 null, 作用与 new Object(); 或 {} 一致;&lt;/p&gt;
&lt;p&gt;当为 function 时，作用与 new FunctionName 一样;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1 Object&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//等同于&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o2 = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(&amp;#123;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//两者 constructor 一样;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//-----------------------------------------&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a = &lt;span class=&quot;string&quot;&gt;&#39;func&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func.prototype.method = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; newfunc = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; func();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//等同于[效果一样]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; newfunc2 = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype&lt;span class=&quot;comment&quot;&gt;/*Function.prototype||function()&amp;#123;&amp;#125;*/&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   a: &amp;#123;value:&lt;span class=&quot;string&quot;&gt;&#39;func&#39;&lt;/span&gt;, writable:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   method: &amp;#123;value: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a;&amp;#125; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是 newfunc 与 newfunc2 在创建它们的对象的函数引用是不一样的.&lt;/p&gt;
&lt;p&gt;newfunc 为 function func() {…}，newfunc2 为 function Function { Native }&lt;/p&gt;
&lt;p&gt;Object.create(proto[, propertiesField]):&lt;/p&gt;
&lt;p&gt;proto 说明，该值为必须，可以为 null, 如果没设定，将会抛出异常;&lt;/p&gt;
&lt;p&gt;proto 为非 null, 即为已 实例化的值，即已经 new 过的值；javaScript 中的 对象大多有 constructor 属性，这个属性说明 此对象是通过哪个函数实例化后的对象；&lt;/p&gt;
&lt;p&gt;propertiesField 为可选项，设定新创建对象可能需要的成员属性或方法；&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;一般只使用&lt;u&gt;第三种&lt;/u&gt;&lt;/strong&gt;—&lt;strong&gt;组合式继承&lt;/strong&gt;是将原型链式继承和构造函数式继承组合在一起使用，从而发挥两者的长处。Object.create 用于创建一个新的对象，当为 Object 时 prototype 为 null, 作用与 new Object(); 或 {} 一致;当为 function 时，作用与 new FunctionName 一样.&lt;/p&gt;
    
    </summary>
    
    
      <category term="JS" scheme="http://hangweiping.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>前端要知道的知识点</title>
    <link href="http://hangweiping.github.io/2016/07/05/%E5%89%8D%E7%AB%AF%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://hangweiping.github.io/2016/07/05/前端要知道的知识点/</id>
    <published>2016-07-05T10:13:58.000Z</published>
    <updated>2016-08-21T11:31:59.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;../images/HTML常用标签.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1、HTML-HTML5基础：&quot;&gt;&lt;a href=&quot;#1、HTML-HTML5基础：&quot; class=&quot;headerlink&quot; title=&quot;1、HTML/HTML5基础：&quot;&gt;&lt;/a&gt;1、HTML/HTML5基础：&lt;/h2&gt;&lt;p&gt;&lt;code&gt;1.0、&lt;/code&gt;语义化&lt;code&gt;H5&lt;/code&gt;标签&lt;br&gt;&lt;code&gt;1.1&lt;/code&gt;、H5引进了一些新的标签，特别注意&lt;code&gt;article、header、footer、aside、nav&lt;/code&gt;等，注意&lt;code&gt;HTML&lt;/code&gt;的标题结构&lt;br&gt;&lt;code&gt;1.2、&lt;/code&gt;理解浏览器解析&lt;code&gt;HTML&lt;/code&gt;的过程，理解&lt;code&gt;DOM&lt;/code&gt;的树形结构，及相应&lt;code&gt;API&lt;/code&gt;&lt;br&gt;&lt;code&gt;1.3、&lt;/code&gt;理解&lt;code&gt;HTML&lt;/code&gt;标签在各个浏览器上的默认样式（代理样式），理解CSS中的重置样式表的概念&lt;br&gt;&lt;code&gt;1.4、&lt;/code&gt;理解&lt;code&gt;Canvas、SVG、video&lt;/code&gt;等功能性标签&lt;br&gt;&lt;code&gt;1.5&lt;/code&gt;、理解&lt;code&gt;form、iframe&lt;/code&gt;标签，理解文件提交过程&lt;br&gt;推荐书籍：&lt;/p&gt;
&lt;p&gt;推荐书籍：&lt;br&gt;A、《HTML5秘籍》&lt;/p&gt;
&lt;h2 id=&quot;2、高健壮性CSS&quot;&gt;&lt;a href=&quot;#2、高健壮性CSS&quot; class=&quot;headerlink&quot; title=&quot;2、高健壮性CSS&quot;&gt;&lt;/a&gt;2、高健壮性&lt;code&gt;CSS&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;2.1、&lt;/code&gt;学习基础知识，包括大部分常用属性、选择器的用法，要对大多数标签有个基础概念,在日常使用的基础上，尝试学习浏览器兼容性问题，要知道兼容性的主要问题及解决方法&lt;br&gt;&lt;code&gt;2.2、&lt;/code&gt;深入理解盒子模型，区分块级元素、行内元素，有几个比较重要的属性：&lt;code&gt;display、float、position&lt;/code&gt;，一定要弄清楚区分盒子、行内盒子的概念另外可以考虑学一些预编译语言：&lt;code&gt;sass、less&lt;/code&gt;，都很简单&lt;br&gt;&lt;code&gt;2.3、&lt;/code&gt;学习常用框架，可以使用&lt;code&gt;bootstrap&lt;/code&gt;构建项目&lt;br&gt;&lt;code&gt;2.4、&lt;/code&gt;学习框架的代码组织方式包括：&lt;code&gt;12&lt;/code&gt;格栅系统、组件化、组件的风格化等&lt;br&gt;&lt;code&gt;2.5、&lt;/code&gt;学习&lt;code&gt;CSS3&lt;/code&gt;的新功能，特别是动画效果、选择器&lt;br&gt;&lt;code&gt;2.6、&lt;/code&gt;认真学习一些&lt;code&gt;CSS&lt;/code&gt;对象化思想，学习编写简洁性、高复用性、高健壮性的&lt;code&gt;CSS&lt;/code&gt;&lt;br&gt;&lt;code&gt;2.7、&lt;/code&gt;有空的话，可以看看所谓的扁平化设计，还有简洁性&lt;br&gt;&lt;code&gt;2.8、&lt;/code&gt;理解&lt;code&gt;CSSOM、render、reflow、CSS&lt;/code&gt;性能、&lt;code&gt;CSS&lt;/code&gt;阻塞概念&lt;br&gt;学习方法：&lt;br&gt;1、多看别人的代码，一些设计的不错的网站就是很好的学习素材，比如拉勾网&lt;br&gt;2、一定要学会使用grunt、gulp压缩CSS&lt;br&gt;3、display + position + float 可以组合出很复杂的效果，多想想盒子模型&lt;br&gt;4、尝试在不用float，且position不为absolute的情况下实现等高、等宽等布局&lt;/p&gt;
&lt;p&gt;推荐书籍：&lt;br&gt;1、《图灵程序设计丛书:HTML5与CSS3设计模式》&lt;br&gt;2、《Web开发技术丛书:深入理解Bootstrap》&lt;br&gt;3、《高流量网站CSS开发技术》&lt;br&gt;4、《CSS设计彻底研究》 这个一定要&lt;br&gt;5、《Web开发技术丛书:深入理解Bootstrap》&lt;br&gt;6、可以找一些专门讲SASS的书，但是我没找到&lt;br&gt;7、《CSS权威指南(第3版)》&lt;/p&gt;
&lt;h2 id=&quot;3、深入学习JS&quot;&gt;&lt;a href=&quot;#3、深入学习JS&quot; class=&quot;headerlink&quot; title=&quot;3、深入学习JS&quot;&gt;&lt;/a&gt;3、深入学习JS&lt;/h2&gt;&lt;p&gt;&lt;code&gt;3.1、&lt;/code&gt;重新学习JS语法，注意：表达式（特别是函数访问表达式）、语句、类型（包括类型判断)注意，这个时候主要倾向于“原生”JS哦，不要使用框架&lt;br&gt;&lt;code&gt;3.2、&lt;/code&gt;深入理解JS的“一级函数”、对象、类的概念,学会使用函数来构造类、闭包，学会用面向对象的方式组织代码&lt;br&gt;&lt;code&gt;3.3、&lt;/code&gt;深入理解JS的作用域、作用域链、this对象（在各种调用形式中，this的指向）理解函数的各种调用方法（call、apply、bind等）&lt;br&gt;&lt;code&gt;3.4、&lt;/code&gt;理解对象、数组的概念&lt;br&gt;理解对象的“[]”调用，理解对象是一种“特殊数组”&lt;br&gt;理解for语句的用法&lt;br&gt;深入理解JS中原始值、包装对象的概念（重要）&lt;br&gt;&lt;code&gt;3.5、&lt;/code&gt;学习一些常用框架的使用方法，包括：&lt;code&gt;JQUERY、underscore、EXTJS，&lt;/code&gt;加分点有：&lt;code&gt;vuejs、react,angularjs、ejs、jade&lt;/code&gt;&lt;br&gt;通过比较多个框架的使用方法，想清楚“JS语言极其灵活”这一事实&lt;br&gt;总结常见用法，提高学习速度&lt;br&gt;学习模块化开发（使用require.js、sea.js等）&lt;br&gt;&lt;code&gt;3.6、&lt;/code&gt;适当看一些著名框架的源码，比如jQuery（不建议看angularjs，太复杂了）&lt;br&gt;重要的是学习框架中代码的组织形式，即设计模式&lt;br&gt;&lt;code&gt;3.7、&lt;/code&gt;了解JS解释、运行过程，理解JS的单线程概念&lt;br&gt;深入理解JS事件、异步、阻塞概念&lt;br&gt;&lt;code&gt;3.8、&lt;/code&gt;理解浏览器组成部件，理解V8的概念&lt;br&gt;学习V8的解释-运行过程&lt;br&gt;在V8基础上，学会如何提高JS性能&lt;br&gt;学会使用chrome的profile进行内存泄露分析&lt;br&gt;学习方法：&lt;br&gt;1、提高对自己的要求，要有代码洁癖&lt;br&gt;2、适当的时候看看优秀框架的源码，特别是框架的架构模式、设计模式&lt;br&gt;3、多学学设计模式&lt;br&gt;4、学习原生JS、DOM、BOM、Ajax&lt;br&gt;推荐书籍：&lt;br&gt;1、《O’Reilly精品图书系列:​JavaScript权威指南(​第6版)》 必看&lt;br&gt;2、《JavaScript设计模式》&lt;br&gt;3、《WebKit技术内幕》&lt;br&gt;4、《JavaScript框架高级编​程:应用Prototype YUI Ext JS Dojo MooTools》&lt;br&gt;5、《用AngularJS开发下一代Web应用》&lt;br&gt;6、跨终端&lt;br&gt;6.1、理解混合APP的概念&lt;br&gt;6.2、理解网页在各类终端上的表现&lt;br&gt;6.3、理解网页与原生app的区同，重在约束&lt;br&gt;6.4、理解单页网站，特别要规避页面的内存泄露问题&lt;br&gt;6.5、入门nodejs，对其有个基础概念，知道它能做什么，缺点是什么&lt;br&gt;推荐书籍：&lt;br&gt;1、《单页Web应用:JavaScript从前端到后端 》&lt;br&gt;2、《Web 2.0界面设计模式》&lt;br&gt;3、《响应式Web设计:HTML5和​CSS3实战》&lt;br&gt;5、工具&lt;br&gt;学会使用grunt进行JS、CSS、HTML 压缩，特别是模块化js开发时候的压缩&lt;br&gt;会用PS进行切图、保存icon&lt;br&gt;入手sublime、webstorm&lt;br&gt;学会使用chrome调试面板，特别是：console、network、profile、element&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;进阶&lt;/strong&gt;：&lt;/p&gt;
&lt;h2 id=&quot;4、性能&quot;&gt;&lt;a href=&quot;#4、性能&quot; class=&quot;headerlink&quot; title=&quot;4、性能&quot;&gt;&lt;/a&gt;4、性能&lt;/h2&gt;&lt;p&gt;1.1、理解资源加载的过程&lt;br&gt;包括：TCP握手连接、HTTP请求报文、HTTP回复报文&lt;br&gt;1.2、理解资源加载的性能约束，包括：TCP连接限制、TCP慢启动&lt;br&gt;1.3、理解CSS文件、JS文件压缩，理解不同文件放在页面不同位置后对性能的影响&lt;br&gt;1.4、理解CDN加速&lt;br&gt;1.5、学会使用HTTP头控制资源缓存，理解cache-control、expire、max-age、ETag对缓存的影响&lt;br&gt;1.6、深入理解浏览器的render过程&lt;br&gt;推荐书籍：&lt;br&gt;1、《Web性能权威指南》&lt;br&gt;2、雅虎网站页面性能优化的34条黄金守则&lt;/p&gt;
&lt;h2 id=&quot;5、http及TCP协议族&quot;&gt;&lt;a href=&quot;#5、http及TCP协议族&quot; class=&quot;headerlink&quot; title=&quot;5、http及TCP协议族&quot;&gt;&lt;/a&gt;5、http及TCP协议族&lt;/h2&gt;&lt;p&gt;&lt;code&gt;2.1&lt;/code&gt;、学习http协议，理解http请求-响应模式&lt;br&gt;&lt;code&gt;2.2、&lt;/code&gt;理解http是应用层协议，它是构建在TCP/IP协议上的&lt;br&gt;&lt;code&gt;2.3、&lt;/code&gt;理解http报文（请求-响应报文）&lt;br&gt;&lt;code&gt;2.4、&lt;/code&gt;理解http代理、缓存、网关等概念，指定如何控制缓存&lt;br&gt;&lt;code&gt;2.5、&lt;/code&gt;理解http协议内容，包括：状态码、http头、长连接（http1.1）&lt;br&gt;&lt;code&gt;2.6、&lt;/code&gt;学习http服务器的工作模型，对静态文件、CGI、DHTML的处理流程有个大致概念&lt;/p&gt;
&lt;p&gt;推荐书籍：&lt;br&gt;1、《HTTP权威指南》&lt;br&gt;2、《TCP/IP详解》&lt;br&gt;3、《图解TCP/IP(第5版)》&lt;/p&gt;
&lt;h2 id=&quot;6、安全性&quot;&gt;&lt;a href=&quot;#6、安全性&quot; class=&quot;headerlink&quot; title=&quot;6、安全性&quot;&gt;&lt;/a&gt;6、安全性&lt;/h2&gt;&lt;p&gt;&lt;code&gt;XSS、SQL&lt;/code&gt;注入&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/HTML常用标签.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://hangweiping.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSS设计指南-读书笔记</title>
    <link href="http://hangweiping.github.io/2016/07/03/CSS%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://hangweiping.github.io/2016/07/03/CSS设计指南-读书笔记/</id>
    <published>2016-07-03T11:25:31.000Z</published>
    <updated>2016-08-21T11:12:31.000Z</updated>
    
    <content type="html">&lt;p&gt;只要能把本书读懂、吃透，自称“CSS老手”绝对没人敢说你吹牛皮。要是能将书中给出的建议和提示融会贯通地运用到自己的项目当中，那“CSS高手”这顶桂冠也将非你莫属！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;h3 id=&quot;1-2-HTML-文档剖析&quot;&gt;&lt;a href=&quot;#1-2-HTML-文档剖析&quot; class=&quot;headerlink&quot; title=&quot;1.2 HTML 文档剖析&quot;&gt;&lt;/a&gt;1.2 HTML 文档剖析&lt;/h3&gt;&lt;p&gt;作者在这节主要讲了一个 HTML 页面所需的最基本的文档结构如下：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 这里是网页内容 --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先 &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt; 是 HTML5 中新的文档类型声明语法，相比 HTML4 的冗长文档类型声明语法来说 HTML5 是大大的简化了。&lt;/p&gt;
&lt;h4 id=&quot;1-2-2-块级元素和行内元素&quot;&gt;&lt;a href=&quot;#1-2-2-块级元素和行内元素&quot; class=&quot;headerlink&quot; title=&quot;1.2.2 块级元素和行内元素&quot;&gt;&lt;/a&gt;1.2.2 块级元素和行内元素&lt;/h4&gt;&lt;p&gt;作者在这一节介绍了两个比较重要的概念————块级元素和行内元素，默认情况下块级元素会始终占居一行，而行内元素并不会。除了 table 元素的 display 属性比较特殊以外，基本上所有的 HTML 元素的 display 的属性值要么是 block，要么是 inline。作者的一个思想是，无论你想了解哪个 HTML 元素，第一个要问的问题就是：它是块级元素还是行内元素，然后在编写标记的时候预想到这个元素在初始状态下是如何定位的，这样才能进一步想好将来怎么用 CSS 重新定位它，因为块级元素和行内元素在定位上有很大的区别，后面的拓展会详细说明。&lt;/p&gt;
&lt;p&gt;块级元素盒子（一个很重要的概念————盒模型，后面会详细说明）会扩展到与父元素同宽，这也是为什么块级元素会占居一行的原因了，因为所有块级元素的父元素都是 body，而它的默认宽度就是浏览器的视口（viewport）大小，所以默认情况下块级元素的宽度也和浏览器的视口一样宽，这样以来，一个块级元素旁边也就没有空间来容纳另一个块级元素了。&lt;/p&gt;
&lt;p&gt;相比于块级元素会扩展到与父元素同宽，然而行内元素的行为却是恰恰相反，它会尽量的「收缩包裹」其内容（也是盒模型的概念），这也就是为什么几个行内元素会并排显示在一行直到它们排满一行才会另起一行，而每个块级元素会直接另起一行的原因了。&lt;/p&gt;
&lt;p&gt;拓展：&lt;/p&gt;
&lt;p&gt;作者在这一节中并没有对块级元素和行内元素的一些其他特性进行详细的解释，在这里笔者对它们的一些特性知识进行拓展。首先先列出一些常见的块级元素和行内元素：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!-- 常见的块级元素 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;form&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;table&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;header&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;aside&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;section&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;article&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;figure&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;figcaption&lt;/span&gt;, h1~&lt;span class=&quot;selector-tag&quot;&gt;h6&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;nav&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt;, pre, blockqoute, &lt;span class=&quot;selector-tag&quot;&gt;canvas&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;ol&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;ul&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;dl&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!-- 常见的行内元素 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;span&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;img&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;label&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt;, select, &lt;span class=&quot;selector-tag&quot;&gt;textarea&lt;/span&gt;, br, &lt;span class=&quot;selector-tag&quot;&gt;i&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;em&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;strong&lt;/span&gt;, small, &lt;span class=&quot;selector-tag&quot;&gt;button&lt;/span&gt;, sub, &lt;span class=&quot;selector-tag&quot;&gt;sup&lt;/span&gt;, code&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之前作者提到过无论你想了解哪个 HTML 元素，第一个要问的问题就是：它是块级元素还是行内元素，因为它们在盒模型上的表现有很大的不同，不过在了解它们的不同之前我们还得先知道另外一个概念————&lt;a href=&quot;http://www.w3.org/TR/html5/rendering.html#replaced-elements&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;替换元素&lt;/a&gt;和&lt;a href=&quot;http://www.w3.org/TR/html5/rendering.html#non-replaced-elements&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;非替换元素&lt;/a&gt;，其中替换元素就是指浏览器是根据元素的属性来判断具体要显示的内容的元素，比如 &lt;code&gt;img&lt;/code&gt; 标签，浏览器是根据其 &lt;code&gt;src&lt;/code&gt; 的属性值来读取这个元素所包含的内容的，常见的替换元素还有 &lt;code&gt;input&lt;/code&gt;、&lt;code&gt;textarea&lt;/code&gt;、 &lt;code&gt;select&lt;/code&gt;、 &lt;code&gt;object&lt;/code&gt;、 &lt;code&gt;iframe&lt;/code&gt; 和 &lt;code&gt;video&lt;/code&gt; 等等，这些元素都有一个共同的特点，就是浏览器并不直接显示其内容，而是通过其某个属性的值来显示具体的内容，比如浏览器会根据 &lt;code&gt;input&lt;/code&gt; 中的 &lt;code&gt;type&lt;/code&gt; 的属性值来判断到底应该显示单选按钮还是多选按钮亦或是文本输入框。而对于非替换元素，比如 &lt;code&gt;p&lt;/code&gt;、&lt;code&gt;label&lt;/code&gt; 元素等等，浏览器这是直接显示元素所包含的内容。看到这里你应该大概的知道了什么是替换元素和非替换元素了。&lt;/p&gt;
&lt;p&gt;对着两个概念有了大概的了解后就可以对 &lt;code&gt;block&lt;/code&gt; 和 &lt;code&gt;inline&lt;/code&gt; 在盒模型上的表现差异进行了解了，首先是 &lt;code&gt;margin&lt;/code&gt; ，&lt;a href=&quot;http://www.w3.org/TR/CSS2/box.html#margin-properties&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C&lt;/a&gt; 对其所支持了元素对象是这么定义的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Applies to: all elements except elements with table display types other than table-caption, table and inline-table&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;英语不是很好，没太明白这句话的意思，我的理解就是所有元素都支持 &lt;code&gt;margin&lt;/code&gt; 除了 &lt;code&gt;display&lt;/code&gt; 属性值为 &lt;code&gt;table-caption&lt;/code&gt; 和 &lt;code&gt;table-inline&lt;/code&gt;以外的所有表格显示类型比如 &lt;code&gt;table-row-group&lt;/code&gt;、 &lt;code&gt;table-cell&lt;/code&gt;、 &lt;code&gt;table-row&lt;/code&gt; 和 &lt;code&gt;table-header-group&lt;/code&gt;等等,但是为了验证我的理解，我发先 &lt;code&gt;display&lt;/code&gt; 属性值为 &lt;code&gt;table&lt;/code&gt; 的元素也支持，可能是我对原文标准的理解有误。但还有一个要特别注意的是 &lt;code&gt;margin-top&lt;/code&gt; 和 &lt;code&gt;margin-bottom&lt;/code&gt;两个属性比较特殊，它们对非替换行内元素没有效果，下面是 W3C 上对于 &lt;code&gt;margin-top&lt;/code&gt; 和 &lt;code&gt;margin-bottom&lt;/code&gt; 支持对象的介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Applies to: all elements except elements with table display types other than table-caption, table and inline-table&lt;/p&gt;
&lt;p&gt;These properties have no effect on non-replaced inline elements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前面一句和之前对 &lt;code&gt;margin&lt;/code&gt; 的描述是一样的，这毫无疑问，下面这句话的意思是这些（ &lt;code&gt;margin-top&lt;/code&gt; 和 &lt;code&gt;margin-bottom&lt;/code&gt; ）属性对非替换行内元素没有效果比如 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;span&lt;/code&gt;，注意这里是&lt;strong&gt;非替换行内元素&lt;/strong&gt;而不单单是非替换元素或者是行内元素。比如 &lt;code&gt;img&lt;/code&gt; 就是一个行内元素， &lt;code&gt;margin-top&lt;/code&gt; 和 &lt;code&gt;margin-bottom&lt;/code&gt; 对它是有效果的，因为它是一个替换元素而不是非替换元素，所以对于「 &lt;code&gt;margin-top&lt;/code&gt; 和 &lt;code&gt;margin-bottom&lt;/code&gt; 对行内元素没有效果」这种说法是不对的。&lt;/p&gt;
&lt;p&gt;而对于 &lt;code&gt;padding&lt;/code&gt; 的支持对象，W3C 是这么描述的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;all elements except table-row-group, table-header-group, table-footer-group, table-row, table-column-group and table-column&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面这句话的意思是除了表格显示类型为 &lt;code&gt;table-row-group&lt;/code&gt;、 &lt;code&gt;table-header-group&lt;/code&gt;、 &lt;code&gt;table-footer-group&lt;/code&gt;、 &lt;code&gt;table-row&lt;/code&gt;, &lt;code&gt;table-column-group&lt;/code&gt; 和 &lt;code&gt;table-column&lt;/code&gt; 的元素不支持，其他所有的元素都支持。&lt;/p&gt;
&lt;p&gt;但这里有些特殊情况需要注意的是，对行内元素比如 &lt;code&gt;span&lt;/code&gt; 和 &lt;code&gt;img&lt;/code&gt; 设置左右内边距的效果是可见可，但是对行内元素设置上下内边距在有些情况下是不可见的，这些情况又要分为是否为替换元素和是否设置了背景色，为了能更直观的了解这些概念，我在这里做了个表格：&lt;/p&gt;
&lt;p&gt;padding-top 和 padding-bottom 对于行内元素是否可见：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;替换元素（e.g: input）&lt;/th&gt;
&lt;th&gt;非替换元素（e.g: span）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;设置背景色&lt;/td&gt;
&lt;td&gt;可见，影响行高，会撑开父元素&lt;/td&gt;
&lt;td&gt;可见，不影响行高，不会撑开父元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;没有设置背景色&lt;/td&gt;
&lt;td&gt;可见，影响行高，会撑开父元素&lt;/td&gt;
&lt;td&gt;不可见，不影响行高，不会撑开父元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;所以对于「 &lt;code&gt;padding-top&lt;/code&gt; 和 &lt;code&gt;padding-bottom&lt;/code&gt; 对行内元素没有效果」这种说法也是不对的，因为它们只是对于没有设置背景色的行内非替换元素效果不可见而已，而对于行内替换元素来说，不管是否设置了背景色都是有效果了，并且会把父元素撑开。&lt;/p&gt;
&lt;p&gt;说了这么多 &lt;code&gt;block&lt;/code&gt; 和 &lt;code&gt;inline-block&lt;/code&gt; 的区别，其实除了这两个常见的 &lt;code&gt;display&lt;/code&gt; 属性以外还有一个属性也是非常常见的，那就是 &lt;code&gt;inline-block&lt;/code&gt; ，没错，这就是前面两种情况的结合体，它既有 &lt;code&gt;block&lt;/code&gt; 的特性又有 &lt;code&gt;inline&lt;/code&gt; 的特性，比如把一个 &lt;code&gt;display&lt;/code&gt; 属性值为 &lt;code&gt;block&lt;/code&gt; 或者&lt;code&gt;inline&lt;/code&gt; 的元素属性值设置成 &lt;code&gt;inline-block&lt;/code&gt; 后，既可以用只对行内元素有效的 &lt;code&gt;text-align: center;&lt;/code&gt; 声明对其进行居中以外，还可以用&lt;code&gt;padding-top&lt;/code&gt; 和 &lt;code&gt;padding-bottom&lt;/code&gt; 对元素设置上下内边距而无需对其设置背景色，并且能把父元素撑开。&lt;/p&gt;
&lt;p&gt;对于块级元素和行内元素的拓展就暂时到这，如果有不明白或者不对的地方也欢迎指出。&lt;/p&gt;
&lt;h3 id=&quot;1-3-文档对象模型&quot;&gt;&lt;a href=&quot;#1-3-文档对象模型&quot; class=&quot;headerlink&quot; title=&quot;1.3 文档对象模型&quot;&gt;&lt;/a&gt;1.3 文档对象模型&lt;/h3&gt;&lt;p&gt;作者在这一小节只要介绍了 HTML 结构所对应的文档对象模型（DOM,Document Object Model）,DOM 是从浏览器的视角来观察页面中的元素以及每个元素的属性，由此可以得出这些元素的一个家族树。通过 DOM 可以很清晰的看出文档中每个元素之间的关系。比如下面的 HTML 代码的 DOM 的家族树就如下图：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;The Document Object Model&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;The page&#39;s HTML markup structure defines the DOM.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://justclear.github.io/images/posts/stylin-with-css-note/dom.png&quot; alt=&quot;DOM&quot;&gt;&lt;/p&gt;
&lt;p&gt;上面是一个非常简单的 DOM 结构图，由此你可以和直观的看出 HTML 文档流中每个元素之间的关系，比如到底是父子元素还是兄弟元素。&lt;/p&gt;
&lt;h3 id=&quot;1-4-小结&quot;&gt;&lt;a href=&quot;#1-4-小结&quot; class=&quot;headerlink&quot; title=&quot;1.4 小结&quot;&gt;&lt;/a&gt;1.4 小结&lt;/h3&gt;&lt;p&gt;作者在本章主要讲解了 HTML 标签是怎么为内容提供结构的，以及每个元素会在屏幕上生成什么样子的盒子，比如是行内盒子还是块级盒子，最后又简单的讲解了什么是 DOM ，它是浏览器中文档的模型，而 CSS 可以修改 DOM 中的元素样式属性，从而修改页面本身的布局和外观。&lt;/p&gt;
&lt;h2 id=&quot;第二章-CSS-工作原理&quot;&gt;&lt;a href=&quot;#第二章-CSS-工作原理&quot; class=&quot;headerlink&quot; title=&quot;第二章 CSS 工作原理&quot;&gt;&lt;/a&gt;第二章 CSS 工作原理&lt;/h2&gt;&lt;p&gt;在本章中作者主要讲解了 CSS 如何对 HTML 添加样式的，并且解释了层叠的工作机制比如当元素的同一个属性被多次设置样式后到底应该选择何种样式，这就要靠 CSS 的层叠机制来决定最终应用哪种样式了。&lt;/p&gt;
&lt;p&gt;每个 HTML 元素都有一组样式属性，这些属性涉及元素在文档流中显示时的不同方面，比如在文档流中的位置、边框、背景、颜色等等。CSS 就是一种先选择 HTML 元素，然后设定选中元素 CSS 属性的机制。CSS 选择符和要应用的样式构成一条 CSS 规则。&lt;/p&gt;
&lt;h3 id=&quot;2-2-上下文选择器&quot;&gt;&lt;a href=&quot;#2-2-上下文选择器&quot; class=&quot;headerlink&quot; title=&quot;2.2 上下文选择器&quot;&gt;&lt;/a&gt;2.2 上下文选择器&lt;/h3&gt;&lt;p&gt;上下文选择器的格式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;标签&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 标签&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ｛ 声明｝&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中标签2就是我们要选择的目标，而且只有在标签1是标签2的祖先元素（不一定是父级元素）的情况下才会被选中。上下文选择器严格来讲应该叫「后代组合式选择器（Descendant Comninator Selector）」。&lt;/p&gt;
&lt;p&gt;还有一点要注意的是，上下文选择器以空格作为分隔符，而分组选择器则以逗号作为分隔符，不要弄混。&lt;/p&gt;
&lt;h3 id=&quot;2-3-特殊的上下文选择器&quot;&gt;&lt;a href=&quot;#2-3-特殊的上下文选择器&quot; class=&quot;headerlink&quot; title=&quot;2.3 特殊的上下文选择器&quot;&gt;&lt;/a&gt;2.3 特殊的上下文选择器&lt;/h3&gt;&lt;p&gt;前面一节作者介绍的上下文选择器是以某个祖先元素作为上下文的，只要目标元素在 DOM 结构「上游」存在这么一个祖先元素即可，无论这个祖先元素和目标元素隔了多少层级都没有关系，但有的时候我们需要比「某个祖先元素」更具体的上下文，这时候我们就可以使用一些特殊的选择器了，比如自选择器 &lt;code&gt;&amp;gt;&lt;/code&gt;、 紧邻兄弟选择器 &lt;code&gt;+&lt;/code&gt;、一般兄弟选择器 &lt;code&gt;~&lt;/code&gt; 和通用选择器 &lt;code&gt;*&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;2-3-1-子选择器-gt&quot;&gt;&lt;a href=&quot;#2-3-1-子选择器-gt&quot; class=&quot;headerlink&quot; title=&quot;2.3.1 子选择器 &amp;gt;&quot;&gt;&lt;/a&gt;2.3.1 子选择器 &amp;gt;&lt;/h4&gt;&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;标签&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;gt; 标签&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的标签2必须是标签1的子元素，也就是说标签1必须是标签2的父元素，而不能是标签2的任何其他祖先元素。&lt;/p&gt;
&lt;h4 id=&quot;2-3-2-紧邻兄弟选择器&quot;&gt;&lt;a href=&quot;#2-3-2-紧邻兄弟选择器&quot; class=&quot;headerlink&quot; title=&quot;2.3.2 紧邻兄弟选择器 +&quot;&gt;&lt;/a&gt;2.3.2 紧邻兄弟选择器 +&lt;/h4&gt;&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;标签&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + 标签&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里标签2必须紧跟在兄弟标签1的后面，否则无效。&lt;/p&gt;
&lt;h4 id=&quot;2-3-3-一般兄弟选择器&quot;&gt;&lt;a href=&quot;#2-3-3-一般兄弟选择器&quot; class=&quot;headerlink&quot; title=&quot;2.3.3 一般兄弟选择器 ~&quot;&gt;&lt;/a&gt;2.3.3 一般兄弟选择器 ~&lt;/h4&gt;&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;标签&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ~ 标签&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里标签2必须跟（不一定要紧跟，只需在标签1的后面即可）在其兄弟标签1后面。&lt;/p&gt;
&lt;h4 id=&quot;2-3-4-通用选择器&quot;&gt;&lt;a href=&quot;#2-3-4-通用选择器&quot; class=&quot;headerlink&quot; title=&quot;2.3.4 通用选择器 *&quot;&gt;&lt;/a&gt;2.3.4 通用选择器 *&lt;/h4&gt;&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通用选择器 &lt;code&gt;*&lt;/code&gt; 是一个是一个通配符，代表文档流中的任意元素，不过通用选择器 &lt;code&gt;*&lt;/code&gt; 通常会搭配一些其他选择器来使用，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;section&lt;/span&gt; &amp;gt; *&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代表 &lt;code&gt;section&lt;/code&gt; 的所有子元素，不过一般情况下很少通过通配符来选择某个元素下的所有子元素，因为这涉及到浏览器性能问题，它会影响网页的渲染时间，我们写的时候是从左到右写的，但是浏览器渲染却是从右到左的，就上面这段代码来说，浏览器会先遍历所有的元素，然后在找出哪些元素的父元素是 &lt;code&gt;section&lt;/code&gt;，另外举一个例子，有选择器：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;selector-id&quot;&gt;#main&lt;/span&gt; &amp;gt; &lt;span class=&quot;selector-class&quot;&gt;.article&lt;/span&gt; &amp;#123;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;浏览器在渲染时，先把所有类中包含 &lt;code&gt;article&lt;/code&gt; 的元素取出来组成一个集合，然后对每一个集合中的元素进行遍历，如果元素的父元素的 &lt;code&gt;id&lt;/code&gt;不为 &lt;code&gt;main&lt;/code&gt; 则把元素从集合中删去。 再然后从这个元素的父元素开始向上找，没有找到一个标签名为 &lt;code&gt;div&lt;/code&gt; 并且类名中有 &lt;code&gt;container&lt;/code&gt; 的元素，就把元素从集合中删去，直到匹配所有的条件，所以在能不使用通配符的情况就尽量不要使用它。&lt;/p&gt;
&lt;h3 id=&quot;2-4-ID-和类选择器&quot;&gt;&lt;a href=&quot;#2-4-ID-和类选择器&quot; class=&quot;headerlink&quot; title=&quot;2.4 ID 和类选择器&quot;&gt;&lt;/a&gt;2.4 ID 和类选择器&lt;/h3&gt;&lt;p&gt;作者在这一节介绍了 &lt;code&gt;id&lt;/code&gt; 和 &lt;code&gt;class&lt;/code&gt; 选择器，为我们选择元素提供了另一种手段，利用它们可以不考虑元素在文档流中的层次结构，只要在元素中添加了 &lt;code&gt;id&lt;/code&gt; 和 &lt;code&gt;class&lt;/code&gt; 属性和值，我们就可以通过它们的值来找到目标元素。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以给 &lt;code&gt;id&lt;/code&gt; 和 &lt;code&gt;class&lt;/code&gt; 属性设定任何值，但不能以数字或者特殊符号开头。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;2-4-3-什么时候用-id，什么时候用-class&quot;&gt;&lt;a href=&quot;#2-4-3-什么时候用-id，什么时候用-class&quot; class=&quot;headerlink&quot; title=&quot;2.4.3 什么时候用 id，什么时候用 class&quot;&gt;&lt;/a&gt;2.4.3 什么时候用 id，什么时候用 class&lt;/h4&gt;&lt;p&gt;&lt;code&gt;id&lt;/code&gt; 的用途是在页面中唯一地标识元素，所以每个页面中每一个 &lt;code&gt;id&lt;/code&gt; 属性值都是独一无二的。而 &lt;code&gt;class&lt;/code&gt; 的目的是为了标识一组具有相同特征的元素，也就是说一个页面中可以出现多个相同的类。&lt;/p&gt;
&lt;p&gt;对于什么时候用 &lt;code&gt;id&lt;/code&gt; 这个问题作者的观点是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每一个顶级区域都应该添加一个 &lt;code&gt;id&lt;/code&gt;，从而得到非常明确的上下文关系，以便编写 CSS 时只选择嵌套在相应区域内的标签。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于什么时候使用 &lt;code&gt;class&lt;/code&gt;，由于 &lt;code&gt;class&lt;/code&gt; 的目的是为了标识一组具有相同特征的元素，所以如果当页面中有一组元素具有某种相同的特征，就应该毫不犹豫的时候 &lt;code&gt;class&lt;/code&gt; 了。&lt;/p&gt;
&lt;p&gt;但是这里也应该注意不要乱用类，避免造成类泛滥，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;boy&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Alan&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;girl&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Andrew&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;boy&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Angela&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;boy&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Angus&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;girl&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Anne&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;girl&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Annette&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面这个例子就是一个典型的类泛滥。&lt;/p&gt;
&lt;h4 id=&quot;2-4-4-id-和-class-的小结&quot;&gt;&lt;a href=&quot;#2-4-4-id-和-class-的小结&quot; class=&quot;headerlink&quot; title=&quot;2.4.4 id 和 class 的小结&quot;&gt;&lt;/a&gt;2.4.4 id 和 class 的小结&lt;/h4&gt;&lt;p&gt;对于什么时候用 id 和什么时候用 class，我想每个人都有不同的看法，这里写说一下笔者的观点，笔者认为能不实用 &lt;code&gt;id&lt;/code&gt; 就尽量不使用 &lt;code&gt;id&lt;/code&gt;，实际情况是笔者基本不在 CSS 中使用 &lt;code&gt;id&lt;/code&gt;，因为在 CSS 的层叠机制中，&lt;code&gt;id&lt;/code&gt; 的权重是 &lt;code&gt;class&lt;/code&gt; 的10倍，其实很多情况下对某个元素设置某个不一样的样式来覆盖之前的样式并没有效果就是因为之前的样式权重太高，而为了达到效果就要编写权重更高的选择器，所以只有在某个元素需要被 JavaScript 找到的时候才会在某个元素中添加 &lt;code&gt;id&lt;/code&gt; ，以便可以通过 &lt;code&gt;document.getElementById()&lt;/code&gt; 方法来快速获取需要的元素。&lt;/p&gt;
&lt;h3 id=&quot;2-5-属性选择器&quot;&gt;&lt;a href=&quot;#2-5-属性选择器&quot; class=&quot;headerlink&quot; title=&quot;2.5 属性选择器&quot;&gt;&lt;/a&gt;2.5 属性选择器&lt;/h3&gt;&lt;p&gt;属性选择器包括属性名选择器和属性值选择器，它们是通过元素的属性和值来获取元素的：&lt;/p&gt;
&lt;figure class=&quot;highlight prolog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;标签名[属性名]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;标签名[属性名=&lt;span class=&quot;string&quot;&gt;&quot;属性值&quot;&lt;/span&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[title]&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; solid blue;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[target=&quot;_blank&quot;]&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(_blank.png);&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面第一段代码意思是，如果某个 &lt;code&gt;img&lt;/code&gt; 标签带有 &lt;code&gt;title&lt;/code&gt; 这个属性，那么就为它添加一个宽度为 2px 的蓝色实线边框。第二段代码的意思是，如果某个 &lt;code&gt;a&lt;/code&gt; 标签带有 &lt;code&gt;target&lt;/code&gt; 这个属性，并且这个属性的值为 &lt;code&gt;_blank&lt;/code&gt; 那么就为这个元素添加一个背景图。&lt;/p&gt;
&lt;p&gt;拓展：&lt;/p&gt;
&lt;p&gt;其实除了以上两种属性选择器，还有其他几种属性选择器作者并没有列出来，这里这几种其他的属性选择器作一个简单的介绍：&lt;/p&gt;
&lt;figure class=&quot;highlight autohotkey&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;标签名[name^=&lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;]  让你匹配属性为 `name` 并且属性值以 `value` 开始的标签，如:&lt;span class=&quot;literal&quot;&gt;a&lt;/span&gt;[href^= &lt;span class=&quot;string&quot;&gt;&quot;http://&quot;&lt;/span&gt;]则匹配所有具有 `href` 属性并且属性值以 `http://` 开始的标签。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;标签名[name$=&lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;]  让你匹配属性为 `name` 并且属性值以 `value` 结束的标签，如:&lt;span class=&quot;literal&quot;&gt;a&lt;/span&gt;[href$=&lt;span class=&quot;string&quot;&gt;&quot;.com&quot;&lt;/span&gt;]则匹配所有具有 `href` 属性并且属性值以 `http://` 结束的标签。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;标签名[name*=&lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;]  让你匹配属性为 `name` 并且属性值包含 `value` 的标签，如:&lt;span class=&quot;literal&quot;&gt;a&lt;/span&gt;[href*= &lt;span class=&quot;string&quot;&gt;&quot;renren&quot;&lt;/span&gt;]则匹配所有具有 `href` 属性并且属性值包含 `http://` 的标签。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;标签名[name|=&lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;]  让你匹配属性为 `name` 或者以 `name-` 开始的标签，如:p[lang|= &lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;]则匹配具有 `lang` 属性的 `p` 标签，不管其属性值是 `en` 还是 `en-us` 。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;标签名[name~=&lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;]  让你匹配属性为 `name` 并且其属性值是具有多个空格分隔的值，其中一个值为 `value`，如有：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;literal&quot;&gt;a&lt;/span&gt; title=&lt;span class=&quot;string&quot;&gt;&quot;I&#39;m title for learn more&quot;&lt;/span&gt;&amp;gt;Learn More&amp;lt;/&lt;span class=&quot;literal&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;就可以用 p[title~=&lt;span class=&quot;string&quot;&gt;&quot;learn&quot;&lt;/span&gt;] 来选择这个元素。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你应该注意到了这些属性选择器与前面两种属性选择器之间的差别了，通过这些属性选择器我们可以很容易的做出许多意想不到的效果，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[href$=&quot;.pdf&quot;]&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(pdf.png);&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;比如上面这段代码就为链接是 pdf 文档连接的 &lt;code&gt;a&lt;/code&gt; 标签添加一个表示这个链接是 pdf 文档的图片，而其他 &lt;code&gt;href&lt;/code&gt; 属性的值不是以 &lt;code&gt;.pdf&lt;/code&gt; 结尾的&lt;code&gt;a&lt;/code&gt; 标签就不会应用这条样式声明，让用户很清楚的判断这是一个什么类型的链接。&lt;/p&gt;
&lt;h3 id=&quot;2-6-伪类&quot;&gt;&lt;a href=&quot;#2-6-伪类&quot; class=&quot;headerlink&quot; title=&quot;2.6 伪类&quot;&gt;&lt;/a&gt;2.6 伪类&lt;/h3&gt;&lt;p&gt;伪类这个叫法源自它们与类相似，但实际上并没有类会附加到标记中的标签上，伪类分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UI（User Interface，用户界面）伪类：会在 HTML 元素处于某个状态时（比如鼠标指针位于连接上），为该元素应用 CSS 样式。&lt;/li&gt;
&lt;li&gt;结构化伪类：会在标记中纯在某种结构上的关系时（比如某个元素是一组元素的第一个或者最有一个元素），为相应的元素应用 CSS 样式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-6-1-UI伪类&quot;&gt;&lt;a href=&quot;#2-6-1-UI伪类&quot; class=&quot;headerlink&quot; title=&quot;2.6.1 UI伪类&quot;&gt;&lt;/a&gt;2.6.1 UI伪类&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;链接伪类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;link: 链接就在那儿等着用户点击。&lt;/li&gt;
&lt;li&gt;visited:用户此前点击过这个链接。&lt;/li&gt;
&lt;li&gt;hover:鼠标指针正悬停在连接上。&lt;/li&gt;
&lt;li&gt;active:链接正在i被点击（鼠标在元素上按下，还没有释放）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意以上几种链接伪类要按一定的顺序才有效果，为了方便记忆作者是这么建议的：”LoVe?HA!”，大写字母就是每个伪类的第一个字母，其实也可以这么记： “LoVe,HAte”，其实都差不多就是了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个冒号（:）表示伪类，两个冒号（::）表示 CSS3 新增的伪元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;:focus 伪类&lt;/p&gt;
&lt;p&gt;表单中的文本字段在用户单击它时会获得焦点，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:focus&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid blud;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码的意思就是当用户单击表单中的文本字段的时候，为该 &lt;code&gt;input&lt;/code&gt; 标签添加宽度为 1px 的蓝色实线边框，需要注意的是，伪类的冒号要紧跟着标签名，之间不能有空格，否则该声明无效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;:target 伪类&lt;/p&gt;
&lt;p&gt;如果用户点击一个指向页面中其他元素的链接，则哪个元素就是目标（target），可以用 &lt;code&gt;:target&lt;/code&gt; 伪类选中它，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#more-info&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;More Information&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;位于页面其他地方、&lt;code&gt;id&lt;/code&gt; 为 &lt;code&gt;more-info&lt;/code&gt; 的那个元素就是目标元素，该元素可能是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;h2 &lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;more=info&quot;&lt;/span&gt;&amp;gt;This &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; information you are looking &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;.&amp;lt;/h2&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么 CSS 规则如下：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#more-info&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:target&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#eee&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时会在用户点击链接转向 &lt;code&gt;id&lt;/code&gt; 为 &lt;code&gt;more-info&lt;/code&gt; 的元素时，该目标元素的背景就会变成浅灰色。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;2-6-2-结构化伪类&quot;&gt;&lt;a href=&quot;#2-6-2-结构化伪类&quot; class=&quot;headerlink&quot; title=&quot;2.6.2 结构化伪类&quot;&gt;&lt;/a&gt;2.6.2 结构化伪类&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;first-child 、 last-child 和 nth-child(n)&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;e:&lt;span class=&quot;keyword&quot;&gt;first&lt;/span&gt;-child&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;e:&lt;span class=&quot;keyword&quot;&gt;last&lt;/span&gt;-child&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;first-child&lt;/code&gt; 和 &lt;code&gt;last-child&lt;/code&gt; 分别代表一组同胞元素中的第一个元素和最后一个元素，而 &lt;code&gt;nth-child(n)&lt;/code&gt; 则代表一组同胞元素中的任何一个元素，其中 n 表示一个整数（也可以是 odd-奇数 或 even-偶数）或者也可以是一个算数表达式（2n + 1），例如：&lt;/p&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;ul&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;&lt;span class=&quot;built_in&quot;&gt;li&lt;/span&gt;&amp;gt;My Fast Pony&amp;lt;/&lt;span class=&quot;built_in&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;&lt;span class=&quot;built_in&quot;&gt;li&lt;/span&gt;&amp;gt;Steady Trotter&amp;lt;/&lt;span class=&quot;built_in&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;&lt;span class=&quot;built_in&quot;&gt;li&lt;/span&gt;&amp;gt;Slow Ol&#39; Nag&amp;lt;/&lt;span class=&quot;built_in&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ul &lt;span class=&quot;built_in&quot;&gt;li&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;first&lt;/span&gt;-child &amp;#123;&lt;span class=&quot;built_in&quot;&gt;color&lt;/span&gt;: black;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ul &lt;span class=&quot;built_in&quot;&gt;li&lt;/span&gt;:nth-child(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;span class=&quot;built_in&quot;&gt;color&lt;/span&gt;: red;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ul &lt;span class=&quot;built_in&quot;&gt;li&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;last&lt;/span&gt;-child &amp;#123;&lt;span class=&quot;built_in&quot;&gt;color&lt;/span&gt;: blue;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的 HTML 应用了上面的 CSS 规则后，无序列表的第一个元素字体颜色就会变成黑色，第二个元素变成红色，最后一个元素就变成蓝色。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;2-7-伪元素&quot;&gt;&lt;a href=&quot;#2-7-伪元素&quot; class=&quot;headerlink&quot; title=&quot;2.7 伪元素&quot;&gt;&lt;/a&gt;2.7 伪元素&lt;/h3&gt;&lt;p&gt;顾名思义，伪元素就是文档中若有实无的元素，下面是几个比较常用的伪元素。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;::first-letter 伪元素，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;::first-letter&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300%&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样 &lt;code&gt;p&lt;/code&gt; 标签的第一个字母大小就会变成原来的 3 倍了，而其他元素则不会。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;::first-line 伪元素：可以选中文本段落的第一行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;::before 和 ::after 伪元素&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;e::&lt;span class=&quot;keyword&quot;&gt;before&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;e::&lt;span class=&quot;keyword&quot;&gt;after&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可用在特定元素前面或后面添加特殊内容，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; class=&lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;&amp;lt;/p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.age&lt;/span&gt;::before &amp;#123; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Age: &quot;&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.age&lt;/span&gt;::after &amp;#123; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot; years&quot;&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里需要注意的是，对于 &lt;code&gt;::before&lt;/code&gt; 和 &lt;code&gt;::after&lt;/code&gt; 伪元素，其 &lt;code&gt;content&lt;/code&gt; 属性是必须的，还有就是搜索引擎不会取得伪元素的信息（因为它在文档流中并不存在），因此不要通过伪元素添加一些对搜索引擎来说是重要的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;拓展：&lt;/p&gt;
&lt;p&gt;其实伪元素前面冒号可以是两个也可以是一个，但是为了区别伪类，笔者建议大家还是使用两个冒号。还有一个要注意的是，比如通过&lt;code&gt;::before&lt;/code&gt; 和 &lt;code&gt;::after&lt;/code&gt; 伪元素为 &lt;code&gt;class&lt;/code&gt; 为 &lt;code&gt;pseudo-element&lt;/code&gt; 添加两个伪元素，则生成的两个伪元素分别处于 &lt;code&gt;pseudo-element&lt;/code&gt; 元素的内部，也就是说是 &lt;code&gt;pseudo-element&lt;/code&gt; 元素的子元素，并且分别位于 &lt;code&gt;pseudo-element&lt;/code&gt; 元素的内容的最前面和最后面，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; class=&lt;span class=&quot;string&quot;&gt;&quot;pseudo-element&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;p&amp;gt;Pseudo Element&amp;lt;/p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.pseudo-element&lt;/span&gt;::after,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.pseudo-element&lt;/span&gt;::before &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://justclear.github.io/images/posts/stylin-with-css-note/pseudo-element.png&quot; alt=&quot;Pseudo Element&quot;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，生成的两个伪元素分别处于 &lt;code&gt;pseudo-element&lt;/code&gt; 元素的内部，并且分别位于 &lt;code&gt;pseudo-element&lt;/code&gt; 元素的内容 &lt;code&gt;p&lt;/code&gt; 标签的前面和后面，而不是如下图所示的位于 &lt;code&gt;pseudo-element&lt;/code&gt; 元素外部的前面和后面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://justclear.github.io/images/posts/stylin-with-css-note/pseudo-element-2.png&quot; alt=&quot;Pseudo Element&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-9-层叠&quot;&gt;&lt;a href=&quot;#2-9-层叠&quot; class=&quot;headerlink&quot; title=&quot;2.9 层叠&quot;&gt;&lt;/a&gt;2.9 层叠&lt;/h3&gt;&lt;p&gt;层叠就是层叠样式表中的层叠，是一种样式在文档层次中逐层叠加的过程，目的是让浏览器面对某个标签特定属性值的多个来源确定最终使用哪个值。&lt;/p&gt;
&lt;p&gt;层叠是 CSS 的核心机制，理解了它才能以最经济的方式写出最容易改动的 CSS,让文档外观在达到设计要求的同时，也给用户留下一些空间，让他们能根据需要更改文档的显示效果。&lt;/p&gt;
&lt;h4 id=&quot;2-9-1-样式来源&quot;&gt;&lt;a href=&quot;#2-9-1-样式来源&quot; class=&quot;headerlink&quot; title=&quot;2.9.1 样式来源&quot;&gt;&lt;/a&gt;2.9.1 样式来源&lt;/h4&gt;&lt;p&gt;作者在这一节中介绍了样式的几种来源：&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt; 浏览器默认样式表&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt; 用户样式表&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt; 作者链接样式表&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt; 作者嵌入样式&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt; 作者行内样式&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;作者在书中是这么描述的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;浏览器会按照上面的顺序依次检查每个来源的样式，并在有定义的情况下，更新对每个标签属性值的设定，整个检查更新过程结束后，再将每个标签以最终设定的样式显示出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;2-9-4-计算特指度&quot;&gt;&lt;a href=&quot;#2-9-4-计算特指度&quot; class=&quot;headerlink&quot; title=&quot;2.9.4 计算特指度&quot;&gt;&lt;/a&gt;2.9.4 计算特指度&lt;/h4&gt;&lt;p&gt;作者在这一节主要介绍了特指度的计算方法，相比作者个计算方式，笔者个人还是比较喜欢自己之前的计算方式，虽然差不多，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight autohotkey&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 首先规定四个等级：&lt;span class=&quot;literal&quot;&gt;A&lt;/span&gt; - B - C - D&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;literal&quot;&gt;A&lt;/span&gt; 等级代表内联样式：例如 `style=&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;`，权值为：&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;. B 等级代表 ID 选择器：例如 `#main`，权值为：&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;. C 等级代表类、伪类和属性选择器： `.class` 和 `[title]`，权值为：&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;. D 等级代表元素（标签）名或者伪元素选择器：例如 `p` 和 `::after`，权值为：&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//计算完每个值后再将每个值加起来，哪个值大哪个值的权重就高。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;selector-id&quot;&gt;#main&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.class&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;[title]::after &amp;#123;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们先分析它由哪些选择器构成，上面这条规则有一个 &lt;code&gt;id&lt;/code&gt; 选择器（&lt;code&gt;#main&lt;/code&gt;），一个类选择器（&lt;code&gt;.class&lt;/code&gt;），一个属性选择器（&lt;code&gt;[title]&lt;/code&gt;）、一个伪元素选择器(&lt;code&gt;::after&lt;/code&gt;)和两个标签名选择器（&lt;code&gt;body&lt;/code&gt; 和 &lt;code&gt;a&lt;/code&gt;），所以它的权重就等于：&lt;/p&gt;
&lt;figure class=&quot;highlight basic&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;100 &lt;/span&gt;× &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; × &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; × &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有一点要注意的是，权重值 001(12) 与 0020 相比，任然是 0020 的权重更高，对于权重一样的情况，则后声明的样式更高。&lt;/p&gt;
&lt;h3 id=&quot;2-10-小结&quot;&gt;&lt;a href=&quot;#2-10-小结&quot; class=&quot;headerlink&quot; title=&quot;2.10 小结&quot;&gt;&lt;/a&gt;2.10 小结&lt;/h3&gt;&lt;p&gt;作者在本章介绍了 CSS 的一些规则，比如各种选择器的使用，层叠机制，还有权重的计算。&lt;/p&gt;
&lt;h2 id=&quot;第三章-定位元素&quot;&gt;&lt;a href=&quot;#第三章-定位元素&quot; class=&quot;headerlink&quot; title=&quot;第三章 定位元素&quot;&gt;&lt;/a&gt;第三章 定位元素&lt;/h2&gt;&lt;h3 id=&quot;3-1-理解盒模型&quot;&gt;&lt;a href=&quot;#3-1-理解盒模型&quot; class=&quot;headerlink&quot; title=&quot;3.1 理解盒模型&quot;&gt;&lt;/a&gt;3.1 理解盒模型&lt;/h3&gt;&lt;p&gt;其实 HTML 页面中每个元素其实都是一个「盒子」，默认情况下这些盒子的边框不可见，背景也是透明的，所以我们不能直接的看到页面中盒子的结构，但是我们可以借助一些 Web Developer 工具条可以方便地显示盒子的边框和背景，让我们能很直观的看到这些盒子的结构。&lt;/p&gt;
&lt;p&gt;每个盒子都有三组属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外边距(margin)： 可以设置盒子与相邻盒子之间的距离。&lt;/li&gt;
&lt;li&gt;边框(border)： 可以设置边框的宽度、样式和颜色。&lt;/li&gt;
&lt;li&gt;内边距(padding)：可以设置盒子内容区和边框之间的距离。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个盒子有四条边，所以这些属性也各有四个属性，分别是上(top)、右(right)、下(bottom)和左(left)，为了更直观的了解盒模型的结构，这里放上一张盒模型的结构图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://justclear.github.io/images/posts/stylin-with-css-note/2.1.png&quot; alt=&quot;盒模型&quot;&gt;&lt;/p&gt;
&lt;p&gt;尽管这三组属性共有 12 个属性值，但我们也可以对它们进行简写，这里以 &lt;code&gt;margin&lt;/code&gt; 为例：&lt;/p&gt;
&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-top&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-right&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;-botton:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;缩写后的代码如下:&lt;/p&gt;
&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;缩写的顺序是上 -&amp;gt; 右 -&amp;gt; 下 -&amp;gt; 左，顺时针的方向。相对的边的值相同，则可以省掉，代码如下:&lt;/p&gt;
&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;// 四个方向的边距相同，等同于margin:1px 1px 1px 1px;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;// 上下边距都为1px，左右边距均为2px，等同于margin:1px 2px 1px 2px&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3px&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;// 右边距和左边距相同，等同于margin:1px 2px 3px 2px;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3px&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;// 注意，这里虽然上下边距都为1px，但是这里不能缩写。&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-1-1-盒子的边框-border&quot;&gt;&lt;a href=&quot;#3-1-1-盒子的边框-border&quot; class=&quot;headerlink&quot; title=&quot;3.1.1 盒子的边框(border)&quot;&gt;&lt;/a&gt;3.1.1 盒子的边框(border)&lt;/h4&gt;&lt;p&gt;边框(border)有四个相关属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;宽度(border-width)：可以使用 thin、 medium 和 thick 等文本值，也可以使用&lt;strong&gt;除百分比和负值以外&lt;/strong&gt;的任何绝对值。&lt;/li&gt;
&lt;li&gt;样式(border-style)：有 none、 hidden、 dotted、 dashed、 solid、 double、 groove、 ridge、 inset 和 outset 等文本值。&lt;/li&gt;
&lt;li&gt;颜色(border-color)：可以使用任何颜色值，包括 rgb、 hsl、十六进制颜色值和颜色关键字。&lt;/li&gt;
&lt;li&gt;圆角(border-radius)：属于 CSS3 新增属性，可使用百分比、相对值和绝对值。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;CSS 推荐标准并没有明确规定 border-width 的几个文本值的确切宽度，所以实际宽度会因浏览器而异。&lt;/p&gt;
&lt;p&gt;border-radius 不影响盒子的定位。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;3-1-2-盒子的内边距-padding&quot;&gt;&lt;a href=&quot;#3-1-2-盒子的内边距-padding&quot; class=&quot;headerlink&quot; title=&quot;3.1.2 盒子的内边距(padding)&quot;&gt;&lt;/a&gt;3.1.2 盒子的内边距(padding)&lt;/h4&gt;&lt;p&gt;内边距是盒子内容区与盒子边框之间的距离。在没有设置内边距的情况下，内容紧挨着边框：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://justclear.github.io/images/posts/stylin-with-css-note/2.2.png&quot; alt=&quot;内边距&quot;&gt;&lt;/p&gt;
&lt;p&gt;设置内边距后，内容区与边框有一定的距离(padding 的大小)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://justclear.github.io/images/posts/stylin-with-css-note/2.3.png&quot; alt=&quot;内边距&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-1-3-盒子外边距-margin&quot;&gt;&lt;a href=&quot;#3-1-3-盒子外边距-margin&quot; class=&quot;headerlink&quot; title=&quot;3.1.3 盒子外边距(margin)&quot;&gt;&lt;/a&gt;3.1.3 盒子外边距(margin)&lt;/h4&gt;&lt;p&gt;与内边距和边框相比，外边距就要显得复杂的多了，首先是外边距叠加，&lt;strong&gt;垂直方向上的外边距会叠加&lt;/strong&gt;，例如有三个段落应用了如下规则：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;number&quot;&gt;#000&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;margin-top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;margin-bottom&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于第一段的下边距与第二段的上边距相邻，你可能会觉得它们两个盒子边框之间的外边距只和是 80px，但实际上是 50px，像这样上下外边距相遇时，它们会相互重叠，直到一个外边距碰到另一个盒子的边框。就上面例子而言，第二段较宽的上外边距会碰到第一段的边框，也就是说较宽的外边距决定两个盒子之间的距离。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://justclear.github.io/images/posts/stylin-with-css-note/2.4.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-1-5-外边距的单位&quot;&gt;&lt;a href=&quot;#3-1-5-外边距的单位&quot; class=&quot;headerlink&quot; title=&quot;3.1.5 外边距的单位&quot;&gt;&lt;/a&gt;3.1.5 外边距的单位&lt;/h4&gt;&lt;p&gt;在设置段落文本外边距时应该注意，为了避免因增大字号导致段落间外边距不变引起的整体不协调的问题，在设置段落的上下外边距是应该使用 &lt;code&gt;em&lt;/code&gt; 单位，这样当字体大小调整时，段落的上下外边距也会根据字体的大小来调整距离，这样页面的整体布局就会比较协调一致，而左右外边距则可以用 &lt;code&gt;px&lt;/code&gt; 绝对单位，确保左右外边距不会因字体大小的调整而发生改变，比如可以这么设置：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1em&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: .&lt;span class=&quot;number&quot;&gt;75em&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样段落垂直距离就会始终保持字体高度的四分之三的高度，水平外边距不会因字体的调整而发生改变了。&lt;/p&gt;
&lt;h3 id=&quot;3-2-盒子有多大&quot;&gt;&lt;a href=&quot;#3-2-盒子有多大&quot; class=&quot;headerlink&quot; title=&quot;3.2 盒子有多大&quot;&gt;&lt;/a&gt;3.2 盒子有多大&lt;/h3&gt;&lt;p&gt;作者在本章介绍了块级元素和行内元素的不同行为。&lt;/p&gt;
&lt;h4 id=&quot;3-2-1-没有宽度的盒子&quot;&gt;&lt;a href=&quot;#3-2-1-没有宽度的盒子&quot; class=&quot;headerlink&quot; title=&quot;3.2.1 没有宽度的盒子&quot;&gt;&lt;/a&gt;3.2.1 没有宽度的盒子&lt;/h4&gt;&lt;p&gt;作者在这一节中专门提到了一个 「没有宽度」的概念：没有显式地设置元素的 &lt;code&gt;width&lt;/code&gt; 属性。如果不设置块级元素的 &lt;code&gt;width&lt;/code&gt; 属性，那么这个属性的默认值就是 &lt;code&gt;auto&lt;/code&gt; ，结果就是会让元素的宽度扩展到与父元素同宽，对于块级元素和行内元素更具体的介绍请看笔者的上一篇文章&lt;a href=&quot;http://www.cleardesign.me/stylin-with-css-note-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS 设计指南 学习笔记 一&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;盒模型结论一：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有设置宽度的元素始终会扩展到填满其父元素的宽度为止，添加水平外边距、水平边框和水平内边距都会导致内容宽度的减少，减少量等于水平外边距、水平边框和水平内边距的和。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;3-2-2-有宽度的盒子&quot;&gt;&lt;a href=&quot;#3-2-2-有宽度的盒子&quot; class=&quot;headerlink&quot; title=&quot;3.2.2 有宽度的盒子&quot;&gt;&lt;/a&gt;3.2.2 有宽度的盒子&lt;/h4&gt;&lt;p&gt;盒模型结论二：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为设定了宽度的盒子添加外边距、边框和内边距，会导致盒子扩展的更宽，实际上，盒子的 &lt;code&gt;width&lt;/code&gt; 属性设定的只是盒子内容区的宽度，而不是盒子要占据的( margin-left + border-left + padding-left + width + padding-right + border-right + margin-right )水平宽度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以一定要记住的是，给设定了 &lt;code&gt;width&lt;/code&gt; 的元素添加外边距、边框和内边距所展示的行为与默认的 &lt;code&gt;auto&lt;/code&gt; 状态下的行为会有截然不同的表现。&lt;/p&gt;
&lt;p&gt;拓展：&lt;/p&gt;
&lt;p&gt;但是与布局相关的元素大部分都同时设置了 &lt;code&gt;margin&lt;/code&gt;、 &lt;code&gt;border&lt;/code&gt;、 &lt;code&gt;padding&lt;/code&gt; 和 &lt;code&gt;width&lt;/code&gt;，这就导致了在布局时的各种计算保证总宽度( margin-left + border-left + padding-left + width + padding-right + border-right + margin-right )保持不变，这样不仅麻烦，有的时候还比较容易出错，为了解决这一问题， CSS3 新增了一个 &lt;code&gt;box-sizing&lt;/code&gt; 属性，通过它可以将设置了 &lt;code&gt;width&lt;/code&gt; 的元素也设定成具有默认的 &lt;code&gt;auto&lt;/code&gt; 状态下的行为。这样就省去了许多计算 &lt;code&gt;width&lt;/code&gt; 的时间，同时也不会出错，而且它的浏览器支持情况也是一片大好（ 除了 IE 6 和 IE 7 不支持，其他个别老版本的浏览器需要添加浏览器私有前缀才支持 ）。&lt;/p&gt;
&lt;p&gt;可以这样使用这个属性：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;* &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;-webkit-box-sizing&lt;/span&gt;: border-box;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;attribute&quot;&gt;-moz-box-sizing&lt;/span&gt;: border-box;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;attribute&quot;&gt;box-sizing&lt;/span&gt;: border-box;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://justclear.github.io/images/posts/stylin-with-css-note/2.5.png&quot; alt=&quot;Browser Supported&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-3-浮动与清除&quot;&gt;&lt;a href=&quot;#3-3-浮动与清除&quot; class=&quot;headerlink&quot; title=&quot;3.3 浮动与清除&quot;&gt;&lt;/a&gt;3.3 浮动与清除&lt;/h3&gt;&lt;p&gt;浮动和清除是页面布局的一大利剑，分别是 &lt;code&gt;float&lt;/code&gt; 和 &lt;code&gt;clear&lt;/code&gt;，浮动可以让原来上下堆叠的块级元素变成左右并列，可以实现文字绕图片排列效果。浮动的元素会脱离常规的文档流，原来紧跟其后的元素会在空间允许的情况下向上提升到与浮动元素平起平坐。如果浮动元素后面有两个段落，而你只想让第一段与浮动元素并列（就算旁边还能放下第二段，也不想让它上来），就可以使用 &lt;code&gt;clear&lt;/code&gt; 属性清除浮动。&lt;/p&gt;
&lt;h4 id=&quot;3-3-2-围住浮动元素的三种方法&quot;&gt;&lt;a href=&quot;#3-3-2-围住浮动元素的三种方法&quot; class=&quot;headerlink&quot; title=&quot;3.3.2 围住浮动元素的三种方法&quot;&gt;&lt;/a&gt;3.3.2 围住浮动元素的三种方法&lt;/h4&gt;&lt;p&gt;浮动元素脱离了文档流，所以我们看不到包含它的父元素了，这种情况有时候并不是我们想要的，所以作者在本章介绍了如何围住浮动元素的三种方法。&lt;/p&gt;
&lt;p&gt;方法一：为父元素添加 &lt;code&gt;overflow: hidden;&lt;/code&gt; 强制它包围浮动元素。&lt;/p&gt;
&lt;p&gt;这种方法在某些情况下也不适用，比如通过浮动设置的水平排列的菜单，对其父元素设置 &lt;code&gt;overflow: hidden;&lt;/code&gt; 后，尽管父元素围住了它，但是如果菜单有下拉选项的话，当鼠标移动到上面的时候下拉菜单并不会显示，因为设置了 &lt;code&gt;overflow: hidden;&lt;/code&gt;，所以超出父元素范围的内容都被隐藏掉了。&lt;/p&gt;
&lt;p&gt;方法二：同时浮动父元素&lt;/p&gt;
&lt;p&gt;父元素设置浮动后，不管其子元素是否是浮动，父元素都会紧紧地包围住它的子元素，因此需要用 &lt;code&gt;width: 100%;&lt;/code&gt; 再让父元素的宽度与浏览器容器同宽。同样，尽管父元素围住了它，但是这样会导致页面中出现大量的浮动元素，而浮动元素有往往不好控制，并不利于页面的布局。&lt;/p&gt;
&lt;p&gt;方法三：添加非浮动的清除元素&lt;/p&gt;
&lt;p&gt;第三种强制父元素包含其浮动的子元素的方式就是给父元素的最后添加一个非浮动的子元素，然后清除该子元素，因此父元素一定会包含这个子元素以及前面的浮动元素：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// HTML&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;It&#39;s fun to float&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;clearfix&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// CSS&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;p &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    float: left;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.clearfix &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    clear:both;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;尽管这个方法能解决上面提到的两种方法中的问题，但它还不是最好的方法，因为它会在文档中添加无意义的标签，这违反了标签语义化的规则，对搜索引擎并不友好。所以如果你要清楚浮动但既不想浮动父元素又不想对父元素设置 &lt;code&gt;overflow: hidden;&lt;/code&gt; 也不想增加无意义的标签的话，可以使用伪元素来清除浮动：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;::after&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: table;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;clear&lt;/span&gt;: both;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在父元素中添加 &lt;code&gt;clearfix&lt;/code&gt; 类，因为搜索引擎并不会抓取伪元素，所以这种方法并没有增加无意义的标签，这里应该注意的是，CSS3 标准是用两个冒号来区别伪元素和伪类，而 CSS2.1 中不管是伪元素还是伪类都是用单个冒号表示，然而 IE8 并不支持双冒号的伪元素，所以问题就来了，如果你要遵循 CSS3 的标准使用双冒号的话就不兼容 IE8 了，如果使用但冒号的话又不符合 CSS3 标准规范，当然现在大多数还是使用但冒号的，选择哪种还是看个人的选择。&lt;/p&gt;
&lt;h3 id=&quot;3-4-定位&quot;&gt;&lt;a href=&quot;#3-4-定位&quot; class=&quot;headerlink&quot; title=&quot;3.4 定位&quot;&gt;&lt;/a&gt;3.4 定位&lt;/h3&gt;&lt;p&gt;CSS 布局的核心是 &lt;code&gt;position&lt;/code&gt; 属性，对元素应用这个属性可以相对于它在常规文档流中的位置重新定位，&lt;code&gt;position&lt;/code&gt; 属性有 4 个值：&lt;code&gt;static&lt;/code&gt;、 &lt;code&gt;relative&lt;/code&gt;、 &lt;code&gt;absolute&lt;/code&gt; 和 &lt;code&gt;fixed&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;3-4-1-静态定位-static&quot;&gt;&lt;a href=&quot;#3-4-1-静态定位-static&quot; class=&quot;headerlink&quot; title=&quot;3.4.1 静态定位(static)&quot;&gt;&lt;/a&gt;3.4.1 静态定位(static)&lt;/h4&gt;&lt;p&gt;静态定位下的块级元素会在默认文档流中上下堆叠，想要突破 &lt;code&gt;static&lt;/code&gt; 定位提供的这种按顺序布局元素的方式，就必须对元素的 &lt;code&gt;position&lt;/code&gt; 属性的值改为其他三个值。&lt;/p&gt;
&lt;h4 id=&quot;3-4-1-相对定位-relative&quot;&gt;&lt;a href=&quot;#3-4-1-相对定位-relative&quot; class=&quot;headerlink&quot; title=&quot;3.4.1 相对定位(relative)&quot;&gt;&lt;/a&gt;3.4.1 相对定位(relative)&lt;/h4&gt;&lt;p&gt;所谓的相对定位就是相对于元素原来的位置（static 状态下的位置）进行定位，也就是说在不设置 &lt;code&gt;top&lt;/code&gt;、 &lt;code&gt;right&lt;/code&gt;、 &lt;code&gt;bottom&lt;/code&gt; 或 &lt;code&gt;left&lt;/code&gt; 的话，和它在默认(static)情况下的表现是相同的，但是如果对它设置了 &lt;code&gt;top&lt;/code&gt;、 &lt;code&gt;right&lt;/code&gt;、 &lt;code&gt;bottom&lt;/code&gt; 或 &lt;code&gt;left&lt;/code&gt; 的话，就会相对与它默认的位置进行定位。相对定位的元素可以遮住静态(static)定位的元素。可以给 &lt;code&gt;top&lt;/code&gt; 和 &lt;code&gt;left&lt;/code&gt; 属性设定负值，把元素向上和向左移动。&lt;/p&gt;
&lt;h4 id=&quot;3-4-2-绝对定位-absolute&quot;&gt;&lt;a href=&quot;#3-4-2-绝对定位-absolute&quot; class=&quot;headerlink&quot; title=&quot;3.4.2 绝对定位(absolute)&quot;&gt;&lt;/a&gt;3.4.2 绝对定位(absolute)&lt;/h4&gt;&lt;p&gt;绝对定位跟静态定位和相对定位是绝对不一样的，静态定位和相对定位并不会脱离文档流，会占居原来的位置，而绝对定位会把元素彻底从文档流中拿出来，然后再相对于其他元素（这里的其他元素指的是定位上下文，默认是 &lt;code&gt;body&lt;/code&gt; 元素）定位。&lt;/p&gt;
&lt;p&gt;绝对定位的一个重要的概念就是&lt;strong&gt;定位上下文&lt;/strong&gt;，把元素的 &lt;code&gt;position&lt;/code&gt; 属性设定为 &lt;code&gt;relative&lt;/code&gt;、 &lt;code&gt;absolute&lt;/code&gt; 或 &lt;code&gt;fixed&lt;/code&gt; 后，继而可以使用 &lt;code&gt;top&lt;/code&gt;、&lt;code&gt;right&lt;/code&gt;、 &lt;code&gt;bottom&lt;/code&gt; 和 &lt;code&gt;left&lt;/code&gt; 属性，相对于「另一个元素」移动该元素的位置。这里的「另一个元素」就是该元素的定位上下文。&lt;/p&gt;
&lt;p&gt;绝对定位的默认定位上下文是 &lt;code&gt;body&lt;/code&gt;，这是因为 &lt;code&gt;body&lt;/code&gt; 是标记中所有元素的唯一的祖先元素，而实际上，绝对定位元素的任何祖先元素都可以成为该绝对定位元素的定位上下文，只要把相应的祖先元素的 &lt;code&gt;position&lt;/code&gt; 属性的值设定为 &lt;code&gt;relative&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h4 id=&quot;3-4-3-固定定位&quot;&gt;&lt;a href=&quot;#3-4-3-固定定位&quot; class=&quot;headerlink&quot; title=&quot;3.4.3 固定定位&quot;&gt;&lt;/a&gt;3.4.3 固定定位&lt;/h4&gt;&lt;p&gt;从完全脱离文档流的角度说，固定定位与绝对定位类似。但不同之处在于，固定定位的定位上下文是视口（浏览器窗口），因此它不会随页面的滚动而移动。最常见的情况是用它来创建不随页面滚动而移动的导航元素。&lt;/p&gt;
&lt;h3 id=&quot;3-5-显示属性&quot;&gt;&lt;a href=&quot;#3-5-显示属性&quot; class=&quot;headerlink&quot; title=&quot;3.5 显示属性&quot;&gt;&lt;/a&gt;3.5 显示属性&lt;/h3&gt;&lt;p&gt;&lt;code&gt;display&lt;/code&gt; 属性的值很多，但常用的除了前面提到的控制块级元素、行内元素和行内块级元素的 &lt;code&gt;block&lt;/code&gt;、 &lt;code&gt;inline&lt;/code&gt; 和 &lt;code&gt;inline-block&lt;/code&gt; 以外，还有一个比较常用的就是 &lt;code&gt;none&lt;/code&gt;，把元素的 &lt;code&gt;display&lt;/code&gt; 属性的值设定为 &lt;code&gt;none&lt;/code&gt; 后，该元素及所包含在其中的元素，都不会在页面中显示。他们原先战局的所有空间都会被「回收」，就好像相关元素根本不存在一样。&lt;/p&gt;
&lt;p&gt;与此类似的属性还有 &lt;code&gt;visibility&lt;/code&gt;，这个属性常用的两个值是 &lt;code&gt;visible&lt;/code&gt;(默认值) 和 &lt;code&gt;hidden&lt;/code&gt;，把元素的 &lt;code&gt;visibility&lt;/code&gt; 属性的值设定成&lt;code&gt;hidden&lt;/code&gt; ，元素会被隐藏，但它还会占据页面中原来的空间位置。&lt;/p&gt;
&lt;p&gt;笔者觉得有点类似定位中 &lt;code&gt;absolute&lt;/code&gt; 和 &lt;code&gt;relative&lt;/code&gt; 的感觉，就是 &lt;code&gt;absolute&lt;/code&gt; 定位的元素的原来的位置会被「回收」（脱离文档流），就好像元素根本不存在一样（指的是原来占据的位置不存在一样），&lt;code&gt;relative&lt;/code&gt; 定位的元素还会占据页面中原来的空间位置。&lt;/p&gt;
&lt;h3 id=&quot;3-6-背景&quot;&gt;&lt;a href=&quot;#3-6-背景&quot; class=&quot;headerlink&quot; title=&quot;3.6 背景&quot;&gt;&lt;/a&gt;3.6 背景&lt;/h3&gt;&lt;p&gt;背景支持为元素添加背景颜色也背景图片。&lt;/p&gt;
&lt;h4 id=&quot;3-6-1-CSS-背景属性&quot;&gt;&lt;a href=&quot;#3-6-1-CSS-背景属性&quot; class=&quot;headerlink&quot; title=&quot;3.6.1 CSS 背景属性&quot;&gt;&lt;/a&gt;3.6.1 CSS 背景属性&lt;/h4&gt;&lt;p&gt;CSS 规定以下与背景相关属性：&lt;/p&gt;
&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: ; &lt;span class=&quot;comment&quot;&gt;// 背景颜色&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;: url(); &lt;span class=&quot;comment&quot;&gt;// 背景图片&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-repeat&lt;/span&gt;: ; &lt;span class=&quot;comment&quot;&gt;// 背景重复&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-position&lt;/span&gt;: ; &lt;span class=&quot;comment&quot;&gt;// 背景位置&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-size&lt;/span&gt;: ; &lt;span class=&quot;comment&quot;&gt;// 背景尺寸 CSS3 新增属性&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-attachment&lt;/span&gt;: ; &lt;span class=&quot;comment&quot;&gt;// 背景粘附&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-clip&lt;/span&gt;: ; &lt;span class=&quot;comment&quot;&gt;// 背景&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-origin&lt;/span&gt;: ; &lt;span class=&quot;comment&quot;&gt;// 背景&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-6-5-背景位置&quot;&gt;&lt;a href=&quot;#3-6-5-背景位置&quot; class=&quot;headerlink&quot; title=&quot;3.6.5 背景位置&quot;&gt;&lt;/a&gt;3.6.5 背景位置&lt;/h4&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;background&lt;/span&gt;-&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;：关键字 px em 百分比；&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用于控制背景位置的 &lt;code&gt;background-position&lt;/code&gt; 属性，是所有背景属性中最复杂的。&lt;code&gt;background-position&lt;/code&gt; 有 5 个关键字值： &lt;code&gt;top&lt;/code&gt;、&lt;code&gt;right&lt;/code&gt;、 &lt;code&gt;bottom&lt;/code&gt;、 &lt;code&gt;left&lt;/code&gt; 或 &lt;code&gt;center&lt;/code&gt;，这些关键字值任意两个组合起来都可以作为该属性的值。比如 &lt;code&gt;top&lt;/code&gt; &lt;code&gt;right&lt;/code&gt; 表示把图片放在元素的右上角位置，&lt;code&gt;center&lt;/code&gt; &lt;code&gt;center&lt;/code&gt; 表示把图片放在元素的中心位置。除了这些关键字值以外还可以用百分比、&lt;code&gt;px&lt;/code&gt; 和 &lt;code&gt;em&lt;/code&gt; 等单位。&lt;/p&gt;
&lt;p&gt;拓展&lt;/p&gt;
&lt;p&gt;要是只设置一个值，则将其用来设定水平位置，而垂直位置会被设为 &lt;code&gt;center&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在使用&lt;strong&gt;关键字&lt;/strong&gt;和&lt;strong&gt;百分比&lt;/strong&gt;的情况下，情况有点特殊，设定的值会同时应用于元素和图片，也就是说，如果设定了 &lt;code&gt;80%&lt;/code&gt; &lt;code&gt;20%&lt;/code&gt;，则图片水平 &lt;code&gt;80%&lt;/code&gt; 的位置与元素 &lt;code&gt;33%&lt;/code&gt; 的位置对齐，垂直方向也一样，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://justclear.github.io/images/posts/stylin-with-css-note/2.6.png&quot; alt=&quot;background-position&quot;&gt;&lt;/p&gt;
&lt;p&gt;其他单位数值就不一样了，如果用像素单位来设定位置：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;background&lt;/span&gt;-&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;px &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;px;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么图片的左上角会被放在距元素左边 &lt;code&gt;80px&lt;/code&gt; 上边 &lt;code&gt;20px&lt;/code&gt; 的地方。&lt;/p&gt;
&lt;h4 id=&quot;3-6-6-背景尺寸&quot;&gt;&lt;a href=&quot;#3-6-6-背景尺寸&quot; class=&quot;headerlink&quot; title=&quot;3.6.6 背景尺寸&quot;&gt;&lt;/a&gt;3.6.6 背景尺寸&lt;/h4&gt;&lt;p&gt;&lt;code&gt;background-size&lt;/code&gt; 是 CSS3 新增的属性，但却的到了浏览器很好的支持，这个属性用来控制背景图片的尺寸，可以给它设定的值及含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;50%&lt;/code&gt;：缩放图片，使其填充背景区的一半。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;100px&lt;/code&gt; &lt;code&gt;50px&lt;/code&gt;：把图片调整到 &lt;code&gt;100px&lt;/code&gt; 宽，&lt;code&gt;50px&lt;/code&gt; 高。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cover&lt;/code&gt;：拉大图片，使其完全填满背景区，并保持宽高比例。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contain&lt;/code&gt;：缩放图片，使其恰好适应整个背景区域，并保持宽高比例。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-6-7-背景粘附&quot;&gt;&lt;a href=&quot;#3-6-7-背景粘附&quot; class=&quot;headerlink&quot; title=&quot;3.6.7 背景粘附&quot;&gt;&lt;/a&gt;3.6.7 背景粘附&lt;/h4&gt;&lt;p&gt;&lt;code&gt;background-attachment&lt;/code&gt; 属性控制滚动元素内的背景图片是否随元素滚动而移动，这个属性默认是 &lt;code&gt;scroll&lt;/code&gt;，即背景图片随元素移动，如果把它的值改为 &lt;code&gt;fixed&lt;/code&gt;，那么背景图片不会随元素滚动而移动。&lt;/p&gt;
&lt;h3 id=&quot;3-6-8-简写背景属性&quot;&gt;&lt;a href=&quot;#3-6-8-简写背景属性&quot; class=&quot;headerlink&quot; title=&quot;3.6.8 简写背景属性&quot;&gt;&lt;/a&gt;3.6.8 简写背景属性&lt;/h3&gt;&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;background&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;background&lt;/span&gt;-&lt;span class=&quot;built_in&quot;&gt;color&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;background&lt;/span&gt;-&lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;background&lt;/span&gt;-repeat]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;background&lt;/span&gt;-attachment]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;background&lt;/span&gt;-&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;] / [ &lt;span class=&quot;built_in&quot;&gt;background&lt;/span&gt;-size]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;background&lt;/span&gt;-&lt;span class=&quot;built_in&quot;&gt;origin&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;background&lt;/span&gt;-clip];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;声明中少些了哪个属性（比如没写 &lt;code&gt;no-repeat&lt;/code&gt;），就会使用相应属性的默认值（&lt;code&gt;repeat&lt;/code&gt;）。&lt;/p&gt;
&lt;h4 id=&quot;3-6-9-其他-CSS3-背景属性&quot;&gt;&lt;a href=&quot;#3-6-9-其他-CSS3-背景属性&quot; class=&quot;headerlink&quot; title=&quot;3.6.9 其他 CSS3 背景属性&quot;&gt;&lt;/a&gt;3.6.9 其他 CSS3 背景属性&lt;/h4&gt;&lt;p&gt;CSS3 新增的一些背景属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;background-clip&lt;/code&gt;：控制背景绘制区域的范围，比如可以让背景颜色和背景图片只出现在内容区，而不出现在内边距区域，默认情况下背景绘制区域是扩展到边框外边界的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background-origin&lt;/code&gt;：控制背景定位区域的原点，可以设定为元素盒子左上角以外的位置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background-break&lt;/code&gt;：控制分离元素（比如跨越多行的行内元素盒子）的显示效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;background-size&lt;/code&gt;、 &lt;code&gt;background-clip&lt;/code&gt; 和 &lt;code&gt;background-origin&lt;/code&gt; 的浏览器支持情况还是挺不错的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://justclear.github.io/images/posts/stylin-with-css-note/2.7.png&quot; alt=&quot;Browser Supported&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-6-10-多背景图片&quot;&gt;&lt;a href=&quot;#3-6-10-多背景图片&quot; class=&quot;headerlink&quot; title=&quot;3.6.10 多背景图片&quot;&gt;&lt;/a&gt;3.6.10 多背景图片&lt;/h4&gt;&lt;p&gt;CSS3 还可以给元素背景条件多个背景图片：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;: 	&lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(img/1.png),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(img/2.png),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(img/3.png);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-position&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;20%&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20%&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        center center;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-repeat&lt;/span&gt;:	repeat,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        no-repeat,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        repeat;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 CSS 中，我们把每张图片的声明都单独放在了一行，以逗号分隔，以便看清他们的位置、重复的设定值等等。要注意的是，代码中先列出的图片显示在上方，或者说更接近前景，还有就是对每张背景图设置重复或者位置的时候，也要用逗号一一对应隔开。&lt;/p&gt;
&lt;h4 id=&quot;3-6-11-背景渐变&quot;&gt;&lt;a href=&quot;#3-6-11-背景渐变&quot; class=&quot;headerlink&quot; title=&quot;3.6.11 背景渐变&quot;&gt;&lt;/a&gt;3.6.11 背景渐变&lt;/h4&gt;&lt;p&gt;渐变就是在一定长度内两种或多种颜色之间自然过度。渐变分两种，一种是线性渐变，一种是径向渐变。线性渐变是从元素的一端延伸到另一端，径向渐变则是从元素的一点向四周发散，下面来看一个简单的线性渐变例子：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// HTML&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; class=&lt;span class=&quot;string&quot;&gt;&quot;gradient effect-1&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; class=&lt;span class=&quot;string&quot;&gt;&quot;gradient effect-2&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; class=&lt;span class=&quot;string&quot;&gt;&quot;gradient effect-3&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// CSS&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.gradient&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 默认为从上到下 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.effect-1&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: -webkit-linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:    -moz-linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 	 -o-linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 		linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.effect-2&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: -webkit-linear-gradient(left, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:    -moz-linear-gradient(left, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 	 -o-linear-gradient(left, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 		linear-gradient(to right, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.effect-3&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: -webkit-linear-gradient(&lt;span class=&quot;number&quot;&gt;45deg&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:    -moz-linear-gradient(&lt;span class=&quot;number&quot;&gt;45deg&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 	 -o-linear-gradient(&lt;span class=&quot;number&quot;&gt;45deg&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 		linear-gradient(&lt;span class=&quot;number&quot;&gt;45deg&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://justclear.github.io/images/posts/stylin-with-css-note/2.8.png&quot; alt=&quot;Gradient&quot;&gt;&lt;/p&gt;
&lt;p&gt;上面展示了三种简单的渐变效果，默认情况下渐变方向是从上到下的如图一，例 2 起点关键字 &lt;code&gt;left&lt;/code&gt; 意思是渐变方向从左到右，例 3 中的&lt;code&gt;45deg&lt;/code&gt; （顺时钟旋转 45 度）相当于把起点从默认的中上设定到了又上。&lt;/p&gt;
&lt;h5 id=&quot;3-6-11-1-渐变点&quot;&gt;&lt;a href=&quot;#3-6-11-1-渐变点&quot; class=&quot;headerlink&quot; title=&quot;3.6.11.1 渐变点&quot;&gt;&lt;/a&gt;3.6.11.1 渐变点&lt;/h5&gt;&lt;p&gt;渐变点就是渐变方向上的点，可以在这些点上设定颜色和不透明度。可以添加任意多个渐变点：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// HTML&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; class=&lt;span class=&quot;string&quot;&gt;&quot;gradient effect-1&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; class=&lt;span class=&quot;string&quot;&gt;&quot;gradient effect-2&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; class=&lt;span class=&quot;string&quot;&gt;&quot;gradient effect-3&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; class=&lt;span class=&quot;string&quot;&gt;&quot;gradient effect-4&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// CSS&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.gradient&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 50% 处有一个渐变点 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.effect-1&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: -webkit-linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:    -moz-linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 	 -o-linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 		linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 20% 和 80%处有一个渐变点 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.effect-2&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: -webkit-linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80%&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:    -moz-linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80%&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 	 -o-linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80%&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 		linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80%&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 25%、50% 和 75% 处有一个渐变点 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.effect-3&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: -webkit-linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;75%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:    -moz-linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;75%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 	 -o-linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;75%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 		linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;75%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 为同一个渐变点设定两种颜色可以的到突变的效果 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.effect-4&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: -webkit-linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25%&lt;/span&gt;%, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;75%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;75%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:    -moz-linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25%&lt;/span&gt;%, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;75%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;75%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 	 -o-linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25%&lt;/span&gt;%, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;75%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;75%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 		linear-gradient(&lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25%&lt;/span&gt;%, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;75%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;75%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://justclear.github.io/images/posts/stylin-with-css-note/2.9.png&quot; alt=&quot;Gradient&quot;&gt;&lt;/p&gt;
&lt;p&gt;例 1，如果不是使用百分比或其他值声明渐变点的位置，三种颜色会均匀分布于整个渐变。&lt;/p&gt;
&lt;p&gt;例 2，演示了起点和终点不是 0% 和 100% 时的情形。此时，在第一个渐变点(20%)之前，是第一个渐变点声明的实色，而在该点之后，则是从该颜色到下一个渐变点颜色的过度。同样，在最后一个渐变点(80%)之后，该渐变点的颜色会以实色扩展到元素结束。&lt;/p&gt;
&lt;p&gt;例 3，简单展示了相同颜色在几个渐变点之间变来变去的效果。&lt;/p&gt;
&lt;p&gt;例 4，展示了在同一个渐变点声明两种不同颜色，能实现一种突变的效果。&lt;/p&gt;
&lt;h5 id=&quot;3-6-11-2-径向渐变&quot;&gt;&lt;a href=&quot;#3-6-11-2-径向渐变&quot; class=&quot;headerlink&quot; title=&quot;3.6.11.2 径向渐变&quot;&gt;&lt;/a&gt;3.6.11.2 径向渐变&lt;/h5&gt;&lt;p&gt;在创建径向渐变的时候，可以使用参数指定形状、位置、尺寸、颜色和不透明度：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// HTML&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; class=&lt;span class=&quot;string&quot;&gt;&quot;gradient effect-1&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; class=&lt;span class=&quot;string&quot;&gt;&quot;gradient effect-2&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; class=&lt;span class=&quot;string&quot;&gt;&quot;gradient effect-3&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// CSS&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.gradient&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.effect-1&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: -webkit-radial-gradient(&lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:    -moz-radial-gradient(&lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 	 -o-radial-gradient(&lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 		radial-gradient(&lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.effect-2&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: -webkit-radial-gradient(circle, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:    -moz-radial-gradient(circle, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 	 -o-radial-gradient(circle, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 		radial-gradient(circle, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.effect-3&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: -webkit-radial-gradient(&lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;, circle, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:    -moz-radial-gradient(&lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;, circle, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 	 -o-radial-gradient(&lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;, circle, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: 		radial-gradient(&lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;, circle, &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;#45b29a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://justclear.github.io/images/posts/stylin-with-css-note/2.10.png&quot; alt=&quot;Gradient&quot;&gt;&lt;/p&gt;
&lt;p&gt;例 1，展示了默认的渐变形状，即渐变效果会填充元素，这里是矩形，如果元素是正方形，那渐变就是圆形：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://justclear.github.io/images/posts/stylin-with-css-note/2.11.png&quot; alt=&quot;Gradient&quot;&gt;&lt;/p&gt;
&lt;p&gt;例 2，设定了关键字 &lt;code&gt;circle&lt;/code&gt;，于是渐变形状变得均匀，并在元素最近的边达到终点，形成了圆形渐变。而长边剩下的区域则填充了终点的颜色。&lt;/p&gt;
&lt;p&gt;例 3，位置参数 &lt;code&gt;50px 30px&lt;/code&gt; 把渐变的圆心放到了靠近左上角的位置。&lt;/p&gt;
&lt;h2 id=&quot;第四章&quot;&gt;&lt;a href=&quot;#第四章&quot; class=&quot;headerlink&quot; title=&quot;第四章&quot;&gt;&lt;/a&gt;第四章&lt;/h2&gt;&lt;h3 id=&quot;字体&quot;&gt;&lt;a href=&quot;#字体&quot; class=&quot;headerlink&quot; title=&quot;字体&quot;&gt;&lt;/a&gt;字体&lt;/h3&gt;&lt;p&gt;网页中字体的三个来源&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户机器安装的字体&lt;/li&gt;
&lt;li&gt;第三方网站上的字体&lt;/li&gt;
&lt;li&gt;储存在 web 服务器上字体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CSS 中有6个与字体有关的属性：font-family、font-size、font-style、font-weight、font-variant、font&lt;/p&gt;
&lt;h3 id=&quot;字体族&quot;&gt;&lt;a href=&quot;#字体族&quot; class=&quot;headerlink&quot; title=&quot;字体族&quot;&gt;&lt;/a&gt;字体族&lt;/h3&gt;&lt;p&gt;font-family 可以设置 字体族，也就是指定文本用什么字体，可以设置多个，排列在前面的优先级高&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;trebuchet ms&quot;&lt;/span&gt;, tahoma, sans-serif;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;带有空格的字体需要加上引号，前面的字体优先选择，如果找不到，选择下一个，一般最后一个是要设置一个通用字体。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;serif ，也就是衬线字体，在每个字符笔画的末端会有一些装饰线；&lt;/li&gt;
&lt;li&gt;sans-serif ，也就是无衬线字体，字符笔画的末端没有装饰线；&lt;/li&gt;
&lt;li&gt;monospace ，也就是等宽字体，顾名思义，就是每个字符的宽度相等（也称代码体）；&lt;/li&gt;
&lt;li&gt;cursive ，也就是草书体或手写体&lt;/li&gt;
&lt;li&gt;fantasy ，不能归入其他类别的字体（一般都是奇形怪状的字体）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;字体大小&quot;&gt;&lt;a href=&quot;#字体大小&quot; class=&quot;headerlink&quot; title=&quot;字体大小&quot;&gt;&lt;/a&gt;字体大小&lt;/h3&gt;&lt;p&gt;每个 HTML 元素都设置默认字体大小，当在修改字体大小时候都是修改了默认值，同时也是可以继承的&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h2&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;18px&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置字体大小可以有绝对字体大小和相对字体大小&lt;/p&gt;
&lt;p&gt;绝对字体大小不会随页面缩放不会继承父元素属性，一般使用 px 单位，也可以使用关键字 x-small 、medium 、x-large&lt;/p&gt;
&lt;p&gt;相对字体大小会随着页面缩放会继续父元素的字体大小，再其基础上缩放。使用百分比、em、rem 作为单位。&lt;/p&gt;
&lt;p&gt;rem 是相对根元素的的大小&lt;/p&gt;
&lt;h3 id=&quot;字体样式&quot;&gt;&lt;a href=&quot;#字体样式&quot; class=&quot;headerlink&quot; title=&quot;字体样式&quot;&gt;&lt;/a&gt;字体样式&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h2&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;font-style&lt;/span&gt;:italic;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;normal 正常&lt;/li&gt;
&lt;li&gt;italic 斜体&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;字体粗细&quot;&gt;&lt;a href=&quot;#字体粗细&quot; class=&quot;headerlink&quot; title=&quot;字体粗细&quot;&gt;&lt;/a&gt;字体粗细&lt;/h3&gt;&lt;p&gt;font-weight 属性的两个值： bold 和 normal&lt;/p&gt;
&lt;h3 id=&quot;字体变化&quot;&gt;&lt;a href=&quot;#字体变化&quot; class=&quot;headerlink&quot; title=&quot;字体变化&quot;&gt;&lt;/a&gt;字体变化&lt;/h3&gt;&lt;p&gt;font-variant 属性除了 normal ，就只有一个值，即 small-caps 。这个值会导致所有 小写英文字母变成小型大写字母：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h3&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;font-variant&lt;/span&gt;:small-caps;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;文本属性&quot;&gt;&lt;a href=&quot;#文本属性&quot; class=&quot;headerlink&quot; title=&quot;文本属性&quot;&gt;&lt;/a&gt;文本属性&lt;/h3&gt;&lt;p&gt;以下是几个最有用的 CSS文本属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;text-indent&lt;/li&gt;
&lt;li&gt;letter-spacing&lt;/li&gt;
&lt;li&gt;word-spacing&lt;/li&gt;
&lt;li&gt;text-decoration&lt;/li&gt;
&lt;li&gt;text-align&lt;/li&gt;
&lt;li&gt;line-height&lt;/li&gt;
&lt;li&gt;text-transform&lt;/li&gt;
&lt;li&gt;vertical-align&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;文本缩进&quot;&gt;&lt;a href=&quot;#文本缩进&quot; class=&quot;headerlink&quot; title=&quot;文本缩进&quot;&gt;&lt;/a&gt;文本缩进&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;text-indent&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3em&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;text-indent 属性设定行内盒子相对于包含元素的起点。默认情况下，这个起点就是包含元素的左上角。&lt;/p&gt;
&lt;p&gt;正值向右，负值向左&lt;/p&gt;
&lt;p&gt;text-indent 是可以被子元素继承的。但是继承的是最终的值。&lt;/p&gt;
&lt;p&gt;假设有一个 400 像素宽的 div，包含的文本缩进 5%，则缩进的距离是 20 像素（400 的 5%）。 在这个 div 中有一个 200 像素宽的段落。作为子元素，它继承父元素的 text-indent 值，所以 它包含的文本也缩进。但继承的缩进值是多少呢？不是 5%，而是 20 像素&lt;/p&gt;
&lt;h3 id=&quot;字符间距&quot;&gt;&lt;a href=&quot;#字符间距&quot; class=&quot;headerlink&quot; title=&quot;字符间距&quot;&gt;&lt;/a&gt;字符间距&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;letter-spacing&lt;/span&gt;:.&lt;span class=&quot;number&quot;&gt;2em&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;letter-spacing 为正值时增大字符间距，为负值时缩小间距。无论设定字体大小时使用的是什么单位，设定字符间距一定要用相对单位，以便字间距能随字体大小同比例变化。&lt;/p&gt;
&lt;h3 id=&quot;单词间距&quot;&gt;&lt;a href=&quot;#单词间距&quot; class=&quot;headerlink&quot; title=&quot;单词间距&quot;&gt;&lt;/a&gt;单词间距&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;word-spacing&lt;/span&gt;:.&lt;span class=&quot;number&quot;&gt;2em&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;文本装饰&quot;&gt;&lt;a href=&quot;#文本装饰&quot; class=&quot;headerlink&quot; title=&quot;文本装饰&quot;&gt;&lt;/a&gt;文本装饰&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.retailprice&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;text-decoration&lt;/span&gt;:line-through;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;值有：underline 、 overline 、 line-through 、 blink 、 none，其中 blink 不使用&lt;/p&gt;
&lt;h3 id=&quot;文本对齐&quot;&gt;&lt;a href=&quot;#文本对齐&quot; class=&quot;headerlink&quot; title=&quot;文本对齐&quot;&gt;&lt;/a&gt;文本对齐&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;:right;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;text-align 属性只有 4 个值， left 、 right 、 center 和 justify ，控制着文本在水平方向对齐的方式。其中， center 值也可以用来在较大的元素中居中较小的固定宽度的元素或图片。&lt;/p&gt;
&lt;h3 id=&quot;行高&quot;&gt;&lt;a href=&quot;#行高&quot; class=&quot;headerlink&quot; title=&quot;行高&quot;&gt;&lt;/a&gt;行高&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;值：任何数字值（不用指定单位）&lt;/p&gt;
&lt;h3 id=&quot;文本转换&quot;&gt;&lt;a href=&quot;#文本转换&quot; class=&quot;headerlink&quot; title=&quot;文本转换&quot;&gt;&lt;/a&gt;文本转换&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;text-transform&lt;/span&gt;:capitalize;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;值： none 、 uppercase 、 lowercase 、 capitalize 。&lt;/p&gt;
&lt;h3 id=&quot;垂直对齐&quot;&gt;&lt;a href=&quot;#垂直对齐&quot; class=&quot;headerlink&quot; title=&quot;垂直对齐&quot;&gt;&lt;/a&gt;垂直对齐&lt;/h3&gt;&lt;p&gt;值：任意长度值以及 sub 、 super 、 top 、 middle 、 bottom 等。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;span&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;60%&lt;/span&gt;;&amp;#125; 。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;vertical-align 以基线为参照上下移动文本，但这个属性只影响行内元素。如果你想在垂直方向上对齐块级元素，必须把其 display 属性设定为 inline 。&lt;/p&gt;
&lt;p&gt;HTML 标签 sup 和 sub 有默认的上标和下标样式，但重新设定一下vertical-align 和 font-size 属性能得到更美观的效果。&lt;/p&gt;
&lt;h3 id=&quot;font-face&quot;&gt;&lt;a href=&quot;#font-face&quot; class=&quot;headerlink&quot; title=&quot;@font-face&quot;&gt;&lt;/a&gt;@font-face&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@font-face &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*这就是将来在字体栈中引用的字体族的名字*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;font-family:&quot;UbuntuTitlingBold&quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;src: url(&quot;UbuntuTitling-Bold-webfont.eot&quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    src: url(&quot;UbuntuTitling-Bold-webfont.eot?#iefix&quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        format(&quot;embedded-opentype&quot;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        url(&quot;UbuntuTitling-Bold-webfont.woff&quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        format(&quot;woff&quot;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        url(&quot;UbuntuTitling-Bold-webfont.ttf&quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        format(&quot;truetype&quot;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        url(&quot;UbuntuTitling-Bold-webfont.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        svg#UbuntuTitlingBold&quot;) format(&quot;svg&quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;font-weight: normal;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;font-style: normal;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;把以上代码添加到网页中之后，就可以使用 font-family 以常规方式引用该字体了。引用字体时要使用 @font-face 规则中 font-family 属性的值作为字体族的名字。&lt;/p&gt;
&lt;h2 id=&quot;第五章&quot;&gt;&lt;a href=&quot;#第五章&quot; class=&quot;headerlink&quot; title=&quot;第五章&quot;&gt;&lt;/a&gt;第五章&lt;/h2&gt;&lt;h3 id=&quot;布局&quot;&gt;&lt;a href=&quot;#布局&quot; class=&quot;headerlink&quot; title=&quot;布局&quot;&gt;&lt;/a&gt;布局&lt;/h3&gt;&lt;p&gt;多栏布局的三种基本实现方案：固定宽度、流动、弹性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;固定宽度不会随着页面的缩放而变化，一般选择固定宽度为 960 px，能被多种整数整除，实现多栏布局。&lt;/li&gt;
&lt;li&gt;流动布局会随着浏览器的窗口大小变化而变化，这种布局能更好的适应大屏幕，但是文明本行的长度和页面的元素之间的位置关系可能会发生变化。&lt;/li&gt;
&lt;li&gt;响应式设计利用媒体查询，为提供不同的 CSS 成为可能，使得不同的屏幕可以使用固定布局，正在替代流动布局。&lt;/li&gt;
&lt;li&gt;弹性布局在浏览器大小发生变化时候，所有的元素和布局都会缩放，这种技术实现难度大。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;布局高度一般要保持 auto ，这样在垂直方向上添加元素时候会自动向下拓展，如果设置的高度，那么元素可能会被剪掉，或者跑出元素外面去。&lt;/p&gt;
&lt;p&gt;布局宽度需要精确的控制，在浏览器宽度合理变化时候提供合理的调整。必须要给定栏宽，其中的元素不需要给定宽度，使用默认行为填充满整个父元素的宽度。&lt;/p&gt;
&lt;h3 id=&quot;三栏-固定布局&quot;&gt;&lt;a href=&quot;#三栏-固定布局&quot; class=&quot;headerlink&quot; title=&quot;三栏-固定布局&quot;&gt;&lt;/a&gt;三栏-固定布局&lt;/h3&gt;&lt;p&gt;三栏布局中，需要计算出三栏的宽度等于父元素的宽度。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 无序列表 --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;article&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 这里是一些文本元素 --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;article&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;aside&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 文本 --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;aside&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;三栏的元素分别是 nav、article、aside，假设 #wrapper 的宽度是 960px，那么这三个元素的宽度也要是 960px。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#wrapper&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;960px&lt;/span&gt;; &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; auto; &lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;nav&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;150px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:left;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;#dcd9c0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;list-style-type&lt;/span&gt;:none;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;article&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;600px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:left;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;#ffed53&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;aside&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;210px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:left;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;#3f7ccf&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;210px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:left;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;#3f7ccf&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;给这三个固定宽度元素添加内外边距时，由于被指定宽度的元素再添加内外边距时候元素会被扩大，会出现元素错位的情况，有三种方式可以解决。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算元素宽度时候就把内外边距也考虑上，这样太麻烦，不推荐。&lt;/li&gt;
&lt;li&gt;把这三个元素用 div 包起来，由于这个 div 是没有被设置宽度的，所以添加内外边距时大小不变&lt;/li&gt;
&lt;li&gt;给三个元素使用 box-sizing:border-box 的属性，就不会导致给设定宽度的元素添加内外边距时，导致元素扩大，这个方法好。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;三栏-中栏流动布局&quot;&gt;&lt;a href=&quot;#三栏-中栏流动布局&quot; class=&quot;headerlink&quot; title=&quot;三栏-中栏流动布局&quot;&gt;&lt;/a&gt;三栏-中栏流动布局&lt;/h3&gt;&lt;p&gt;目前而言 CSS 中的 table 属性是最简单、最容易实现的，但是在低于 IE7 的浏览器不被支持，也没有任何的替代方法。&lt;/p&gt;
&lt;p&gt;CSS可以把一个 HTML元素的 display 属性设定为 table 、 table-row 和 table-cell 。&lt;/p&gt;
&lt;p&gt;而通过 CSS把布局中的栏设定为 table-cell 有三个好处。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单元格（table-cell）不需要浮动就可以并排显示，而且直接为它们应用内边距也不会破坏布局。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;默认情况下，一行中的所有单元格高度相同，因而也不需要人造的等高栏效果了。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;任何没有明确设定宽度的栏都是流动的。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;selector-id&quot;&gt;#main&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;960px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: auto auto;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;selector-tag&quot;&gt;nav&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: table-cell;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;selector-tag&quot;&gt;article&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: table-cell;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;600px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: blue;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;selector-tag&quot;&gt;aside&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: table-cell;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;260px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: yellow;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 一些东西 --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;article&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 一些东西 --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;article&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;aside&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 一些东西 --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;aside&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;余下的其他章节注重实践，使用前面的基本知识，实现了一个综合的项目&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;只要能把本书读懂、吃透，自称“CSS老手”绝对没人敢说你吹牛皮。要是能将书中给出的建议和提示融会贯通地运用到自己的项目当中，那“CSS高手”这顶桂冠也将非你莫属！&lt;br&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://hangweiping.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JS实现对象的深度克隆</title>
    <link href="http://hangweiping.github.io/2016/07/02/JS%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86/"/>
    <id>http://hangweiping.github.io/2016/07/02/JS实现对象的深度克隆/</id>
    <published>2016-07-02T11:14:21.000Z</published>
    <updated>2016-08-19T07:48:17.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;要弄明白对象的克隆，首先要明白js中对象的组成。&lt;strong&gt;对象即是属性的集合&lt;/strong&gt;，在js中一切实例皆是对象，具体分为&lt;a href=&quot;http://javascript.ruanyifeng.com/grammar/basic.html#toc9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始类型和合成类型&lt;/a&gt;。原始类型对象指的基本类型（包括undefined,Null,boolean,String,Number），按值传递；合成类型对象(array、object以及function)指的是引用类型（包括数组，对象），按址传递，引用类型在值传递的时候是内存中的地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;浅度克隆：原始类型为值传递，对象类型仍为引用传递。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;深度克隆：所有元素或属性均完全复制，与原对象完全脱离，也就是说所有对于新对象的修改都不会反映到原对象中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;又或许你刚听说“深度克隆”这个词，简单来说，就是说有个变量a，a的值是个对象（包括基本数据类型），现在你要创建一个变量b，使得它拥有跟a一样的方法和属性等等。&lt;strong&gt;但是a和b之间不能相互影响，即a的值的改变不影响b值的变化。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实践证明某些JavaScript的原始数据类型，如果要克隆直接赋值即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;但是对象呢？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = a;a.push(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b); &lt;span class=&quot;comment&quot;&gt;// [0, 1, 2, 3, 4]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;显然与预期不符，为什么会这样？因为原始数据类型储存的是对象的实际数据，而对象类型存储的是对象的引用地址。上面的例子呢也就是说a和b对象引用了同一个地址，无论改变a还是改变b，其实根本操作是一样的，都是对那块空间地址中的值的改变。&lt;/p&gt;
&lt;p&gt;于是我们知道了，对于基本的对象来说，不能只能用=赋值，思索后写下如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deepClone&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = obj &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt; ? [] : &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; obj) &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    o[k] = &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; obj[k] === &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt; ? deepClone(obj[k]) : obj[k];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; o;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = [[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = deepClone(a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;似乎可以解决一般的对象（包括Array）的深度克隆了，或许这儿会有疑问，new String(..)这类的也是对象啊，可是这样写你克隆不了啊…但是楼主觉得深度克隆的考点不在这里，可能在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原始数据类型的直接赋值&lt;/li&gt;
&lt;li&gt;function的exception&lt;/li&gt;
&lt;li&gt;对象的深度克隆中Array类型的判断&lt;/li&gt;
&lt;li&gt;克隆函数的递归调用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;另外一种深度克隆代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cloneObject&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;o&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!o || &lt;span class=&quot;string&quot;&gt;&#39;object&#39;&lt;/span&gt; !== &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; o) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; o;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; temp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(o.constructor === &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//temp=o.concat();&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            temp = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = o.length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (i--) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                temp[i] = cloneObject(o[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(o.constructor === &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            temp = &amp;#123;&amp;#125;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; o) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(o.hasOwnProperty(k))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    temp[k] = cloneObject(o[k]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; temp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;主要使用了递归。&lt;br&gt;不过代码看上去挺变扭的，数组本来就是对象，可以精简代码。优化了一下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cloneObject&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = obj.constructor === &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt; ? [] : &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; obj)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(obj.hasOwnProperty(i))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                o[i] = &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; obj[i] === &lt;span class=&quot;string&quot;&gt;&quot;object&quot;&lt;/span&gt; ? cloneObject(obj[i]) : obj[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; o;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最简单的深度克隆，很简单，很实用： &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify( obj ); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse( s );&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;要弄明白对象的克隆，首先要明白js中对象的组成。&lt;strong&gt;对象即是属性的集合&lt;/strong&gt;，在js中一切实例皆是对象，具体分为&lt;a href=&quot;http://javascript.ruanyifeng.com/grammar/basic.html#toc9&quot;&gt;原始类型和合成类型&lt;/a&gt;。原始类型对象指的基本类型（包括undefined,Null,boolean,String,Number），按值传递；合成类型对象(array、object以及function)指的是引用类型（包括数组，对象），按址传递，引用类型在值传递的时候是内存中的地址。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JS" scheme="http://hangweiping.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>gulp指南</title>
    <link href="http://hangweiping.github.io/2016/06/01/gulp%E6%8C%87%E5%8D%97/"/>
    <id>http://hangweiping.github.io/2016/06/01/gulp指南/</id>
    <published>2016-06-01T11:20:23.000Z</published>
    <updated>2016-07-28T09:49:19.000Z</updated>
    
    <content type="html">&lt;p&gt;gulp 是基于 node 实现 Web 前端自动化开发的工具，利用它能够极大的提高开发效率。&lt;/p&gt;
&lt;p&gt;在 Web 前端开发工作中有很多“重复工作”，比如压缩CSS/JS文件。而这些工作都是有规律的。找到这些规律，并编写 gulp 配置代码,让 gulp 自动执行这些“重复工作”。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;将规律转换为-gulp-代码&quot;&gt;&lt;a href=&quot;#将规律转换为-gulp-代码&quot; class=&quot;headerlink&quot; title=&quot;将规律转换为 gulp 代码&quot;&gt;&lt;/a&gt;将规律转换为 gulp 代码&lt;/h2&gt;&lt;p&gt;现有目录结构如下：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;└── js/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    └── &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;规律&quot;&gt;&lt;a href=&quot;#规律&quot; class=&quot;headerlink&quot; title=&quot;规律&quot;&gt;&lt;/a&gt;规律&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;找到 js/目录下的所有 .js 文件&lt;/li&gt;
&lt;li&gt;压缩这些 js 文件&lt;/li&gt;
&lt;li&gt;将压缩后的代码另存在 dist/js/ 目录下&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;编写-gulp-代码&quot;&gt;&lt;a href=&quot;#编写-gulp-代码&quot; class=&quot;headerlink&quot; title=&quot;编写 gulp 代码&quot;&gt;&lt;/a&gt;编写 gulp 代码&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 压缩 JavaScript 文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1. 找到&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;js/*.js&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 2. 压缩&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(uglify())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3. 另存&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/js&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;代码执行结果&quot;&gt;&lt;a href=&quot;#代码执行结果&quot; class=&quot;headerlink&quot; title=&quot;代码执行结果&quot;&gt;&lt;/a&gt;代码执行结果&lt;/h3&gt;&lt;p&gt;代码执行后文件结构&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;└── js/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│   └── &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── dist/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    └── js/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        └── &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;a.js 压缩前&lt;br&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;demo&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(msg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    alert(&lt;span class=&quot;string&quot;&gt;&#39;--------\r\n&#39;&lt;/span&gt; + msg + &lt;span class=&quot;string&quot;&gt;&#39;\r\n--------&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;demo(&lt;span class=&quot;string&quot;&gt;&#39;Hi&#39;&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;a.js 压缩后&lt;br&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n)&lt;/span&gt;&lt;/span&gt;&amp;#123;alert(&lt;span class=&quot;string&quot;&gt;&quot;--------\r\n&quot;&lt;/span&gt;+n+&lt;span class=&quot;string&quot;&gt;&quot;\r\n--------&quot;&lt;/span&gt;)&amp;#125;demo(&lt;span class=&quot;string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时 &lt;code&gt;dist/js&lt;/code&gt; 目录下的 &lt;code&gt;.js&lt;/code&gt; 文件都是压缩后的版本。&lt;/p&gt;
&lt;p&gt;你还可以监控 &lt;code&gt;js/&lt;/code&gt; 目录下的 js 文件，当某个文件被修改时，自动压缩修改文件。启动 gulp 后就可以让它帮助你自动构建 Web 项目。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;gulp 还可以做很多事，例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;压缩CSS&lt;/li&gt;
&lt;li&gt;压缩图片&lt;/li&gt;
&lt;li&gt;编译Sass/LESS&lt;/li&gt;
&lt;li&gt;编译CoffeeScript&lt;/li&gt;
&lt;li&gt;markdown 转换为 html&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;安装-Node-和-gulp&quot;&gt;&lt;a href=&quot;#安装-Node-和-gulp&quot; class=&quot;headerlink&quot; title=&quot;安装 Node 和 gulp&quot;&gt;&lt;/a&gt;安装 Node 和 gulp&lt;/h1&gt;&lt;p&gt;gulp 是基于 node 实现的，那么我们就需要先安装 node。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Node 是一个基于Chrome JavaScript V8引擎建立的一个平台，可以利用它实现 Web服务，做类似PHP的事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;打开 &lt;a href=&quot;https://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://nodejs.org/&lt;/a&gt; 点击绿色的 &lt;strong&gt;INSTALL&lt;/strong&gt; 按钮下载安装 node。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#hash_cli&quot; name=&quot;hash_cli&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用终端-命令行&quot;&gt;&lt;a href=&quot;#使用终端-命令行&quot; class=&quot;headerlink&quot; title=&quot;使用终端/命令行&quot;&gt;&lt;/a&gt;使用终端/命令行&lt;/h2&gt;&lt;h3 id=&quot;命令行&quot;&gt;&lt;a href=&quot;#命令行&quot; class=&quot;headerlink&quot; title=&quot;命令行&quot;&gt;&lt;/a&gt;命令行&lt;/h3&gt;&lt;p&gt;在 Windows 中可按 &lt;kbd&gt;徽标键&lt;/kbd&gt;（alt键左边）+ &lt;kbd&gt;R&lt;/kbd&gt; 打开输入 &lt;code&gt;cmd&lt;/code&gt; + &lt;kbd&gt;Enter&lt;/kbd&gt; 打开命令行。&lt;/p&gt;
&lt;h3 id=&quot;终端-Mac&quot;&gt;&lt;a href=&quot;#终端-Mac&quot; class=&quot;headerlink&quot; title=&quot;终端(Mac)&quot;&gt;&lt;/a&gt;终端(Mac)&lt;/h3&gt;&lt;p&gt;打开 Launchpad（像火箭一样的图标），在屏幕上方搜索框中输入 &lt;code&gt;终端&lt;/code&gt; + &lt;kbd&gt;Enter&lt;/kbd&gt; 打开终端。&lt;/p&gt;
&lt;h3 id=&quot;查看-node-版本号&quot;&gt;&lt;a href=&quot;#查看-node-版本号&quot; class=&quot;headerlink&quot; title=&quot;查看 node 版本号&quot;&gt;&lt;/a&gt;查看 node 版本号&lt;/h3&gt;&lt;p&gt;在终端/命令行中输入 &lt;code&gt;node -v&lt;/code&gt; 检测node是否安装成功，安装成功会显示出 node 的版本号。&lt;/p&gt;
&lt;h3 id=&quot;跳转目录&quot;&gt;&lt;a href=&quot;#跳转目录&quot; class=&quot;headerlink&quot; title=&quot;跳转目录&quot;&gt;&lt;/a&gt;跳转目录&lt;/h3&gt;&lt;p&gt;终端/命令行 中可使用 &lt;code&gt;cd 目录名&lt;/code&gt; 跳转至指定目录，Mac 中还可以使用 &lt;code&gt;ls&lt;/code&gt; 查看当前目录下的文件列表。&lt;/p&gt;
&lt;h4 id=&quot;Windows&quot;&gt;&lt;a href=&quot;#Windows&quot; class=&quot;headerlink&quot; title=&quot;Windows&quot;&gt;&lt;/a&gt;Windows&lt;/h4&gt;&lt;p&gt;Windows 下可使用如下命令跳转至指定目录：&lt;/p&gt;
&lt;figure class=&quot;highlight scilab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 跳转至 C 盘根目录&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; c:\&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 跳转至当前目录的 demo 文件夹&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; demo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 跳转至上一级&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ..&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Mac&quot;&gt;&lt;a href=&quot;#Mac&quot; class=&quot;headerlink&quot; title=&quot;Mac&quot;&gt;&lt;/a&gt;Mac&lt;/h4&gt;&lt;p&gt;Mac 中建议只在 Documents 目录下进行文件操作。&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 跳转至文档目录&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;cd&lt;/span&gt; /Users/你的用户名/Documents/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 或第一次打开终端时直接输入&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;cd&lt;/span&gt; Documents&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 查看目录下文件列表&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ls&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建文件夹&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;mkdir&lt;/span&gt; demo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 跳转至当前目录下的 demo 文件夹&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;cd&lt;/span&gt; demo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 跳转至上级目录&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;cd&lt;/span&gt; ..&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;退出运行状态&quot;&gt;&lt;a href=&quot;#退出运行状态&quot; class=&quot;headerlink&quot; title=&quot;退出运行状态&quot;&gt;&lt;/a&gt;退出运行状态&lt;/h3&gt;&lt;p&gt;如果你在命令行中启动了一些一直运行的命令，你的命令行会进入“运行”状态，此时你不可以在命令行进行其他操作。可通过 &lt;code&gt;Ctrl + C&lt;/code&gt; 停止 gulp。（Mac 中使用 &lt;code&gt;control + C&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;后面的章节中如果代码中存在 &lt;code&gt;gulp.watch&lt;/code&gt; 并在命令行运行了 &lt;code&gt;gulp&lt;/code&gt; 则需要使用 &lt;code&gt;Ctrl + C&lt;/code&gt; 退出任务。&lt;/p&gt;
&lt;h2 id=&quot;npm-模块管理器&quot;&gt;&lt;a href=&quot;#npm-模块管理器&quot; class=&quot;headerlink&quot; title=&quot;npm 模块管理器&quot;&gt;&lt;/a&gt;npm 模块管理器&lt;/h2&gt;&lt;p&gt;如果你了解 npm 则跳过此章节&lt;/p&gt;
&lt;p&gt;若你不了解npm 请阅读 &lt;a href=&quot;http://javascript.ruanyifeng.com/nodejs/npm.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;npm模块管理器&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装-gulp&quot;&gt;&lt;a href=&quot;#安装-gulp&quot; class=&quot;headerlink&quot; title=&quot;安装 gulp&quot;&gt;&lt;/a&gt;安装 gulp&lt;/h2&gt;&lt;p&gt;npm 是 node 的包管理工具，可以利用它安装 gulp 所需的包。（在安装 node 时已经自动安装了 npm）&lt;/p&gt;
&lt;p&gt;在命令行输入&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; -g gulp&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;若一直没安装成功，请&lt;a href=&quot;https://github.com/nimojs/blog/issues/20&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 cnpm 安装&lt;/a&gt;(npm的国内加速镜像)&lt;/p&gt;
&lt;p&gt;意思是：使用 npm 安装全局性的(&lt;code&gt;-g&lt;/code&gt;) gulp 包。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你安装失败，请输入&lt;code&gt;sudo npm install -g gulp&lt;/code&gt;使用管理员权限安装。（可能会要求输入密码）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装时请注意命令行的提示信息，安装完成后可在命令行输入 &lt;code&gt;gulp -v&lt;/code&gt; 以确认安装成功。&lt;/p&gt;
&lt;p&gt;至此，我们完成了准备工作。接着让 gulp 开始帮我们干活吧！&lt;/p&gt;
&lt;h1 id=&quot;使用-gulp-压缩-JS&quot;&gt;&lt;a href=&quot;#使用-gulp-压缩-JS&quot; class=&quot;headerlink&quot; title=&quot;使用 gulp 压缩 JS&quot;&gt;&lt;/a&gt;使用 gulp 压缩 JS&lt;/h1&gt;&lt;p&gt;压缩 js 代码可降低 js 文件大小，提高页面打开速度。在不利用 gulp 时我们需要通过各种工具手动完成压缩工作。&lt;/p&gt;
&lt;p&gt;所有的 gulp 代码编写都可以看做是将规律转化为代码的过程。&lt;/p&gt;
&lt;h2 id=&quot;规律-1&quot;&gt;&lt;a href=&quot;#规律-1&quot; class=&quot;headerlink&quot; title=&quot;规律&quot;&gt;&lt;/a&gt;规律&lt;/h2&gt;&lt;p&gt;找到 &lt;code&gt;js/&lt;/code&gt; 目录下的所有 js 文件，压缩它们，将压缩后的文件存放在 &lt;code&gt;dist/js/&lt;/code&gt; 目录下。&lt;/p&gt;
&lt;h2 id=&quot;gulp-代码&quot;&gt;&lt;a href=&quot;#gulp-代码&quot; class=&quot;headerlink&quot; title=&quot;gulp 代码&quot;&gt;&lt;/a&gt;gulp 代码&lt;/h2&gt;&lt;p&gt;你可以 &lt;a href=&quot;https://github.com/nimojs/gulp-book/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载所有示例代码&lt;/a&gt; 或 &lt;a href=&quot;https://github.com/nimojs/gulp-book/tree/master/demo/chapter2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在线查看代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建议&lt;/strong&gt;：你可以只阅读下面的代码与注释或同时阅读代码解释&lt;/p&gt;
&lt;p&gt;gulp 的所有配置代码都写在 &lt;code&gt;gulpfile.js&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、新建一个 &lt;code&gt;gulpfile.js&lt;/code&gt; 文件&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;chapter2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── &lt;span class=&quot;selector-tag&quot;&gt;gulpfile&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;二、在 &lt;code&gt;gulpfile.js&lt;/code&gt; 中编写代码&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 gulp&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;require()&lt;/code&gt; 是 node （CommonJS）中获取模块的语法。&lt;/p&gt;
&lt;p&gt;在 gulp 中你只需要理解 &lt;code&gt;require()&lt;/code&gt; 可以获取模块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;三、获取 &lt;code&gt;gulp-uglify&lt;/code&gt; 组件&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 uglify 模块（用于压缩 JS）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; uglify = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-uglify&#39;&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;四、创建压缩任务&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 压缩 js 文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在命令行使用 gulp script 启动此任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1. 找到文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;js/*.js&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 2. 压缩文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(uglify())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3. 另存压缩后的文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/js&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gulp.task(name, fn)&lt;/code&gt; - 定义任务，第一个参数是任务名，第二个参数是任务内容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gulp.src(path)&lt;/code&gt; - 选择文件，传入参数是文件路径。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gulp.dest(path)&lt;/code&gt; - 输出文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gulp.pipe()&lt;/code&gt; - 管道，你可以暂时将 pipe 理解为将操作加入执行队列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://www.gulpjs.com.cn/docs/api/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp API文档&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;五、跳转至 &lt;code&gt;gulpfile.js&lt;/code&gt; 所在目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开命令行使用 &lt;code&gt;cd&lt;/code&gt; 命令跳转至 &lt;code&gt;gulpfile.js&lt;/code&gt; 文件所在目录。&lt;/p&gt;
&lt;p&gt;例如我的 &lt;code&gt;gulpfile.js&lt;/code&gt; 文件保存在 &lt;code&gt;C:\gulp-book\demo\chapter2\gulpfile.js&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;那么就需要在命令行输入&lt;br&gt;&lt;figure class=&quot;highlight taggerscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cd C:&lt;span class=&quot;symbol&quot;&gt;\g&lt;/span&gt;ulp-book&lt;span class=&quot;symbol&quot;&gt;\d&lt;/span&gt;emo&lt;span class=&quot;symbol&quot;&gt;\c&lt;/span&gt;hapter2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mac 用户可使用 &lt;code&gt;cd Documents/gulp-book/demo/chapter2/&lt;/code&gt; 跳转&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;六、使用命令行运行 script 任务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在控制台输入 &lt;code&gt;gulp 任务名&lt;/code&gt; 可运行任务，此处我们输入 &lt;code&gt;gulp script&lt;/code&gt; 回车。&lt;/p&gt;
&lt;p&gt;注意：输入 &lt;code&gt;gulp script&lt;/code&gt; 后命令行将会提示错误信息&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在命令行输入&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp script&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Error: Cannot find module &lt;span class=&quot;string&quot;&gt;&#39;gulp-uglify&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at Function&lt;span class=&quot;selector-class&quot;&gt;.Module&lt;/span&gt;._resolveFilename (module&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;338&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at Function&lt;span class=&quot;selector-class&quot;&gt;.Module&lt;/span&gt;._load (module&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;280&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Cannot find module &amp;#39;gulp-uglify&amp;#39;&lt;/code&gt; 没有找到 &lt;code&gt;gulp-uglify&lt;/code&gt; 模块。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;七、安装 &lt;code&gt;gulp-uglify&lt;/code&gt; 模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为我们并没有安装 &lt;code&gt;gulp-uglify&lt;/code&gt; 模块到本地，所以找不到此模块。&lt;/p&gt;
&lt;p&gt;使用 npm 安装 &lt;code&gt;gulp-uglify&lt;/code&gt; 到本地&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; gulp-uglify&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装成功后你会看到如下信息：&lt;br&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp-uglify&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; node_modules/gulp-uglify&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── deepmerge&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2.7&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── uglify-js&lt;span class=&quot;variable&quot;&gt;@2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4.16&lt;/span&gt; (uglify-to-browserify&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;, async&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2.10&lt;/span&gt;, source-map&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.34&lt;/span&gt;, optimist&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;3.7&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── vinyl-sourcemaps-apply&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.4&lt;/span&gt; (source-map&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.43&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── through2&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;6.3&lt;/span&gt; (xtend&lt;span class=&quot;variable&quot;&gt;@4&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, readable-stream&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.33&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── gulp-util&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.4&lt;/span&gt; (array-differ&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, beeper&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, array-uniq&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;, object-assign&lt;span class=&quot;variable&quot;&gt;@2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, lodash._reinterpolate&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, lodash._reescape&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, lodash._reevaluate&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, replace-ext&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;, minimist&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;, chalk&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, lodash.template&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;3.2&lt;/span&gt;, vinyl&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4.6&lt;/span&gt;, multipipe&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;, dateformat&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.11&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;chapter2 $&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在你的文件夹中会新增一个 &lt;code&gt;node_modules&lt;/code&gt; 文件夹，这里面存放着 npm 安装的模块。&lt;/p&gt;
&lt;p&gt;目录结构：&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;├── gulpfile&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── node_modules&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	└── gulp-uglify&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接着输入 &lt;code&gt;gulp script&lt;/code&gt; 执行任务&lt;/p&gt;
&lt;figure class=&quot;highlight prolog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp script&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;57&lt;/span&gt;] &lt;span class=&quot;symbol&quot;&gt;Using&lt;/span&gt; gulpfile ~/&lt;span class=&quot;symbol&quot;&gt;Documents&lt;/span&gt;/code/gulp-book/demo/chapter2/gulpfile.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;57&lt;/span&gt;] &lt;span class=&quot;symbol&quot;&gt;Starting&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;57&lt;/span&gt;] &lt;span class=&quot;symbol&quot;&gt;Finished&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt; after &lt;span class=&quot;number&quot;&gt;6.13&lt;/span&gt; ms&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;八、编写 js 文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们发现 gulp 没有进行任何压缩操作。因为没有js这个目录，也没有 js 目录下的 &lt;code&gt;.js&lt;/code&gt; 后缀文件。&lt;/p&gt;
&lt;p&gt;创建 &lt;code&gt;a.js&lt;/code&gt; 文件，并编写如下内容&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// a.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;demo&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(msg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    alert(&lt;span class=&quot;string&quot;&gt;&#39;--------\r\n&#39;&lt;/span&gt; + msg + &lt;span class=&quot;string&quot;&gt;&#39;\r\n--------&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;demo(&lt;span class=&quot;string&quot;&gt;&#39;Hi&#39;&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;目录结构：&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;├── gulpfile&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├──  js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│	└── &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── node_modules&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	└── gulp-uglify&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接着在命令行输入 &lt;code&gt;gulp script&lt;/code&gt; 执行任务&lt;/p&gt;
&lt;p&gt;gulp 会在命令行当前目录下创建 &lt;code&gt;dist/js/&lt;/code&gt; 文件夹，并创建压缩后的 &lt;code&gt;a.js&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;目录结构：&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;├── gulpfile&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├──  js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│	└── &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├──  dist&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│	└── js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│		└── &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── node_modules&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	└── gulp-uglify&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-book/blob/master/demo/chapter2/dist/js/a.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dist/js/a.js&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;demo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;)&lt;/span&gt;&amp;#123;alert(&lt;span class=&quot;string&quot;&gt;&quot;--------\r\n&quot;&lt;/span&gt;+n+&lt;span class=&quot;string&quot;&gt;&quot;\r\n--------&quot;&lt;/span&gt;)&amp;#125;demo(&lt;span class=&quot;string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;九、检测代码修改自动执行任务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/a.js&lt;/code&gt;一旦有修改 就必须重新在命令行输入 &lt;code&gt;gulp script&lt;/code&gt; ，这很麻烦。&lt;/p&gt;
&lt;p&gt;可以使用 &lt;code&gt;gulp.watch(src, fn)&lt;/code&gt; 检测指定目录下文件的修改后执行任务。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;gulpfile.js&lt;/code&gt; 中编写如下代码：&lt;br&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 监听文件修改，当文件被修改则执行 script 任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp&lt;span class=&quot;selector-class&quot;&gt;.watch&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;js/*.js&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;]);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是没有命令可以运行 &lt;code&gt;gulp.watch()&lt;/code&gt;，需要将 &lt;code&gt;gulp.watch()&lt;/code&gt; 包含在一个任务中。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在命令行使用 gulp auto 启动此任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.task&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt;, function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 监听文件修改，当文件被修改则执行 script 任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp&lt;span class=&quot;selector-class&quot;&gt;.watch&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;js/*.js&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着在命令行输入 &lt;code&gt;gulp auto&lt;/code&gt;，自动监听 &lt;code&gt;js/*.js&lt;/code&gt; 文件的修改后压缩js。&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$gulp&lt;/span&gt; auto&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;09&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;45&lt;/span&gt;] Using gulpfile ~&lt;span class=&quot;regexp&quot;&gt;/Documents/code&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/gulp-book/demo&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/chapter2/gulpfile&lt;/span&gt;.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;09&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;45&lt;/span&gt;] Starting &lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;09&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;45&lt;/span&gt;] Finished &lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt; after &lt;span class=&quot;number&quot;&gt;9.19&lt;/span&gt; ms&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时修改 &lt;code&gt;js/a.js&lt;/code&gt; 中的代码并保存。命令行将会出现提示，表示检测到文件修改并压缩文件。&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;name&quot;&gt;21:11:01&lt;/span&gt;] Starting &lt;span class=&quot;symbol&quot;&gt;&#39;script&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;&#39;...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;name&quot;&gt;21:11:01&lt;/span&gt;] Finished &lt;span class=&quot;symbol&quot;&gt;&#39;script&lt;/span&gt;&#39; after &lt;span class=&quot;number&quot;&gt;2.85&lt;/span&gt; ms&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至此，我们完成了 gulp 压缩 js 文件的自动化代码编写。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;使用 &lt;code&gt;gulp.watch&lt;/code&gt; 后你的命令行会进入“运行”状态，此时你不可以在命令行进行其他操作。可通过 &lt;code&gt;Ctrl + C&lt;/code&gt; 停止 gulp。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mac 下使用 &lt;code&gt;control + C&lt;/code&gt; 停止 gulp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;十、使用 gulp.task(‘default’, fn) 定义默认任务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;增加如下代码&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt;]);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时你可以在命令行直接输入 &lt;code&gt;gulp&lt;/code&gt; +回车，运行 &lt;code&gt;script&lt;/code&gt; 和 &lt;code&gt;auto&lt;/code&gt; 任务。&lt;/p&gt;
&lt;p&gt;最终代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 gulp&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 uglify 模块（用于压缩 JS）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; uglify = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-uglify&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 压缩 js 文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在命令行使用 gulp script 启动此任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1. 找到文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;js/*.js&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 2. 压缩文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(uglify())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3. 另存压缩后的文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/js&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在命令行使用 gulp auto 启动此任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 监听文件修改，当文件被修改则执行 script 任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;js/*.js&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用 gulp.task(&#39;default&#39;) 定义默认任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在命令行使用 gulp 启动 script 任务和 auto 任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt;])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;去除注释后，你会发现只需要 11 行代码就可以让 gulp 自动监听 js 文件的修改后压缩代码。但是还有还有一些性能问题和缺少容错性，将在后面的章节详细说明。&lt;/p&gt;
&lt;p&gt;你可以访问 &lt;a href=&quot;https://github.com/terinjokes/gulp-uglify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-uglify&lt;/a&gt; 以查看更多用法。&lt;/p&gt;
&lt;h1 id=&quot;使用-gulp-压缩-CSS&quot;&gt;&lt;a href=&quot;#使用-gulp-压缩-CSS&quot; class=&quot;headerlink&quot; title=&quot;使用 gulp 压缩 CSS&quot;&gt;&lt;/a&gt;使用 gulp 压缩 CSS&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;压缩 css 代码可降低 css 文件大小，提高页面打开速度。&lt;/p&gt;
&lt;p&gt;我们接着将规律转换为 gulp 代码&lt;/p&gt;
&lt;h2 id=&quot;规律-2&quot;&gt;&lt;a href=&quot;#规律-2&quot; class=&quot;headerlink&quot; title=&quot;规律&quot;&gt;&lt;/a&gt;规律&lt;/h2&gt;&lt;p&gt;找到 &lt;code&gt;css/&lt;/code&gt; 目录下的所有 css 文件，压缩它们，将压缩后的文件存放在 &lt;code&gt;dist/css/&lt;/code&gt; 目录下。&lt;/p&gt;
&lt;h2 id=&quot;gulp-代码-1&quot;&gt;&lt;a href=&quot;#gulp-代码-1&quot; class=&quot;headerlink&quot; title=&quot;gulp 代码&quot;&gt;&lt;/a&gt;gulp 代码&lt;/h2&gt;&lt;p&gt;你可以 &lt;a href=&quot;https://github.com/nimojs/gulp-book/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载所有示例代码&lt;/a&gt; 或 &lt;a href=&quot;https://github.com/nimojs/gulp-book/tree/master/demo/chapter3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在线查看代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当熟悉 &lt;a href=&quot;chapter2.md&quot;&gt;使用 gulp 压缩 JS&lt;/a&gt; 的方法后，配置压缩 CSS 的 gulp 代码就变得很轻松。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、安装 gulp-minify-css&lt;/strong&gt; 模块&lt;/p&gt;
&lt;p&gt;提示：你需要使用命令行的 &lt;code&gt;cd&lt;/code&gt; 切换到对应目录后进行安装操作。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;chapter1.md&quot;&gt;学习使用命令行&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在命令行输入&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; gulp-minify-css&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装成功后你会看到如下信息：(安装时间可能会比较长)&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp-minify-css&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt; node_modules/gulp-minify-css&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── object-assign&lt;span class=&quot;variable&quot;&gt;@2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── vinyl-sourcemaps-apply&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.4&lt;/span&gt; (source-map&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.43&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── clean-css&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.8&lt;/span&gt; (commander&lt;span class=&quot;variable&quot;&gt;@2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;6.0&lt;/span&gt;, source-map&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.43&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── through2&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;6.3&lt;/span&gt; (xtend&lt;span class=&quot;variable&quot;&gt;@4&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, readable-stream&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.33&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── vinyl-bufferstream&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt; (bufferstreams&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── gulp-util&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.4&lt;/span&gt; (array-differ&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, beeper&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, array-uniq&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;, lodash._reescape&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, lodash._reinterpolate&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, lodash._reevaluate&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, replace-ext&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;, minimist&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;, multipipe&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;, vinyl&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4.6&lt;/span&gt;, chalk&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, lodash.template&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;3.2&lt;/span&gt;, dateformat&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.11&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;二、参照 &lt;a href=&quot;chapter2.md&quot;&gt;使用 gulp 压缩 JS&lt;/a&gt; 创建 &lt;code&gt;gulpfile.js&lt;/code&gt; 文件编写代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在对应目录创建 &lt;code&gt;gulpfile.js&lt;/code&gt; 文件并写入如下内容：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 gulp&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 minify-css 模块（用于压缩 CSS）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; minifyCSS = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-minify-css&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 压缩 css 文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在命令行使用 gulp css 启动此任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;css&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1. 找到文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;css/*.css&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 2. 压缩文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(minifyCSS())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3. 另存为压缩文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/css&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在命令行使用 gulp auto 启动此任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 监听文件修改，当文件被修改则执行 css 任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;css/*.css&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;css&#39;&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用 gulp.task(&#39;default&#39;) 定义默认任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在命令行使用 gulp 启动 css 任务和 auto 任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;css&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt;])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以访问 &lt;a href=&quot;https://github.com/jonathanepollack/gulp-minify-css&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-minify-css&lt;/a&gt; 以查看更多用法。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;三、创建 css 文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;gulpfile.js&lt;/code&gt; 对应目录创建 &lt;code&gt;css&lt;/code&gt; 文件夹，并在 &lt;code&gt;css/&lt;/code&gt; 目录下创建 &lt;code&gt;a.css&lt;/code&gt; 文件。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* a.css */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:pink;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;四、运行 gulp 查看效果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在命令行输入 &lt;code&gt;gulp&lt;/code&gt; +回车&lt;/p&gt;
&lt;p&gt;你将看到命令行出现如下提示&lt;/p&gt;
&lt;figure class=&quot;highlight prolog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;] &lt;span class=&quot;symbol&quot;&gt;Using&lt;/span&gt; gulpfile ~/&lt;span class=&quot;symbol&quot;&gt;Documents&lt;/span&gt;/code/gulp-book/demo/chapter3/gulpfile.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;] &lt;span class=&quot;symbol&quot;&gt;Starting&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;css&#39;&lt;/span&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;] &lt;span class=&quot;symbol&quot;&gt;Finished&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;css&#39;&lt;/span&gt; after &lt;span class=&quot;number&quot;&gt;6.21&lt;/span&gt; ms&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;] &lt;span class=&quot;symbol&quot;&gt;Starting&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;] &lt;span class=&quot;symbol&quot;&gt;Finished&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt; after &lt;span class=&quot;number&quot;&gt;5.42&lt;/span&gt; ms&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;] &lt;span class=&quot;symbol&quot;&gt;Starting&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;] &lt;span class=&quot;symbol&quot;&gt;Finished&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt; after &lt;span class=&quot;number&quot;&gt;5.71&lt;/span&gt; μs&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;gulp 会创建 &lt;code&gt;dist/css&lt;/code&gt; 目录，并创建 &lt;code&gt;a.css&lt;/code&gt; 文件，此文件存放压缩后的 css 代码。&lt;br&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-book/blob/master/demo/chapter3/dist/css/a.css&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dist/css/a.css&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-book/issues/12&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;访问论坛获取帮助&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;chapter4.md&quot;&gt;接着阅读：使用 gulp 压缩图片&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;使用-gulp-压缩图片&quot;&gt;&lt;a href=&quot;#使用-gulp-压缩图片&quot; class=&quot;headerlink&quot; title=&quot;使用 gulp 压缩图片&quot;&gt;&lt;/a&gt;使用 gulp 压缩图片&lt;/h1&gt;&lt;p&gt;请务必理解如下章节后阅读此章节：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;chapter1.md&quot;&gt;安装 Node 和 gulp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;chapter2.md&quot;&gt;使用 gulp 压缩 JS&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;访问论坛获取帮助&quot;&gt;&lt;a href=&quot;#访问论坛获取帮助&quot; class=&quot;headerlink&quot; title=&quot;访问论坛获取帮助&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-book/issues/13&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;访问论坛获取帮助&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;压缩 图片文件可降低文件大小，提高图片加载速度。&lt;/p&gt;
&lt;p&gt;找到规律转换为 gulp 代码&lt;/p&gt;
&lt;h2 id=&quot;规律-3&quot;&gt;&lt;a href=&quot;#规律-3&quot; class=&quot;headerlink&quot; title=&quot;规律&quot;&gt;&lt;/a&gt;规律&lt;/h2&gt;&lt;p&gt;找到 &lt;code&gt;images/&lt;/code&gt; 目录下的所有文件，压缩它们，将压缩后的文件存放在 &lt;code&gt;dist/images/&lt;/code&gt; 目录下。&lt;/p&gt;
&lt;h2 id=&quot;gulp-代码-2&quot;&gt;&lt;a href=&quot;#gulp-代码-2&quot; class=&quot;headerlink&quot; title=&quot;gulp 代码&quot;&gt;&lt;/a&gt;gulp 代码&lt;/h2&gt;&lt;p&gt;你可以 &lt;a href=&quot;https://github.com/nimojs/gulp-book/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载所有示例代码&lt;/a&gt; 或 &lt;a href=&quot;https://github.com/nimojs/gulp-book/tree/master/demo/chapter4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在线查看代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、安装 gulp-imagemin&lt;/strong&gt; 模块&lt;/p&gt;
&lt;p&gt;提示：你需要使用命令行的 &lt;code&gt;cd&lt;/code&gt; 切换至对应目录再进行安装操作和 gulp 启动操作。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;chapter1.md&quot;&gt;学习使用命令行&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在命令行输入&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; gulp-imagemin&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装成功后你会看到如下信息：(安装时间可能会比较长)&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp-imagemin&lt;span class=&quot;variable&quot;&gt;@2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2.1&lt;/span&gt; node_modules/gulp-imagemin&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── object-assign&lt;span class=&quot;variable&quot;&gt;@2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── pretty-bytes&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt; (get-stdin&lt;span class=&quot;variable&quot;&gt;@4&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── chalk&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt; (escape-string-regexp&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt;, ansi-styles&lt;span class=&quot;variable&quot;&gt;@2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;, supports-color&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;3.1&lt;/span&gt;, has-ansi&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt;, strip-ansi&lt;span class=&quot;variable&quot;&gt;@2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── through2-concurrent&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;3.1&lt;/span&gt; (through2&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;6.3&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├── gulp-util&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.4&lt;/span&gt; (array-differ&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, beeper&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, array-uniq&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;, lodash._reevaluate&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, lodash._reescape&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, lodash._reinterpolate&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, replace-ext&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;, minimist&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;, vinyl&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4.6&lt;/span&gt;, through2&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;6.3&lt;/span&gt;, multipipe&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;, lodash.template&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;3.2&lt;/span&gt;, dateformat&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.11&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── imagemin&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; (get-stdin&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;, optional&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.3&lt;/span&gt;, vinyl&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4.6&lt;/span&gt;, through2&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;6.3&lt;/span&gt;, stream-combiner&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2.1&lt;/span&gt;, concat-stream&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4.7&lt;/span&gt;, meow&lt;span class=&quot;variable&quot;&gt;@2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, vinyl-fs&lt;span class=&quot;variable&quot;&gt;@0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;3.13&lt;/span&gt;, imagemin-svgo&lt;span class=&quot;variable&quot;&gt;@4&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;, imagemin-optipng&lt;span class=&quot;variable&quot;&gt;@4&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;, imagemin-jpegtran&lt;span class=&quot;variable&quot;&gt;@4&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, imagemin-pngquant&lt;span class=&quot;variable&quot;&gt;@4&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, imagemin-gifsicle&lt;span class=&quot;variable&quot;&gt;@4&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;二、创建 &lt;code&gt;gulpfile.js&lt;/code&gt; 文件编写代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在对应目录创建 &lt;code&gt;gulpfile.js&lt;/code&gt; 文件并写入如下内容：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 gulp&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 gulp-imagemin 模块&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; imagemin = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-imagemin&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 压缩图片任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在命令行输入 gulp images 启动此任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;images&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1. 找到图片&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;images/*.*&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 2. 压缩图片&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(imagemin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            progressive: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3. 另存图片&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/images&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在命令行使用 gulp auto 启动此任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 监听文件修改，当文件被修改则执行 images 任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;images/*.*)&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;images&#39;&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用 gulp.task(&#39;default&#39;) 定义默认任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在命令行使用 gulp 启动 images 任务和 auto 任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;images&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt;])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以访问 &lt;a href=&quot;https://github.com/sindresorhus/gulp-imagemin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-imagemin&lt;/a&gt; 以查看更多用法。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;三、在 &lt;code&gt;images/&lt;/code&gt; 目录下存放图片&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;gulpfile.js&lt;/code&gt; 对应目录创建 &lt;code&gt;images&lt;/code&gt; 文件夹，并在 &lt;code&gt;images/&lt;/code&gt; 目录下存放图片。&lt;/p&gt;
&lt;p&gt;你可以访问 &lt;a href=&quot;https://github.com/nimojs/gulp-book/tree/master/demo/chapter4/images/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/nimojs/gulp-book/tree/master/demo/chapter4/images/&lt;/a&gt; 下载示例图片&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;四、运行 gulp 查看效果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在命令行输入 &lt;code&gt;gulp&lt;/code&gt; +回车&lt;/p&gt;
&lt;p&gt;你将看到命令行出现如下提示&lt;/p&gt;
&lt;figure class=&quot;highlight prolog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;] &lt;span class=&quot;symbol&quot;&gt;Using&lt;/span&gt; gulpfile ~/&lt;span class=&quot;symbol&quot;&gt;Documents&lt;/span&gt;/code/gulp-book/demo/chapter4/gulpfile.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;] &lt;span class=&quot;symbol&quot;&gt;Starting&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;images&#39;&lt;/span&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;] &lt;span class=&quot;symbol&quot;&gt;Finished&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;images&#39;&lt;/span&gt; after &lt;span class=&quot;number&quot;&gt;5.72&lt;/span&gt; ms&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;] &lt;span class=&quot;symbol&quot;&gt;Starting&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;] &lt;span class=&quot;symbol&quot;&gt;Finished&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt; after &lt;span class=&quot;number&quot;&gt;6.39&lt;/span&gt; ms&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;] &lt;span class=&quot;symbol&quot;&gt;Starting&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;] &lt;span class=&quot;symbol&quot;&gt;Finished&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt; after &lt;span class=&quot;number&quot;&gt;5.91&lt;/span&gt; μs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;] gulp-imagemin: &lt;span class=&quot;symbol&quot;&gt;Minified&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; images (saved &lt;span class=&quot;number&quot;&gt;25.83&lt;/span&gt; kB - &lt;span class=&quot;number&quot;&gt;5.2&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;%)&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;使用-gulp-编译-LESS&quot;&gt;&lt;a href=&quot;#使用-gulp-编译-LESS&quot; class=&quot;headerlink&quot; title=&quot;使用 gulp 编译 LESS&quot;&gt;&lt;/a&gt;使用 gulp 编译 LESS&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Less 是一门 CSS 预处理语言，它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; gulp-&lt;span class=&quot;keyword&quot;&gt;less&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 gulp&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 gulp-less 模块&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; less = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-less&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 编译less&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在命令行输入 gulp less 启动此任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;less&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1. 找到 less 文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;less/**.less&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 2. 编译为css&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(less())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3. 另存文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/css&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在命令行使用 gulp auto 启动此任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 监听文件修改，当文件被修改则执行 less 任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;less/**.less&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;less&#39;&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用 gulp.task(&#39;default&#39;) 定义默认任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在命令行使用 gulp 启动 less 任务和 auto 任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;less&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt;])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以访问 &lt;a href=&quot;https://github.com/plus3network/gulp-less&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-less&lt;/a&gt; 以查看更多用法。&lt;/p&gt;
&lt;h2 id=&quot;LESS-代码和编译后的CSS代码&quot;&gt;&lt;a href=&quot;#LESS-代码和编译后的CSS代码&quot; class=&quot;headerlink&quot; title=&quot;LESS 代码和编译后的CSS代码&quot;&gt;&lt;/a&gt;LESS 代码和编译后的CSS代码&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-book/tree/master/demo/chapter5/less/a.less&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;less/a.less&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;.less&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	a&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        color:pink;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-book/tree/master/demo/chapter5/less/import.less&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;less/import.less&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@import &quot;a.less&quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.import&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	a&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		color:red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-book/tree/master/demo/chapter5/dist/css/a.css&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;less/a.css&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.less&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: pink;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-book/tree/master/demo/chapter5/dist/css/import.css&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;less/import.css&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.less&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: pink;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.import&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;使用-gulp-编译-Sass&quot;&gt;&lt;a href=&quot;#使用-gulp-编译-Sass&quot; class=&quot;headerlink&quot; title=&quot;使用 gulp 编译 Sass&quot;&gt;&lt;/a&gt;使用 gulp 编译 Sass&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;无论是 &lt;code&gt;node-sass&lt;/code&gt; 还是 &lt;code&gt;ruby-sass&lt;/code&gt; 使用 npm 安装都非常的慢，甚至会装不上。及其不利于团队协作。建议使用 less 作为 css 预处理器。&lt;br&gt;如果因为 less 不支持自定义函数选择用 sass 可以使用 &lt;a href=&quot;https://github.com/seven-phases-max/less-plugin-functions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;less-plugin-functions&lt;/a&gt; 让 less 支持自定义函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;gulp-sass&quot;&gt;&lt;a href=&quot;#gulp-sass&quot; class=&quot;headerlink&quot; title=&quot;gulp-sass&quot;&gt;&lt;/a&gt;gulp-sass&lt;/h2&gt;&lt;p&gt;本章使用的是 ruby-sass 如果你不方便安装 ruby 或编译速度慢，建议使用 &lt;a href=&quot;https://github.com/dlmanning/gulp-sass&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-sass&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Sass 是一种 CSS 的开发工具，提供了许多便利的写法，大大节省了开发者的时间，使得 CSS 的开发，变得简单和可维护。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装-1&quot;&gt;&lt;a href=&quot;#安装-1&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; gulp-ruby-sass&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;基本用法-1&quot;&gt;&lt;a href=&quot;#基本用法-1&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;p&gt;你可以 &lt;a href=&quot;https://github.com/nimojs/gulp-book/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载所有示例代码&lt;/a&gt; 或 &lt;a href=&quot;https://github.com/nimojs/gulp-book/tree/master/demo/chapter6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在线查看代码&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 gulp&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 gulp-ruby-sass 模块&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sass = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-ruby-sass&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 编译sass&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在命令行输入 gulp sass 启动此任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;sass&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sass(&lt;span class=&quot;string&quot;&gt;&#39;sass/&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(&lt;span class=&quot;string&quot;&gt;&#39;Error!&#39;&lt;/span&gt;, err.message);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/css&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在命令行使用 gulp auto 启动此任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 监听文件修改，当文件被修改则执行 images 任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;sass/**/*.scss&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;sass&#39;&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用 gulp.task(&#39;default&#39;) 定义默认任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在命令行使用 gulp 启动 sass 任务和 auto 任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;sass&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;auto&#39;&lt;/span&gt;])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Sass-代码和编译后的-CSS-代码&quot;&gt;&lt;a href=&quot;#Sass-代码和编译后的-CSS-代码&quot; class=&quot;headerlink&quot; title=&quot;Sass 代码和编译后的 CSS 代码&quot;&gt;&lt;/a&gt;Sass 代码和编译后的 CSS 代码&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-book/tree/master/demo/chapter6/sass/a.scss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sass/a.scss&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;.sass&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	a&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        color:pink;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-book/tree/master/demo/chapter6/sass/import.scss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sass/import.scss&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@import &quot;a.scss&quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.import&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	a&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		color:red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-book/tree/master/demo/chapter6/dist/css/a.css&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sass/a.css&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.sass&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: pink;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-book/tree/master/demo/chapter6/dist/css/import.css&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sass/import.css&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.sass&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: pink;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.import&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;使用-gulp-构建一个项目&quot;&gt;&lt;a href=&quot;#使用-gulp-构建一个项目&quot; class=&quot;headerlink&quot; title=&quot;使用 gulp 构建一个项目&quot;&gt;&lt;/a&gt;使用 gulp 构建一个项目&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;本章将介绍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-watch-path&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-watch-path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gulpjs/gulp/blob/master/docs/recipes/combining-streams-to-handle-errors.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stream-combiner2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/floridoo/gulp-sourcemaps&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-sourcemaps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/gulp-autoprefixer/blob/master/package.json&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-autoprefixer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并将之前所有章节的内容组合起来编写一个前端项目所需的 gulp 代码。&lt;/p&gt;
&lt;p&gt;你可以在 &lt;a href=&quot;https://github.com/nimojs/gulp-demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nimojs/gulp-demo&lt;/a&gt; 查看完整代码。&lt;/p&gt;
&lt;p&gt;若你不了解npm 请务必阅读 &lt;a href=&quot;http://javascript.ruanyifeng.com/nodejs/npm.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;npm模块管理器&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;package-json&quot;&gt;&lt;a href=&quot;#package-json&quot; class=&quot;headerlink&quot; title=&quot;package.json&quot;&gt;&lt;/a&gt;package.json&lt;/h2&gt;&lt;p&gt;如果你熟悉 npm 则可以利用 &lt;code&gt;package.json&lt;/code&gt; 保存所有 &lt;code&gt;npm install --save-dev gulp-xxx&lt;/code&gt; 模块依赖和模块版本。&lt;/p&gt;
&lt;p&gt;在命令行输入&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;npm&lt;/span&gt; init&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会依次要求补全项目信息，不清楚的可以直接回车跳过&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;name:&lt;/span&gt; (gulp-demo)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;version:&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;description:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;entry &lt;span class=&quot;string&quot;&gt;point:&lt;/span&gt; (index.js)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;test &lt;span class=&quot;string&quot;&gt;command:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Is &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; ok? (yes)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最终会在当前目录中创建 &lt;code&gt;package.json&lt;/code&gt; 文件并生成类似如下代码：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;gulp-demo&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;0.0.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;repository&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;git&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;https://github.com/nimojs/gulp-demo.git&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;keywords&quot;&lt;/span&gt;: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;author&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;nimojs &amp;lt;nimo.jser@gmail.com&amp;gt;&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;license&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;MIT&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;bugs&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;https://github.com/nimojs/gulp-demo/issues&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;homepage&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;https://github.com/nimojs/gulp-demo&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h3&gt;&lt;p&gt;安装 gulp 到项目（防止全局 gulp 升级后与此项目 &lt;code&gt;gulpfile.js&lt;/code&gt; 代码不兼容）&lt;br&gt;&lt;figure class=&quot;highlight q&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install gulp --&lt;span class=&quot;built_in&quot;&gt;save&lt;/span&gt;-&lt;span class=&quot;built_in&quot;&gt;dev&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时打开 &lt;code&gt;package.json&lt;/code&gt; 会发现多了如下代码&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;gulp&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^3.8.11&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;声明此项目的开发依赖 gulp&lt;/p&gt;
&lt;p&gt;接着安装其他依赖：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;安装模块较多，请耐心等待，若一直安装失败可使用&lt;a href=&quot;http://npm.taobao.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;npm.taobao.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; gulp-uglify gulp-watch-&lt;span class=&quot;keyword&quot;&gt;path&lt;/span&gt; stream-combiner2 gulp-sourcemaps gulp-minify-css gulp-autoprefixer gulp-&lt;span class=&quot;keyword&quot;&gt;less&lt;/span&gt; gulp-ruby-sass gulp-imagemin gulp-util &lt;span class=&quot;comment&quot;&gt;--save-dev&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时，&lt;a href=&quot;https://github.com/nimojs/gulp-demo/blob/master/package.json&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;package.json&lt;/a&gt; 将会更新&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;colors&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.0.3&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^3.8.11&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp-autoprefixer&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^2.1.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp-imagemin&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^2.2.1&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp-less&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^3.0.2&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp-minify-css&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.0.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp-ruby-sass&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.0.1&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp-sourcemaps&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.5.1&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp-uglify&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.1.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gulp-watch-path&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^0.0.7&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;stream-combiner2&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.0.2&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当你将这份 gulpfile.js 配置分享给你的朋友时，就不需要将 &lt;code&gt;node_modules/&lt;/code&gt; 发送给他，他只需在命令行输入&lt;br&gt;&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就可以检测 &lt;code&gt;package.json&lt;/code&gt; 中的 &lt;code&gt;devDependencies&lt;/code&gt; 并安装所有依赖。&lt;/p&gt;
&lt;h2 id=&quot;设计目录结构&quot;&gt;&lt;a href=&quot;#设计目录结构&quot; class=&quot;headerlink&quot; title=&quot;设计目录结构&quot;&gt;&lt;/a&gt;设计目录结构&lt;/h2&gt;&lt;p&gt;我们将文件分为2类，一类是源码，一类是编译压缩后的版本。文件夹分别为 &lt;code&gt;src&lt;/code&gt; 和 &lt;code&gt;dist&lt;/code&gt;。(注意区分 &lt;code&gt;dist&lt;/code&gt; 和 ·&lt;code&gt;dest&lt;/code&gt; 的区别)&lt;/p&gt;
&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;└── src/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;│&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── &lt;span class=&quot;built_in&quot;&gt;dist&lt;/span&gt;/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;dist/&lt;/code&gt; 目录下的文件都是根据 &lt;code&gt;src/&lt;/code&gt; 下所有源码文件构建而成。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;src/&lt;/code&gt; 下创建前端资源对应的的文件夹&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;└── src/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	├── less/    *&lt;span class=&quot;selector-class&quot;&gt;.less&lt;/span&gt; 文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	├── sass/    *&lt;span class=&quot;selector-class&quot;&gt;.scss&lt;/span&gt; *&lt;span class=&quot;selector-class&quot;&gt;.sass&lt;/span&gt; 文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	├── css/     *&lt;span class=&quot;selector-class&quot;&gt;.css&lt;/span&gt;  文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	├── js/      *&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt; 文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	├── fonts/   字体文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    └── images/   图片&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;└── dist/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以点击 &lt;a href=&quot;https://github.com/nimojs/gulp-demo/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nimojs/gulp-demo&lt;/a&gt; 下载本章代码。&lt;/p&gt;
&lt;h2 id=&quot;让命令行输出的文字带颜色&quot;&gt;&lt;a href=&quot;#让命令行输出的文字带颜色&quot; class=&quot;headerlink&quot; title=&quot;让命令行输出的文字带颜色&quot;&gt;&lt;/a&gt;让命令行输出的文字带颜色&lt;/h2&gt;&lt;p&gt;gulp 自带的输出都带时间和颜色，这样很容易识别。我们利用 &lt;a href=&quot;https://github.com/gulpjs/gulp-util&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-util&lt;/a&gt; 实现同样的效果。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gutil = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-util&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gutil.log(&lt;span class=&quot;string&quot;&gt;&#39;message&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gutil.log(gutil.colors.red(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gutil.log(gutil.colors.green(&lt;span class=&quot;string&quot;&gt;&#39;message:&#39;&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&quot;some&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 &lt;code&gt;gulp&lt;/code&gt; 启动默认任务以测试&lt;br&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/3949015/7137629/a1def1b8-e2ed-11e4-83e0-5a6adb22de6f.png&quot; alt=&quot;gulp-util&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置-JS-任务&quot;&gt;&lt;a href=&quot;#配置-JS-任务&quot; class=&quot;headerlink&quot; title=&quot;配置 JS 任务&quot;&gt;&lt;/a&gt;配置 JS 任务&lt;/h2&gt;&lt;h3 id=&quot;gulp-uglify&quot;&gt;&lt;a href=&quot;#gulp-uglify&quot; class=&quot;headerlink&quot; title=&quot;gulp-uglify&quot;&gt;&lt;/a&gt;gulp-uglify&lt;/h3&gt;&lt;p&gt;检测&lt;code&gt;src/js/&lt;/code&gt;目录下的 js 文件修改后，压缩 &lt;code&gt;js/&lt;/code&gt; 中所有 js 文件并输出到 &lt;code&gt;dist/js/&lt;/code&gt; 中&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; uglify = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-uglify&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;uglifyjs&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;src/js/**/*.js&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(uglify())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/js&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;src/js/**/*.js&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;uglifyjs&#39;&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;src/js/**/*.js&lt;/code&gt; 是 glob 语法。&lt;a href=&quot;http://baike.baidu.com/view/4019153.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度百科：glob模式&lt;/a&gt; 、&lt;a href=&quot;https://github.com/isaacs/node-glob&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-glob&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在命令行输入 &lt;code&gt;gulp&lt;/code&gt; 后会出现如下消息，表示已经启动。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;] Using gulpfile ~&lt;span class=&quot;regexp&quot;&gt;/Documents/code&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/gulp-book/demo&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/chapter7/gulpfile&lt;/span&gt;.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;] Starting &lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;] Finished &lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt; after &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt; ms&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时编辑 &lt;a href=&quot;https://github.com/nimojs/gulp-demo/blob/master/src/js/log.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;src/js/log.js&lt;/a&gt; 文件并保存，命令行会出现如下消息，表示检测到 &lt;code&gt;src/js/**/*.js&lt;/code&gt; 文件修改后重新编译所有 js。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;52&lt;/span&gt;] Starting &lt;span class=&quot;string&quot;&gt;&#39;js&#39;&lt;/span&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;52&lt;/span&gt;] Finished &lt;span class=&quot;string&quot;&gt;&#39;js&#39;&lt;/span&gt; after &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt; ms&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;gulp-watch-path&quot;&gt;&lt;a href=&quot;#gulp-watch-path&quot; class=&quot;headerlink&quot; title=&quot;gulp-watch-path&quot;&gt;&lt;/a&gt;gulp-watch-path&lt;/h3&gt;&lt;p&gt;此配置有个性能问题，当 &lt;code&gt;gulp.watch&lt;/code&gt; 检测到  &lt;code&gt;src/js/&lt;/code&gt; 目录下的js文件有修改时会将所有文件全部编译。实际上我们只需要重新编译被修改的文件。&lt;/p&gt;
&lt;p&gt;简单介绍 &lt;code&gt;gulp.watch&lt;/code&gt; 第二个参数为 &lt;code&gt;function&lt;/code&gt; 时的用法。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;src/js/**/*.js&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(event);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	当修改 src/js/log.js 文件时&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    event &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		// 发生改变的类型，不管是添加，改变或是删除&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        type: &#39;changed&#39;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		// 触发事件的文件路径&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        path: &#39;/Users/nimojs/Documents/code/gulp-book/demo/chapter7/src/js/log.js&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以利用 &lt;code&gt;event&lt;/code&gt; 给到的信息，检测到某个 js 文件被修改时，只编写当前修改的 js 文件。&lt;/p&gt;
&lt;p&gt;可以利用 &lt;code&gt;gulp-watch-path&lt;/code&gt; 配合 &lt;code&gt;event&lt;/code&gt; 获取编译路径和输出路径。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; watchPath = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-watch-path&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;watchjs&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;src/js/**/*.js&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; paths = watchPath(event, &lt;span class=&quot;string&quot;&gt;&#39;src/&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;dist/&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        paths&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123; srcPath: &#39;src/js/log.js&#39;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              srcDir: &#39;src/js/&#39;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              distPath: &#39;dist/js/log.js&#39;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              distDir: &#39;dist/js/&#39;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              srcFilename: &#39;log.js&#39;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              distFilename: &#39;log.js&#39; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		gutil.log(gutil.colors.green(event.type) + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + paths.srcPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gutil.log(&lt;span class=&quot;string&quot;&gt;&#39;Dist &#39;&lt;/span&gt; + paths.distPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gulp.src(paths.srcPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(uglify())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(gulp.dest(paths.distDir))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;watchjs&#39;&lt;/span&gt;])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-book/tree/master/demo/chapter7/use-gulp-watch-path.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;use-gulp-watch-path 完整代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;watchPath(event, search, replace, distExt)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;event&lt;/td&gt;
&lt;td&gt;&lt;code&gt;gulp.watch&lt;/code&gt; 回调函数的 &lt;code&gt;event&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search&lt;/td&gt;
&lt;td&gt;需要被替换的起始字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;replace&lt;/td&gt;
&lt;td&gt;第三个参数是新的的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;distExt&lt;/td&gt;
&lt;td&gt;扩展名(非必填)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;此时编辑 &lt;a href=&quot;https://github.com/nimojs/gulp-demo/blob/master/src/js/log.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;src/js/log.js&lt;/a&gt; 文件并保存，命令行会出现消息，表示检测到 &lt;code&gt;src/js/log.js&lt;/code&gt; 文件修改后只重新编译 &lt;code&gt;log.js&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;] changed src/js/log.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;] Dist dist/js/log.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以访问 &lt;a href=&quot;https://github.com/nimojs/gulp-watch-path&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-watch-path&lt;/a&gt; 了解更多。&lt;/p&gt;
&lt;h3 id=&quot;stream-combiner2&quot;&gt;&lt;a href=&quot;#stream-combiner2&quot; class=&quot;headerlink&quot; title=&quot;stream-combiner2&quot;&gt;&lt;/a&gt;stream-combiner2&lt;/h3&gt;&lt;p&gt;编辑 &lt;code&gt;log.js&lt;/code&gt; 文件时，如果文件中有 js 语法错误时，gulp 会终止运行并报错。&lt;/p&gt;
&lt;p&gt;当 log.js 缺少 &lt;code&gt;)&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;log(&lt;span class=&quot;string&quot;&gt;&#39;gulp-book&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;并保存文件时出现如下错误，但是错误信息不全面。而且还会让 gulp 停止运行。&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;events.&lt;span class=&quot;symbol&quot;&gt;js:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;85&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      throw er; &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; Unhandled &lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt; event&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ^&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Error&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at new JS_Parse_Error (&lt;span class=&quot;regexp&quot;&gt;/Users/nimojs&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/Documents/code&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/gulp-book/demo&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/chapter7/node&lt;/span&gt;_modules/gulp-uglify/node_modules/uglify-js/&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;lib&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;parse&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;js&lt;/span&gt;:189:18)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;js_error (&lt;span class=&quot;regexp&quot;&gt;/Users/nimojs&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/Documents/code&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/gulp-book/demo&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/chapter7/node&lt;/span&gt;_modules/gulp-&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-book/demo/chapter7/node_modules/gulp-uglify/node_modules/uglify-js/&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;lib&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;parse&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;js&lt;/span&gt;:1165:20)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at maybe_unary (&lt;span class=&quot;regexp&quot;&gt;/Users/nimojs&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/Documents/code&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/gulp-book/demo&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/chapter7/node&lt;/span&gt;_modules/gulp-uglify/node_modules/uglify-js/&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;lib&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;parse&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;js&lt;/span&gt;:1328:19)&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;应对这种情况，我们可以使用 &lt;a href=&quot;https://github.com/gulpjs/gulp/blob/master/docs/recipes/combining-streams-to-handle-errors.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Combining streams to handle errors&lt;/a&gt; 文档中推荐的 &lt;a href=&quot;https://github.com/substack/stream-combiner2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stream-combiner2&lt;/a&gt;  捕获错误信息。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; handleError = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; colors = gutil.colors;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gutil.log(colors.red(&lt;span class=&quot;string&quot;&gt;&#39;Error!&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gutil.log(&lt;span class=&quot;string&quot;&gt;&#39;fileName: &#39;&lt;/span&gt; + colors.red(err.fileName))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gutil.log(&lt;span class=&quot;string&quot;&gt;&#39;lineNumber: &#39;&lt;/span&gt; + colors.red(err.lineNumber))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gutil.log(&lt;span class=&quot;string&quot;&gt;&#39;message: &#39;&lt;/span&gt; + err.message)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gutil.log(&lt;span class=&quot;string&quot;&gt;&#39;plugin: &#39;&lt;/span&gt; + colors.yellow(err.plugin))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; combiner = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;stream-combiner2&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;watchjs&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;src/js/**/*.js&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; paths = watchPath(event, &lt;span class=&quot;string&quot;&gt;&#39;src/&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;dist/&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        paths&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123; srcPath: &#39;src/js/log.js&#39;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              srcDir: &#39;src/js/&#39;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              distPath: &#39;dist/js/log.js&#39;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              distDir: &#39;dist/js/&#39;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              srcFilename: &#39;log.js&#39;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              distFilename: &#39;log.js&#39; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gutil.log(gutil.colors.green(event.type) + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + paths.srcPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gutil.log(&lt;span class=&quot;string&quot;&gt;&#39;Dist &#39;&lt;/span&gt; + paths.distPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; combined = combiner.obj([&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            gulp.src(paths.srcPath),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            uglify(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            gulp.dest(paths.distDir)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        combined.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, handleError)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-book/tree/master/demo/chapter7/watchjs-1.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;watchjs-1 完整代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此时当编译错误的语法时，命令行会出现错误提示。而且不会让 gulp 停止运行。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;changed:&lt;/span&gt;src&lt;span class=&quot;regexp&quot;&gt;/js/&lt;/span&gt;log.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;dist:&lt;/span&gt;dist&lt;span class=&quot;regexp&quot;&gt;/js/&lt;/span&gt;log.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--------------&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Error!&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;fileName:&lt;/span&gt; &lt;span class=&quot;regexp&quot;&gt;/Users/&lt;/span&gt;nimojs&lt;span class=&quot;regexp&quot;&gt;/Documents/&lt;/span&gt;code&lt;span class=&quot;regexp&quot;&gt;/gulp-book/&lt;/span&gt;demo&lt;span class=&quot;regexp&quot;&gt;/chapter7/&lt;/span&gt;src&lt;span class=&quot;regexp&quot;&gt;/js/&lt;/span&gt;log.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;lineNumber:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;message:&lt;/span&gt; &lt;span class=&quot;regexp&quot;&gt;/Users/&lt;/span&gt;nimojs&lt;span class=&quot;regexp&quot;&gt;/Documents/&lt;/span&gt;code&lt;span class=&quot;regexp&quot;&gt;/gulp-book/&lt;/span&gt;demo&lt;span class=&quot;regexp&quot;&gt;/chapter7/&lt;/span&gt;src&lt;span class=&quot;regexp&quot;&gt;/js/&lt;/span&gt;log.&lt;span class=&quot;string&quot;&gt;js:&lt;/span&gt; Unexpected token eof «undefined», expected punc «,»&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;plugin:&lt;/span&gt; gulp-uglify&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;gulp-sourcemaps&quot;&gt;&lt;a href=&quot;#gulp-sourcemaps&quot; class=&quot;headerlink&quot; title=&quot;gulp-sourcemaps&quot;&gt;&lt;/a&gt;gulp-sourcemaps&lt;/h3&gt;&lt;p&gt;JS 压缩前和压缩后比较&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 压缩前&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; log = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;msg&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;--------&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(msg)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;--------&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log(&amp;#123;a:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log(&lt;span class=&quot;string&quot;&gt;&#39;gulp-book&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 压缩后&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; log=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;o&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;--------&quot;&lt;/span&gt;),&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(o),&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;--------&quot;&lt;/span&gt;)&amp;#125;;log(&amp;#123;a:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;),log(&lt;span class=&quot;string&quot;&gt;&quot;gulp-book&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;压缩后的代码不存在换行符和空白符，导致出错后很难调试，好在我们可以使用 &lt;a href=&quot;http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sourcemap&lt;/a&gt; 帮助调试&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sourcemaps = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-sourcemaps&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; combined = combiner.obj([&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.src(paths.srcPath),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sourcemaps.init(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    uglify(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sourcemaps.write(&lt;span class=&quot;string&quot;&gt;&#39;./&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.dest(paths.distDir)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-book/tree/master/demo/chapter7/watchjs-1.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;watchjs-2 完整代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此时 &lt;code&gt;dist/js/&lt;/code&gt; 中也会生成对应的 &lt;code&gt;.map&lt;/code&gt; 文件，以便使用 Chrome 控制台调试代码 &lt;a href=&quot;https://github.com/nimojs/gulp-demo/blob/master/src/js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在线文件示例：src/js/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;至此，我们完成了检测文件修改后压缩 JS 的 gulp 任务配置。&lt;/p&gt;
&lt;p&gt;有时我们也需要一次编译所有 js 文件。可以配置 &lt;code&gt;uglifyjs&lt;/code&gt; 任务。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;uglifyjs&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; combined = combiner.obj([&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;src/js/**/*.js&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sourcemaps.init(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        uglify(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sourcemaps.write(&lt;span class=&quot;string&quot;&gt;&#39;./&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/js/&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    combined.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, handleError)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在命令行输入 &lt;code&gt;gulp uglifyjs&lt;/code&gt; 以压缩 &lt;code&gt;src/js/&lt;/code&gt; 下的所有 js 文件。&lt;/p&gt;
&lt;h2 id=&quot;配置-CSS-任务&quot;&gt;&lt;a href=&quot;#配置-CSS-任务&quot; class=&quot;headerlink&quot; title=&quot;配置 CSS 任务&quot;&gt;&lt;/a&gt;配置 CSS 任务&lt;/h2&gt;&lt;p&gt;有时我们不想使用 LESS 或 SASS而是直接编写 CSS，但我们需要压缩 CSS 以提高页面加载速度。&lt;/p&gt;
&lt;h3 id=&quot;gulp-minify-css&quot;&gt;&lt;a href=&quot;#gulp-minify-css&quot; class=&quot;headerlink&quot; title=&quot;gulp-minify-css&quot;&gt;&lt;/a&gt;gulp-minify-css&lt;/h3&gt;&lt;p&gt;按照本章中压缩 JS 的方式，先编写 &lt;code&gt;watchcss&lt;/code&gt; 任务&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; minifycss = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-minify-css&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;watchcss&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;src/css/**/*.css&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; paths = watchPath(event, &lt;span class=&quot;string&quot;&gt;&#39;src/&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;dist/&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		gutil.log(gutil.colors.green(event.type) + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + paths.srcPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gutil.log(&lt;span class=&quot;string&quot;&gt;&#39;Dist &#39;&lt;/span&gt; + paths.distPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gulp.src(paths.srcPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(sourcemaps.init())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(minifycss())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(sourcemaps.write(&lt;span class=&quot;string&quot;&gt;&#39;./&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(gulp.dest(paths.distDir))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;watchjs&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;watchcss&#39;&lt;/span&gt;])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;gulp-autoprefixer&quot;&gt;&lt;a href=&quot;#gulp-autoprefixer&quot; class=&quot;headerlink&quot; title=&quot;gulp-autoprefixer&quot;&gt;&lt;/a&gt;gulp-autoprefixer&lt;/h3&gt;&lt;p&gt;autoprefixer 解析 CSS 文件并且添加浏览器前缀到CSS规则里。&lt;br&gt;通过示例帮助理解&lt;/p&gt;
&lt;p&gt;autoprefixer 处理前：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.demo&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:flex;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;autoprefixer 处理后：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.demo&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:-webkit-flex;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:-ms-flexbox;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:flex;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你只需要关心编写标准语法的 css，autoprefixer 会自动补全。&lt;/p&gt;
&lt;p&gt;在 watchcss 任务中加入 autoprefixer:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;watchcss&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;src/css/**/*.css&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; paths = watchPath(event, &lt;span class=&quot;string&quot;&gt;&#39;src/&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;dist/&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		gutil.log(gutil.colors.green(event.type) + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + paths.srcPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gutil.log(&lt;span class=&quot;string&quot;&gt;&#39;Dist &#39;&lt;/span&gt; + paths.distPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gulp.src(paths.srcPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(sourcemaps.init())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(autoprefixer(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              browsers: &lt;span class=&quot;string&quot;&gt;&#39;last 2 versions&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(minifycss())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(sourcemaps.write(&lt;span class=&quot;string&quot;&gt;&#39;./&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(gulp.dest(paths.distDir))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更多 autoprefixer 参数请查看 &lt;a href=&quot;https://github.com/sindresorhus/gulp-autoprefixer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-autoprefixer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有时我们也需要一次编译所有 css 文件。可以配置 &lt;code&gt;minifyss&lt;/code&gt; 任务。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;minifycss&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;src/css/**/*.css&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(sourcemaps.init())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(autoprefixer(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          browsers: &lt;span class=&quot;string&quot;&gt;&#39;last 2 versions&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(minifycss())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(sourcemaps.write(&lt;span class=&quot;string&quot;&gt;&#39;./&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/css/&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在命令行输入 &lt;code&gt;gulp minifyss&lt;/code&gt; 以压缩 &lt;code&gt;src/css/&lt;/code&gt; 下的所有 .css 文件并复制到 &lt;code&gt;dist/css&lt;/code&gt; 目录下&lt;/p&gt;
&lt;h2 id=&quot;配置-Less-任务&quot;&gt;&lt;a href=&quot;#配置-Less-任务&quot; class=&quot;headerlink&quot; title=&quot;配置 Less 任务&quot;&gt;&lt;/a&gt;配置 Less 任务&lt;/h2&gt;&lt;p&gt;参考配置 JavaScript 任务的方式配置 less 任务&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; less = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-less&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;watchless&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;src/less/**/*.less&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; paths = watchPath(event, &lt;span class=&quot;string&quot;&gt;&#39;src/less/&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;dist/css/&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		gutil.log(gutil.colors.green(event.type) + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + paths.srcPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gutil.log(&lt;span class=&quot;string&quot;&gt;&#39;Dist &#39;&lt;/span&gt; + paths.distPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; combined = combiner.obj([&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            gulp.src(paths.srcPath),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            sourcemaps.init(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            autoprefixer(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              browsers: &lt;span class=&quot;string&quot;&gt;&#39;last 2 versions&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            less(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            minifycss(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            sourcemaps.write(&lt;span class=&quot;string&quot;&gt;&#39;./&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            gulp.dest(paths.distDir)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        combined.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, handleError)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;lesscss&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; combined = combiner.obj([&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;src/less/**/*.less&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            sourcemaps.init(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            autoprefixer(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              browsers: &lt;span class=&quot;string&quot;&gt;&#39;last 2 versions&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            less(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            minifycss(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            sourcemaps.write(&lt;span class=&quot;string&quot;&gt;&#39;./&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/css/&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    combined.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, handleError)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;watchjs&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;watchcss&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;watchless&#39;&lt;/span&gt;])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;配置-Sass-任务&quot;&gt;&lt;a href=&quot;#配置-Sass-任务&quot; class=&quot;headerlink&quot; title=&quot;配置 Sass 任务&quot;&gt;&lt;/a&gt;配置 Sass 任务&lt;/h2&gt;&lt;p&gt;参考配置 JavaScript 任务的方式配置 Sass 任务&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;watchsass&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;src/sass/**/*&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; paths = watchPath(event, &lt;span class=&quot;string&quot;&gt;&#39;src/sass/&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;dist/css/&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		gutil.log(gutil.colors.green(event.type) + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + paths.srcPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gutil.log(&lt;span class=&quot;string&quot;&gt;&#39;Dist &#39;&lt;/span&gt; + paths.distPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sass(paths.srcPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(&lt;span class=&quot;string&quot;&gt;&#39;Error!&#39;&lt;/span&gt;, err.message);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(sourcemaps.init())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(minifycss())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(autoprefixer(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              browsers: &lt;span class=&quot;string&quot;&gt;&#39;last 2 versions&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(sourcemaps.write(&lt;span class=&quot;string&quot;&gt;&#39;./&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(gulp.dest(paths.distDir))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;sasscss&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sass(&lt;span class=&quot;string&quot;&gt;&#39;src/sass/&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(&lt;span class=&quot;string&quot;&gt;&#39;Error!&#39;&lt;/span&gt;, err.message);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(sourcemaps.init())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(minifycss())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(autoprefixer(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          browsers: &lt;span class=&quot;string&quot;&gt;&#39;last 2 versions&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(sourcemaps.write(&lt;span class=&quot;string&quot;&gt;&#39;./&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/css&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;watchjs&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;watchcss&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;watchless&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;watchsass&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;watchsass&#39;&lt;/span&gt;])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;配置-image-任务&quot;&gt;&lt;a href=&quot;#配置-image-任务&quot; class=&quot;headerlink&quot; title=&quot;配置 image 任务&quot;&gt;&lt;/a&gt;配置 image 任务&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; imagemin = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-imagemin&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;watchimage&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;src/images/**/*&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; paths = watchPath(event,&lt;span class=&quot;string&quot;&gt;&#39;src/&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;dist/&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		gutil.log(gutil.colors.green(event.type) + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + paths.srcPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gutil.log(&lt;span class=&quot;string&quot;&gt;&#39;Dist &#39;&lt;/span&gt; + paths.distPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gulp.src(paths.srcPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(imagemin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                progressive: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(gulp.dest(paths.distDir))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;image&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;src/images/**/*&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(imagemin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            progressive: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/images&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;配置文件复制任务&quot;&gt;&lt;a href=&quot;#配置文件复制任务&quot; class=&quot;headerlink&quot; title=&quot;配置文件复制任务&quot;&gt;&lt;/a&gt;配置文件复制任务&lt;/h2&gt;&lt;p&gt;复制 &lt;code&gt;src/fonts/&lt;/code&gt; 文件到 &lt;code&gt;dist/&lt;/code&gt; 中&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;watchcopy&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.watch(&lt;span class=&quot;string&quot;&gt;&#39;src/fonts/**/*&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; paths = watchPath(event)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		gutil.log(gutil.colors.green(event.type) + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + paths.srcPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gutil.log(&lt;span class=&quot;string&quot;&gt;&#39;Dist &#39;&lt;/span&gt; + paths.distPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gulp.src(paths.srcPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .pipe(gulp.dest(paths.distDir))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;copy&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;src/fonts/**/*&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/fonts/&#39;&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;watchjs&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;watchcss&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;watchless&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;watchsass&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;watchimage&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;watchcopy&#39;&lt;/span&gt;])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-demo/tree/master/gulpfile.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;完整代码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;gulp 是基于 node 实现 Web 前端自动化开发的工具，利用它能够极大的提高开发效率。&lt;/p&gt;
&lt;p&gt;在 Web 前端开发工作中有很多“重复工作”，比如压缩CSS/JS文件。而这些工作都是有规律的。找到这些规律，并编写 gulp 配置代码,让 gulp 自动执行这些“重复工作”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="gulp" scheme="http://hangweiping.github.io/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装Gitlab</title>
    <link href="http://hangweiping.github.io/2016/05/16/docker%E5%AE%89%E8%A3%85gitlab/"/>
    <id>http://hangweiping.github.io/2016/05/16/docker安装gitlab/</id>
    <published>2016-05-16T13:19:26.000Z</published>
    <updated>2016-08-10T10:13:43.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;此文为实践gitlab而成，通篇介绍了Docker下安装 Gitlab CE的过程及注意问题，顺便复习了一些docker和git的命令，由于原文比较简单，故没有翻译。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;GitLab-Docker-images&quot;&gt;&lt;a href=&quot;#GitLab-Docker-images&quot; class=&quot;headerlink&quot; title=&quot;GitLab Docker images&quot;&gt;&lt;/a&gt;GitLab Docker images&lt;/h1&gt;&lt;p&gt;这是镜像&lt;a href=&quot;https://registry.hub.docker.com/u/gitlab/gitlab-ce/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitLab CE docker image&lt;/a&gt;,You can also deploy to Docker Cloud using the &lt;a href=&quot;http://docs.gitlab.com/omnibus/docker/#install-gitlab-using-docker-compose&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;docker-compose config&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Run-the-image&quot;&gt;&lt;a href=&quot;#Run-the-image&quot; class=&quot;headerlink&quot; title=&quot;Run the image:&quot;&gt;&lt;/a&gt;Run the image:&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo docker run --detach \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --hostname gitlab.example.com \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --publish 443:443 --publish 80:80 --publish 22:22 \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --name gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --restart always \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --volume /srv/gitlab/config:/etc/gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --volume /srv/gitlab/logs:/var/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;/gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --volume /srv/gitlab/data:/var/opt/gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gitlab/gitlab-ce:latest&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This will download and start a GitLab CE container and publish ports needed to access SSH, HTTP and HTTPS. All GitLab data will be stored as subdirectories of /srv/gitlab/. The container will automatically restart after a system reboot.&lt;/p&gt;
&lt;p&gt;You can now login to the web interface as explained in After starting a container.&lt;/p&gt;
&lt;h2 id=&quot;After-starting-a-container&quot;&gt;&lt;a href=&quot;#After-starting-a-container&quot; class=&quot;headerlink&quot; title=&quot;After starting a container&quot;&gt;&lt;/a&gt;After starting a container&lt;/h2&gt;&lt;p&gt;After starting a container you can visit &lt;a href=&quot;http://localhost/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/&lt;/a&gt; or &lt;a href=&quot;http://192.168.59.103&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://192.168.59.103&lt;/a&gt; if you use boot2docker. It might take a while before the docker container starts to respond to queries.&lt;/p&gt;
&lt;p&gt;Login to GitLab with the following credentials:  &lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;`root`&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;password&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;`5iveL!fe`&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Next time, you can just use docker start and stop to run the container.  &lt;/p&gt;
&lt;h2 id=&quot;Where-is-the-data-stored&quot;&gt;&lt;a href=&quot;#Where-is-the-data-stored&quot; class=&quot;headerlink&quot; title=&quot;Where is the data stored?&quot;&gt;&lt;/a&gt;Where is the data stored?&lt;/h2&gt;&lt;p&gt;The GitLab container uses host mounted volumes to store persistent data:&lt;/p&gt;
&lt;p&gt;Local location    Container location    Usage  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;/srv/gitlab/data&lt;/th&gt;
&lt;th&gt;/var/opt/gitlab&lt;/th&gt;
&lt;th&gt;For storing application data&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/srv/gitlab/logs&lt;/td&gt;
&lt;td&gt;/var/log/gitlab&lt;/td&gt;
&lt;td&gt;For storing logs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/srv/gitlab/config&lt;/td&gt;
&lt;td&gt;/etc/gitlab&lt;/td&gt;
&lt;td&gt;For storing the GitLab configuration files&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can fine tune these directories to meet your requirements.  &lt;/p&gt;
&lt;h2 id=&quot;Configure-GitLab&quot;&gt;&lt;a href=&quot;#Configure-GitLab&quot; class=&quot;headerlink&quot; title=&quot;Configure GitLab&quot;&gt;&lt;/a&gt;Configure GitLab&lt;/h2&gt;&lt;p&gt;This container uses the official Omnibus GitLab package, so all configuration is done in the unique configuration file &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To access GitLab’s configuration file, you can start a shell session in the context of a running container. This will allow you to browse all directories and use your favorite text editor:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo docker exec -it gitlab /bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can also just edit &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo docker exec -it gitlab vi /etc/gitlab/gitlab.rb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once you open &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt; make sure to set the external_url to point to a valid URL.&lt;/p&gt;
&lt;p&gt;To receive e-mails from GitLab you have to configure the SMTP settings because the GitLab docker image doesn’t have an SMTP server installed.&lt;/p&gt;
&lt;p&gt;You may also be interested in Enabling HTTPS.&lt;/p&gt;
&lt;p&gt;After you make all the changes you want, you will need to restart the container in order to reconfigure GitLab:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo docker restart gitlab&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note: GitLab will reconfigure itself whenever the container starts.&lt;/p&gt;
&lt;p&gt;For more options about configuring GitLab please check the Omnibus GitLab documentation.&lt;/p&gt;
&lt;h2 id=&quot;Run-GitLab-CE-on-public-IP-address&quot;&gt;&lt;a href=&quot;#Run-GitLab-CE-on-public-IP-address&quot; class=&quot;headerlink&quot; title=&quot;Run GitLab CE on public IP address&quot;&gt;&lt;/a&gt;Run GitLab CE on public IP address&lt;/h2&gt;&lt;p&gt;You can make Docker to use your IP address and forward all traffic to the GitLab CE container by modifying the –publish flag.  &lt;/p&gt;
&lt;p&gt;To expose GitLab CE on IP 1.1.1.1:  &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo docker run --detach \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --hostname gitlab.example.com \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --publish 1.1.1.1:443:443 \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --publish 1.1.1.1:80:80 \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --publish 1.1.1.1:22:22 \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --name gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --restart always \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --volume /srv/gitlab/config:/etc/gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --volume /srv/gitlab/logs:/var/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;/gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --volume /srv/gitlab/data:/var/opt/gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gitlab/gitlab-ce:latest&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You can then access your GitLab instance at 1.1.1.1.  &lt;/p&gt;
&lt;h2 id=&quot;Expose-GitLab-on-different-ports&quot;&gt;&lt;a href=&quot;#Expose-GitLab-on-different-ports&quot; class=&quot;headerlink&quot; title=&quot;Expose GitLab on different ports&quot;&gt;&lt;/a&gt;Expose GitLab on different ports&lt;/h2&gt;&lt;p&gt;If you want to use a different port than 80 (HTTP) or 443 (HTTPS), you need to add a separate –publish directive to the docker run command.&lt;/p&gt;
&lt;p&gt;For example, to expose the web interface on port 8929 and the SSH service on port 2289, use the following docker run command:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo docker run --detach \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --hostname gitlab.example.com \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --publish 8929:80 --publish 2289:22 \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --name gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --restart always \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --volume /srv/gitlab/config:/etc/gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --volume /srv/gitlab/logs:/var/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;/gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --volume /srv/gitlab/data:/var/opt/gitlab \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gitlab/gitlab-ce:latest&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You then need to appropriately configure gitlab.rb:&lt;/p&gt;
&lt;p&gt;Set external_url:&lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;For&lt;/span&gt; HTTP&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;external_url &lt;span class=&quot;string&quot;&gt;&quot;http://gitlab.example.com:8929&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;For&lt;/span&gt; HTTPS&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;external_url &lt;span class=&quot;string&quot;&gt;&quot;https://gitlab.example.com:8929&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Set&lt;/span&gt; gitlab_shell_ssh_port:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gitlab_rails[&lt;span class=&quot;string&quot;&gt;&#39;gitlab_shell_ssh_port&#39;&lt;/span&gt;] = 2289&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Diagnose &lt;span class=&quot;comment&quot;&gt;potential problems&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Read &lt;span class=&quot;comment&quot;&gt;container logs:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo &lt;span class=&quot;comment&quot;&gt;docker logs gitlab&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Enter &lt;span class=&quot;comment&quot;&gt;running container:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo &lt;span class=&quot;comment&quot;&gt;docker exec -it gitlab&lt;/span&gt; /bin/&lt;span class=&quot;comment&quot;&gt;bash&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;From within the container you can administer the GitLab container as you would normally administer an Omnibus installation&lt;/p&gt;
&lt;h2 id=&quot;Install-GitLab-using-docker-compose&quot;&gt;&lt;a href=&quot;#Install-GitLab-using-docker-compose&quot; class=&quot;headerlink&quot; title=&quot;Install GitLab using docker-compose&quot;&gt;&lt;/a&gt;Install GitLab using docker-compose&lt;/h2&gt;&lt;p&gt;With Docker compose you can easily configure, install, and upgrade your Docker-based GitLab installation.&lt;/p&gt;
&lt;p&gt;Install Docker Compose&lt;br&gt;Create a docker-compose.yml file (or download an example):  &lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;web:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  image: &#39;gitlab/gitlab-ce:latest&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  restart: always&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  hostname: &#39;gitlab.example.com&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  environment:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    GITLAB_OMNIBUS_CONFIG: |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      external_url &#39;https://gitlab.example.com&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      # Add any other gitlab.rb configuration here, each on its own line&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ports:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    -&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;string&quot;&gt;&#39;80:80&#39;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    -&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;string&quot;&gt;&#39;443:443&#39;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    -&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;string&quot;&gt;&#39;22:22&#39;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  volumes:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    -&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;string&quot;&gt;&#39;/srv/gitlab/config:/etc/gitlab&#39;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    -&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;string&quot;&gt;&#39;/srv/gitlab/logs:/var/log/gitlab&#39;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    -&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;string&quot;&gt;&#39;/srv/gitlab/data:/var/opt/gitlab&#39;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Make sure you are in the same directory as docker-compose.yml and run docker-compose up -d to start GitLab&lt;/p&gt;
&lt;p&gt;Read “Pre-configure Docker container” to see how the GITLAB_OMNIBUS_CONFIG variable works.&lt;/p&gt;
&lt;p&gt;Below is another docker-compose.yml example with GitLab running on a custom HTTP and SSH port. Notice how the GITLAB_OMNIBUS_CONFIG variables match the ports section:&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;we&lt;span class=&quot;variable&quot;&gt;b:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  image: &lt;span class=&quot;string&quot;&gt;&#39;gitlab/gitlab-ce:latest&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  restar&lt;span class=&quot;variable&quot;&gt;t:&lt;/span&gt; always&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;hostname&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;gitlab.example.com&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  environmen&lt;span class=&quot;variable&quot;&gt;t:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    GITLAB_OMNIBUS_CONFIG: |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      external_url &lt;span class=&quot;string&quot;&gt;&#39;http://gitlab.example.com:9090&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      gitlab_rails[&lt;span class=&quot;string&quot;&gt;&#39;gitlab_shell_ssh_port&#39;&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;2224&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  port&lt;span class=&quot;variable&quot;&gt;s:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&#39;9090:9090&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&#39;2224:22&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  volume&lt;span class=&quot;variable&quot;&gt;s:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&#39;/srv/gitlab/config:/etc/gitlab&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&#39;/srv/gitlab/logs:/var/log/gitlab&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&#39;/srv/gitlab/data:/var/opt/gitlab&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Update-GitLab-using-Docker-compose&quot;&gt;&lt;a href=&quot;#Update-GitLab-using-Docker-compose&quot; class=&quot;headerlink&quot; title=&quot;Update GitLab using Docker compose&quot;&gt;&lt;/a&gt;Update GitLab using Docker compose&lt;/h2&gt;&lt;p&gt;Provided you installed GitLab using docker-compose, all you have to do is run &lt;code&gt;docker-compose pull&lt;/code&gt; and &lt;code&gt;docker-compose up -d&lt;/code&gt; to download a new release and upgrade your GitLab instance.&lt;/p&gt;
&lt;h1 id=&quot;docker命令回顾&quot;&gt;&lt;a href=&quot;#docker命令回顾&quot; class=&quot;headerlink&quot; title=&quot;docker命令回顾&quot;&gt;&lt;/a&gt;docker命令回顾&lt;/h1&gt;&lt;h2 id=&quot;查看docker信息（version、info）&quot;&gt;&lt;a href=&quot;#查看docker信息（version、info）&quot; class=&quot;headerlink&quot; title=&quot;查看docker信息（version、info）&quot;&gt;&lt;/a&gt;查看docker信息（version、info）&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看docker版本  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker version  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 显示docker系统的信息  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker info&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;对image的操作（search、pull、images、rmi、history）&quot;&gt;&lt;a href=&quot;#对image的操作（search、pull、images、rmi、history）&quot; class=&quot;headerlink&quot; title=&quot;对image的操作（search、pull、images、rmi、history）&quot;&gt;&lt;/a&gt;对image的操作（search、pull、images、rmi、history）&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 检索image  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker search image_name  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载image  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker pull image_name  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列出镜像列表; -a, --all=false Show all images; --no-trunc=false Don&#39;t truncate output; -q, --quiet=false Only show numeric IDs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker images   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除一个或者多个镜像; -f, --force=false Force; --no-prune=false Do not delete untagged parents&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker rmi image_name  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 显示一个镜像的历史; --no-trunc=false Don&#39;t truncate output; -q, --quiet=false Only show numeric IDs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker &lt;span class=&quot;built_in&quot;&gt;history&lt;/span&gt; image_name&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;启动容器（run）&quot;&gt;&lt;a href=&quot;#启动容器（run）&quot; class=&quot;headerlink&quot; title=&quot;启动容器（run）&quot;&gt;&lt;/a&gt;启动容器（run）&lt;/h2&gt;&lt;p&gt;docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。  &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 在容器中运行&quot;echo&quot;命令，输出&quot;hello word&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker run image_name &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;hello word&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 交互式进入容器中&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker run -i -t image_name /bin/bash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 在容器中安装新的程序&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker run image_name apt-get install -y app_name&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note：  在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响应这种交互的。apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失。&lt;/p&gt;
&lt;h2 id=&quot;查看容器（ps）&quot;&gt;&lt;a href=&quot;#查看容器（ps）&quot; class=&quot;headerlink&quot; title=&quot;查看容器（ps）&quot;&gt;&lt;/a&gt;查看容器（ps）&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列出当前所有正在运行的container&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker ps  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列出所有的container  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker ps &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列出最近一次启动的container  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker ps &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;保存对容器的修改（commit）&quot;&gt;&lt;a href=&quot;#保存对容器的修改（commit）&quot; class=&quot;headerlink&quot; title=&quot;保存对容器的修改（commit）&quot;&gt;&lt;/a&gt;保存对容器的修改（commit）&lt;/h2&gt;&lt;p&gt;当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。  &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 保存对容器的修改; -a, --author=&quot;&quot; Author; -m, --message=&quot;&quot; Commit message  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker commit ID new_image_name&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note：  image相当于类，container相当于实例，不过可以动态给实例安装新软件，然后把这个container用commit命令固化成一个image。&lt;/p&gt;
&lt;h2 id=&quot;对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach）&quot;&gt;&lt;a href=&quot;#对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach）&quot; class=&quot;headerlink&quot; title=&quot;对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach）&quot;&gt;&lt;/a&gt;对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach）&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除所有容器  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker rm `docker ps &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -q`  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除单个容器; -f, --force=false; -l, --link=false Remove the specified link and not the underlying container; -v, --volumes=false Remove the volumes associated to the container&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker rm Name/ID  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 停止、启动、杀死一个容器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker stop Name/ID&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker start Name/ID&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker &lt;span class=&quot;built_in&quot;&gt;kill&lt;/span&gt; Name/ID&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 从一个容器中取日志; -f, --follow=false Follow log output; -t, --timestamps=false Show timestamps&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker logs Name/ID&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列出一个容器里面被改变的文件或者目录，list列表会显示出三种事件，A 增加的，D 删除的，C 被改变的&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker diff Name/ID&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 显示一个运行的容器里面的进程信息&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker top Name/ID&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 从容器里面拷贝文件/目录到本地一个路径&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker cp Name:/container_path to_path&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker cp ID:/container_path to_path&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 重启一个正在运行的容器; -t, --time=10 Number of seconds to try to stop for before killing the container, Default=10&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker restart Name/ID&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 附加到一个运行的容器上面; --no-stdin=false Do not attach stdin; --sig-proxy=true Proxify all received signal to the process&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker attach ID&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note： attach命令允许你查看或者影响一个运行的容器。你可以在同一时间attach同一个容器。你也可以从一个容器中脱离出来，是从CTRL-C。&lt;/p&gt;
&lt;h2 id=&quot;保存和加载镜像（save、load）&quot;&gt;&lt;a href=&quot;#保存和加载镜像（save、load）&quot; class=&quot;headerlink&quot; title=&quot;保存和加载镜像（save、load）&quot;&gt;&lt;/a&gt;保存和加载镜像（save、load）&lt;/h2&gt;&lt;p&gt;当需要把一台机器上的镜像迁移到另一台机器的时候，需要保存镜像与加载镜像。  &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 保存镜像到一个tar包; -o, --output=&quot;&quot; Write to an file&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker save image_name -o file_path&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 加载一个tar包格式的镜像; -i, --input=&quot;&quot; Read from a tar archive file&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker load -i file_path&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 机器a&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker save image_name &amp;gt; /home/save.tar&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用scp将save.tar拷到机器b上，然后：&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker load &amp;lt; /home/save.tar&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;git-初学解决错误&quot;&gt;&lt;a href=&quot;#git-初学解决错误&quot; class=&quot;headerlink&quot; title=&quot;git 初学解决错误&quot;&gt;&lt;/a&gt;git 初学解决错误&lt;/h1&gt;&lt;p&gt;error: src refspec master does not match any.&lt;br&gt;引起该错误的原因是，目录中没有文件，空目录是不能提交上去的  &lt;/p&gt;
&lt;p&gt;error: insufficient permission for adding an object to repository database ./objects&lt;br&gt;服务端没有可写目录的权限  &lt;/p&gt;
&lt;p&gt;错误提示：fatal: remote origin already exists.&lt;br&gt;解决办法：$ git remote rm origin  &lt;/p&gt;
&lt;p&gt;错误提示：error: failed to push som refs to ……..&lt;br&gt;解决办法：$ git pull origin master //先pull 下来 再push 上去  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;此文为实践gitlab而成，通篇介绍了Docker下安装 Gitlab CE的过程及注意问题，顺便复习了一些docker和git的命令，由于原文比较简单，故没有翻译。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://hangweiping.github.io/tags/docker/"/>
    
      <category term="gitlab" scheme="http://hangweiping.github.io/tags/gitlab/"/>
    
      <category term="git" scheme="http://hangweiping.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>redis入门教程</title>
    <link href="http://hangweiping.github.io/2016/05/09/redis%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://hangweiping.github.io/2016/05/09/redis入门教程/</id>
    <published>2016-05-09T09:13:34.000Z</published>
    <updated>2016-07-15T09:44:35.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;redis是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库。&lt;br&gt;redis的官网地址，非常好记，是redis.io。（特意查了一下，域名后缀io属于国家域名，是british Indian Ocean territory，即英属印度洋领地）&lt;br&gt;目前，Vmware在资助着redis项目的开发和维护。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;学会启动redis&quot;&gt;&lt;a href=&quot;#学会启动redis&quot; class=&quot;headerlink&quot; title=&quot;学会启动redis&quot;&gt;&lt;/a&gt;学会启动redis&lt;/h2&gt;&lt;p&gt;启动redis非常简单，直接&lt;code&gt;redis-server&lt;/code&gt;就可以启动服务端了，还可以用下面的方法指定要加载的配置文件：&lt;br&gt;&lt;code&gt;redis-server ../redis.conf&lt;/code&gt;&lt;br&gt;默认情况下，redis-server会以非daemon的方式来运行，且默认服务端口为6379。  &lt;/p&gt;
&lt;h2 id=&quot;使用redis客户端&quot;&gt;&lt;a href=&quot;#使用redis客户端&quot; class=&quot;headerlink&quot; title=&quot;使用redis客户端&quot;&gt;&lt;/a&gt;使用redis客户端&lt;/h2&gt;&lt;p&gt;我们直接看一个例子：  &lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//这样来启动redis客户端了  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ redis-cli&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//用&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;指令来设置&lt;span class=&quot;keyword&quot;&gt;key&lt;/span&gt;、&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;roc&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//来获取&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;的值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;roc&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//通过客户端来关闭redis服务端&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;shutdown&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;redis数据结构-–-简介&quot;&gt;&lt;a href=&quot;#redis数据结构-–-简介&quot; class=&quot;headerlink&quot; title=&quot;redis数据结构 – 简介&quot;&gt;&lt;/a&gt;redis数据结构 – 简介&lt;/h2&gt;&lt;p&gt;redis是一种高级的key:value存储系统，其中value支持五种数据类型：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符串（strings）  &lt;/li&gt;
&lt;li&gt;字符串列表（lists）  &lt;/li&gt;
&lt;li&gt;字符串集合（sets）  &lt;/li&gt;
&lt;li&gt;有序字符串集合（sorted sets）  &lt;/li&gt;
&lt;li&gt;哈希（hashes）  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而关于key，有几个点要提醒大家：  &lt;/p&gt;
&lt;p&gt;key不要太长，尽量不要超过1024字节，这不仅消耗内存，而且会降低查找的效率；&lt;br&gt;key也不要太短，太短的话，key的可读性会降低；&lt;br&gt;在一个项目中，key最好使用统一的命名模式，例如user:10000:passwd。    &lt;/p&gt;
&lt;h2 id=&quot;redis数据结构-–-strings&quot;&gt;&lt;a href=&quot;#redis数据结构-–-strings&quot; class=&quot;headerlink&quot; title=&quot;redis数据结构 – strings&quot;&gt;&lt;/a&gt;redis数据结构 – strings&lt;/h2&gt;&lt;p&gt;有人说，如果只使用redis中的字符串类型，且不使用redis的持久化功能，那么，redis就和memcache非常非常的像了。这说明strings类型是一个很基础的数据类型，也是任何存储系统都必备的数据类型。  &lt;/p&gt;
&lt;p&gt;我们来看一个最简单的例子：    &lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; mystr &lt;span class=&quot;comment&quot;&gt;&quot;hello world!&quot;&lt;/span&gt; //设置字符串类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;get &lt;span class=&quot;comment&quot;&gt;mystr&lt;/span&gt; //读取字符串类型&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;字符串类型的用法就是这么简单，因为是二进制安全的，所以你完全可以把一个图片文件的内容作为字符串来存储。&lt;br&gt;另外，我们还可以通过字符串类型进行数值操作：  &lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;127&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;mynum&lt;/span&gt; &quot;2&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;OK&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;mynum&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&quot;2&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;incr&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;mynum&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;selector-tag&quot;&gt;integer&lt;/span&gt;) 3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;mynum&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&quot;3&quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看，在遇到数值操作时，redis会将字符串类型转换成数值。  &lt;/p&gt;
&lt;p&gt;由于INCR等指令本身就具有原子操作的特性，所以我们完全可以利用redis的INCR、INCRBY、DECR、DECRBY等指令来实现原子计数的效果，假如，在某种场景下有3个客户端同时读取了mynum的值（值为2），然后对其同时进行了加1的操作，那么，最后mynum的值一定是5。不少网站都利用redis的这个特性来实现业务上的统计计数需求。  &lt;/p&gt;
&lt;h2 id=&quot;redis数据结构-–-lists&quot;&gt;&lt;a href=&quot;#redis数据结构-–-lists&quot; class=&quot;headerlink&quot; title=&quot;redis数据结构 – lists&quot;&gt;&lt;/a&gt;redis数据结构 – lists&lt;/h2&gt;&lt;p&gt;redis的另一个重要的数据结构叫做lists，翻译成中文叫做“列表”。  &lt;/p&gt;
&lt;p&gt;首先要明确一点，redis中的lists在底层实现上并不是数组，而是链表，也就是说对于一个具有上百万个元素的lists来说，在头部和尾部插入一个新元素，其时间复杂度是常数级别的，比如用LPUSH在10个元素的lists头部插入新元素，和在上千万元素的lists头部插入新元素的速度应该是相同的。  &lt;/p&gt;
&lt;p&gt;虽然lists有这样的优势，但同样有其弊端，那就是，链表型lists的元素定位会比较慢，而数组型lists的元素定位就会快得多。  &lt;/p&gt;
&lt;p&gt;lists的常用操作包括LPUSH、RPUSH、LRANGE等。我们可以用LPUSH在lists的左侧插入一个新元素，用RPUSH在lists的右侧插入一个新元素，用LRANGE命令从lists中指定一个范围来提取元素。我们来看几个例子：  &lt;/p&gt;
&lt;figure class=&quot;highlight tcl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//新建一个&lt;span class=&quot;keyword&quot;&gt;list&lt;/span&gt;叫做mylist，并在列表头部插入元素&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; lpush mylist &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//返回当前mylist中的元素个数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//在mylist右侧插入元素&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; rpush mylist &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//在mylist左侧插入元素&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; lpush mylist &lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//列出mylist中从编号&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;到编号&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;的元素&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;lrange&lt;/span&gt; mylist &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//列出mylist中从编号&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;到倒数第一个元素&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;lrange&lt;/span&gt; mylist &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;lists的应用相当广泛，随便举几个例子：  &lt;/p&gt;
&lt;p&gt;我们可以利用lists来实现一个消息队列，而且可以确保先后顺序，不必像MySQL那样还需要通过ORDER BY来进行排序。&lt;br&gt;利用LRANGE还可以很方便的实现分页的功能。&lt;br&gt;在博客系统中，每片博文的评论也可以存入一个单独的list中。  &lt;/p&gt;
&lt;h2 id=&quot;redis数据结构-–-集合&quot;&gt;&lt;a href=&quot;#redis数据结构-–-集合&quot; class=&quot;headerlink&quot; title=&quot;redis数据结构 – 集合&quot;&gt;&lt;/a&gt;redis数据结构 – 集合&lt;/h2&gt;&lt;p&gt;redis的集合，是一种无序的集合，集合中的元素没有先后顺序。&lt;br&gt;集合相关的操作也很丰富，如添加新元素、删除已有元素、取交集、取并集、取差集等。我们来看例子：  &lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//向集合myset中加入一个新元素&lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; sadd myset &lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; sadd myset &lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//列出集合myset中的所有元素&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; smembers myset&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//判断元素&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;是否在集合myset中，返回&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;表示存在&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; sismember myset &lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//判断元素&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;是否在集合myset中，返回&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;表示不存在&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; sismember myset &lt;span class=&quot;string&quot;&gt;&quot;three&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//新建一个新的集合yourset&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; sadd yourset &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; sadd yourset &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; smembers yourset&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//对两个集合求并集&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; sunion myset yourset&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于集合的使用，也有一些常见的方式，比如，QQ有一个社交功能叫做“好友标签”，大家可以给你的好友贴标签，比如“大美女”、“土豪”、“欧巴”等等，这时就可以使用redis的集合来实现，把每一个用户的标签都存储在一个集合之中。  &lt;/p&gt;
&lt;h2 id=&quot;redis数据结构-–-有序集合&quot;&gt;&lt;a href=&quot;#redis数据结构-–-有序集合&quot; class=&quot;headerlink&quot; title=&quot;redis数据结构 – 有序集合&quot;&gt;&lt;/a&gt;redis数据结构 – 有序集合&lt;/h2&gt;&lt;p&gt;redis不但提供了无需集合（sets），还很体贴的提供了有序集合（sorted sets）。有序集合中的每个元素都关联一个序号（score），这便是排序的依据。  &lt;/p&gt;
&lt;p&gt;很多时候，我们都将redis中的有序集合叫做zsets，这是因为在redis中，有序集合相关的操作指令都是以z开头的，比如zrange、zadd、zrevrange、zrangebyscore等等  &lt;/p&gt;
&lt;p&gt;老规矩，我们来看几个生动的例子：  &lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//新增一个有序集合myzset，并加入一个元素baidu.com，给它赋予的序号是1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; zadd myzset &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; baidu&lt;span class=&quot;selector-class&quot;&gt;.com&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//向myzset中新增一个元素360.com，赋予它的序号是3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; zadd myzset &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.com&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//向myzset中新增一个元素google.com，赋予它的序号是2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; zadd myzset &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; google&lt;span class=&quot;selector-class&quot;&gt;.com&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//列出myzset的所有元素，同时列出其序号，可以看出myzset已经是有序的了。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; zrange myzset &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; with scores&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;baidu.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;google.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;360.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//只列出myzset的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; zrange myzset &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;baidu.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;google.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;360.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;redis数据结构-–-哈希&quot;&gt;&lt;a href=&quot;#redis数据结构-–-哈希&quot; class=&quot;headerlink&quot; title=&quot;redis数据结构 – 哈希&quot;&gt;&lt;/a&gt;redis数据结构 – 哈希&lt;/h2&gt;&lt;p&gt;最后要给大家介绍的是hashes，即哈希。哈希是从redis-2.0.0版本之后才有的数据结构。&lt;br&gt;hashes存的是字符串和字符串值之间的映射，比如一个用户要存储其全名、姓氏、年龄等等，就很适合使用哈希。&lt;br&gt;我们来看一个例子：   &lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//建立哈希，并赋值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; HMSET &lt;span class=&quot;string&quot;&gt;user:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;001&lt;/span&gt; username antirez password P1pp0 age &lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//列出哈希的内容&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; HGETALL &lt;span class=&quot;string&quot;&gt;user:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;001&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;antirez&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;P1pp0&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;34&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//更改哈希中的某一个值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; HSET &lt;span class=&quot;string&quot;&gt;user:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;001&lt;/span&gt; password &lt;span class=&quot;number&quot;&gt;12345&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//再次列出哈希的内容&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; HGETALL &lt;span class=&quot;string&quot;&gt;user:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;001&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;antirez&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;12345&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;&quot;34&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有关hashes的操作，同样很丰富，需要时，大家可以从这里查询。  &lt;/p&gt;
&lt;h2 id=&quot;聊聊redis持久化-–-两种方式&quot;&gt;&lt;a href=&quot;#聊聊redis持久化-–-两种方式&quot; class=&quot;headerlink&quot; title=&quot;聊聊redis持久化 – 两种方式&quot;&gt;&lt;/a&gt;聊聊redis持久化 – 两种方式&lt;/h2&gt;&lt;p&gt;redis提供了两种持久化的方式，分别是RDB（Redis DataBase）和AOF（Append Only File）。&lt;br&gt;RDB，简而言之，就是在不同的时间点，将redis存储的数据生成快照并存储到磁盘等介质上；&lt;br&gt;AOF，则是换了一个角度来实现持久化，那就是将redis执行过的所有写指令记录下来，在下次redis重新启动时，只要把这些写指令从前到后再重复执行一遍，就可以实现数据恢复了。  &lt;/p&gt;
&lt;p&gt;其实RDB和AOF两种方式也可以同时使用，在这种情况下，如果redis重启的话，则会优先采用AOF方式来进行数据恢复，这是因为AOF方式的数据恢复完整度更高。&lt;br&gt;如果你没有数据持久化的需求，也完全可以关闭RDB和AOF方式，这样的话，redis将变成一个纯内存数据库，就像memcache一样。&lt;/p&gt;
&lt;h2 id=&quot;聊聊redis持久化-–-RDB&quot;&gt;&lt;a href=&quot;#聊聊redis持久化-–-RDB&quot; class=&quot;headerlink&quot; title=&quot;聊聊redis持久化 – RDB&quot;&gt;&lt;/a&gt;聊聊redis持久化 – RDB&lt;/h2&gt;&lt;p&gt;RDB方式，是将redis某一时刻的数据持久化到磁盘中，是一种快照式的持久化方法。  &lt;/p&gt;
&lt;p&gt;redis在进行数据持久化的过程中，会先将数据写入到一个临时文件中，待持久化过程都结束了，才会用这个临时文件替换上次持久化好的文件。正是这种特性，让我们可以随时来进行备份，因为快照文件总是完整可用的。  &lt;/p&gt;
&lt;p&gt;对于RDB方式，redis会单独创建（fork）一个子进程来进行持久化，而主进程是不会进行任何IO操作的，这样就确保了redis极高的性能。&lt;/p&gt;
&lt;p&gt;如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。&lt;/p&gt;
&lt;p&gt;虽然RDB有不少优点，但它的缺点也是不容忽视的。如果你对数据的完整性非常敏感，那么RDB方式就不太适合你，因为即使你每5分钟都持久化一次，当redis故障时，仍然会有近5分钟的数据丢失。所以，redis还提供了另一种持久化方式，那就是AOF。&lt;/p&gt;
&lt;h2 id=&quot;聊聊redis持久化-–-AOF&quot;&gt;&lt;a href=&quot;#聊聊redis持久化-–-AOF&quot; class=&quot;headerlink&quot; title=&quot;聊聊redis持久化 – AOF&quot;&gt;&lt;/a&gt;聊聊redis持久化 – AOF&lt;/h2&gt;&lt;p&gt;AOF，英文是Append Only File，即只允许追加不允许改写的文件。&lt;/p&gt;
&lt;p&gt;如前面介绍的，AOF方式是将执行过的写指令记录下来，在数据恢复时按照从前到后的顺序再将指令都执行一遍，就这么简单。&lt;/p&gt;
&lt;p&gt;我们通过配置redis.conf中的appendonly yes就可以打开AOF功能。如果有写操作（如SET等），redis就会被追加到AOF文件的末尾。&lt;/p&gt;
&lt;p&gt;默认的AOF持久化策略是每秒钟fsync一次（fsync是指把缓存中的写指令记录到磁盘中），因为在这种情况下，redis仍然可以保持很好的处理性能，即使redis故障，也只会丢失最近1秒钟的数据。&lt;/p&gt;
&lt;p&gt;如果在追加日志时，恰好遇到磁盘空间满、inode满或断电等情况导致日志写入不完整，也没有关系，redis提供了redis-check-aof工具，可以用来进行日志修复。&lt;/p&gt;
&lt;p&gt;因为采用了追加方式，如果不做任何处理的话，AOF文件会变得越来越大，为此，redis提供了AOF文件重写（rewrite）机制，即当AOF文件的大小超过所设定的阈值时，redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集。举个例子或许更形象，假如我们调用了100次INCR指令，在AOF文件中就要存储100条指令，但这明显是很低效的，完全可以把这100条指令合并成一条SET指令，这就是重写机制的原理。&lt;/p&gt;
&lt;p&gt;在进行AOF重写时，仍然是采用先写临时文件，全部完成后再替换的流程，所以断电、磁盘满等问题都不会影响AOF文件的可用性，这点大家可以放心。&lt;/p&gt;
&lt;p&gt;AOF方式的另一个好处，我们通过一个“场景再现”来说明。某同学在操作redis时，不小心执行了FLUSHALL，导致redis内存中的数据全部被清空了，这是很悲剧的事情。不过这也不是世界末日，只要redis配置了AOF持久化方式，且AOF文件还没有被重写（rewrite），我们就可以用最快的速度暂停redis并编辑AOF文件，将最后一行的FLUSHALL命令删除，然后重启redis，就可以恢复redis的所有数据到FLUSHALL之前的状态了。是不是很神奇，这就是AOF持久化方式的好处之一。但是如果AOF文件已经被重写了，那就无法通过这种方法来恢复数据了。&lt;/p&gt;
&lt;p&gt;虽然优点多多，但AOF方式也同样存在缺陷，比如在同样数据规模的情况下，AOF文件要比RDB文件的体积大。而且，AOF方式的恢复速度也要慢于RDB方式。&lt;/p&gt;
&lt;p&gt;如果你直接执行BGREWRITEAOF命令，那么redis会生成一个全新的AOF文件，其中便包括了可以恢复现有数据的最少的命令集。&lt;/p&gt;
&lt;p&gt;如果运气比较差，AOF文件出现了被写坏的情况，也不必过分担忧，redis并不会贸然加载这个有问题的AOF文件，而是报错退出。这时可以通过以下步骤来修复出错的文件：&lt;/p&gt;
&lt;p&gt;备份被写坏的AOF文件&lt;br&gt;运行redis-check-aof –fix进行修复&lt;br&gt;用diff -u来看下两个文件的差异，确认问题点&lt;br&gt;重启redis，加载修复后的AOF文件&lt;/p&gt;
&lt;h2 id=&quot;聊聊redis持久化-–-AOF重写&quot;&gt;&lt;a href=&quot;#聊聊redis持久化-–-AOF重写&quot; class=&quot;headerlink&quot; title=&quot;聊聊redis持久化 – AOF重写&quot;&gt;&lt;/a&gt;聊聊redis持久化 – AOF重写&lt;/h2&gt;&lt;p&gt;AOF重写的内部运行原理，我们有必要了解一下。&lt;/p&gt;
&lt;p&gt;在重写即将开始之际，redis会创建（fork）一个“重写子进程”，这个子进程会首先读取现有的AOF文件，并将其包含的指令进行分析压缩并写入到一个临时文件中。&lt;/p&gt;
&lt;p&gt;与此同时，主工作进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的AOF文件中，这样做是保证原有的AOF文件的可用性，避免在重写过程中出现意外。&lt;/p&gt;
&lt;p&gt;当“重写子进程”完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新AOF文件中。&lt;/p&gt;
&lt;p&gt;当追加结束后，redis就会用新AOF文件来代替旧AOF文件，之后再有新的写指令，就都会追加到新的AOF文件中了。  &lt;/p&gt;
&lt;h2 id=&quot;聊聊redis持久化-–-如何选择RDB和AOF&quot;&gt;&lt;a href=&quot;#聊聊redis持久化-–-如何选择RDB和AOF&quot; class=&quot;headerlink&quot; title=&quot;聊聊redis持久化 – 如何选择RDB和AOF&quot;&gt;&lt;/a&gt;聊聊redis持久化 – 如何选择RDB和AOF&lt;/h2&gt;&lt;p&gt;对于我们应该选择RDB还是AOF，官方的建议是两个同时使用。这样可以提供更可靠的持久化方案。  &lt;/p&gt;
&lt;h2 id=&quot;聊聊主从-–-用法&quot;&gt;&lt;a href=&quot;#聊聊主从-–-用法&quot; class=&quot;headerlink&quot; title=&quot;聊聊主从 – 用法&quot;&gt;&lt;/a&gt;聊聊主从 – 用法&lt;/h2&gt;&lt;p&gt;像MySQL一样，redis是支持主从同步的，而且也支持一主多从以及多级从结构。&lt;/p&gt;
&lt;p&gt;主从结构，一是为了纯粹的冗余备份，二是为了提升读性能，比如很消耗性能的SORT就可以由从服务器来承担。&lt;/p&gt;
&lt;p&gt;redis的主从同步是异步进行的，这意味着主从同步不会影响主逻辑，也不会降低redis的处理性能。&lt;/p&gt;
&lt;p&gt;主从架构中，可以考虑关闭主服务器的数据持久化功能，只让从服务器进行持久化，这样可以提高主服务器的处理性能。&lt;/p&gt;
&lt;p&gt;在主从架构中，从服务器通常被设置为只读模式，这样可以避免从服务器的数据被误修改。但是从服务器仍然可以接受CONFIG等指令，所以还是不应该将从服务器直接暴露到不安全的网络环境中。如果必须如此，那可以考虑给重要指令进行重命名，来避免命令被外人误执行。&lt;/p&gt;
&lt;h2 id=&quot;聊聊主从-–-同步原理&quot;&gt;&lt;a href=&quot;#聊聊主从-–-同步原理&quot; class=&quot;headerlink&quot; title=&quot;聊聊主从 – 同步原理&quot;&gt;&lt;/a&gt;聊聊主从 – 同步原理&lt;/h2&gt;&lt;p&gt;从服务器会向主服务器发出SYNC指令，当主服务器接到此命令后，就会调用BGSAVE指令来创建一个子进程专门进行数据持久化工作，也就是将主服务器的数据写入RDB文件中。在数据持久化期间，主服务器将执行的写指令都缓存在内存中。&lt;/p&gt;
&lt;p&gt;在BGSAVE指令执行完成后，主服务器会将持久化好的RDB文件发送给从服务器，从服务器接到此文件后会将其存储到磁盘上，然后再将其读取到内存中。这个动作完成后，主服务器会将这段时间缓存的写指令再以redis协议的格式发送给从服务器。&lt;/p&gt;
&lt;p&gt;另外，要说的一点是，即使有多个从服务器同时发来SYNC指令，主服务器也只会执行一次BGSAVE，然后把持久化好的RDB文件发给多个下游。在redis2.8版本之前，如果从服务器与主服务器因某些原因断开连接的话，都会进行一次主从之间的全量的数据同步；而在2.8版本之后，redis支持了效率更高的增量同步策略，这大大降低了连接断开的恢复成本。&lt;/p&gt;
&lt;p&gt;主服务器会在内存中维护一个缓冲区，缓冲区中存储着将要发给从服务器的内容。从服务器在与主服务器出现网络瞬断之后，从服务器会尝试再次与主服务器连接，一旦连接成功，从服务器就会把“希望同步的主服务器ID”和“希望请求的数据的偏移位置（replication offset）”发送出去。主服务器接收到这样的同步请求后，首先会验证主服务器ID是否和自己的ID匹配，其次会检查“请求的偏移位置”是否存在于自己的缓冲区中，如果两者都满足的话，主服务器就会向从服务器发送增量内容。&lt;/p&gt;
&lt;p&gt;增量同步功能，需要服务器端支持全新的PSYNC指令。这个指令，只有在redis-2.8之后才具有。&lt;/p&gt;
&lt;h2 id=&quot;聊聊redis的事务处理&quot;&gt;&lt;a href=&quot;#聊聊redis的事务处理&quot; class=&quot;headerlink&quot; title=&quot;聊聊redis的事务处理&quot;&gt;&lt;/a&gt;聊聊redis的事务处理&lt;/h2&gt;&lt;p&gt;众所周知，事务是指“一个完整的动作，要么全部执行，要么什么也没有做”。&lt;/p&gt;
&lt;p&gt;在聊redis事务处理之前，要先和大家介绍四个redis指令，即MULTI、EXEC、DISCARD、WATCH。这四个指令构成了redis事务处理的基础。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MULTI用来组装一个事务；  &lt;/li&gt;
&lt;li&gt;EXEC用来执行一个事务；  &lt;/li&gt;
&lt;li&gt;DISCARD用来取消一个事务；  &lt;/li&gt;
&lt;li&gt;WATCH用来监视一些key，一旦这些key在事务执行之前被改变，则取消事务的执行。&lt;br&gt;纸上得来终觉浅，我们来看一个MULTI和EXEC的例子：  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;redis&amp;gt; MULTI &lt;span class=&quot;comment&quot;&gt;//标记事务开始&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis&amp;gt; INCR user_id &lt;span class=&quot;comment&quot;&gt;//多条命令按顺序入队&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis&amp;gt; INCR user_id&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis&amp;gt; INCR user_id&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis&amp;gt; PING&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis&amp;gt; EXEC &lt;span class=&quot;comment&quot;&gt;//执行&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;integer&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;integer&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;integer&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) PONG&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的例子中，我们看到了QUEUED的字样，这表示我们在用MULTI组装事务时，每一个命令都会进入到内存队列中缓存起来，如果出现QUEUED则表示我们这个命令成功插入了缓存队列，在将来执行EXEC时，这些被QUEUED的命令都会被组装成一个事务来执行。  &lt;/p&gt;
&lt;p&gt;对于事务的执行来说，如果redis开启了AOF持久化的话，那么一旦事务被成功执行，事务中的命令就会通过write命令一次性写到磁盘中去，如果在向磁盘中写的过程中恰好出现断电、硬件故障等问题，那么就可能出现只有部分命令进行了AOF持久化，这时AOF文件就会出现不完整的情况，这时，我们可以使用redis-check-aof工具来修复这一问题，这个工具会将AOF文件中不完整的信息移除，确保AOF文件完整可用。&lt;/p&gt;
&lt;p&gt;有关事务，大家经常会遇到的是两类错误：  &lt;/p&gt;
&lt;p&gt;调用EXEC之前的错误&lt;br&gt;调用EXEC之后的错误&lt;br&gt;“调用EXEC之前的错误”，有可能是由于语法有误导致的，也可能时由于内存不足导致的。只要出现某个命令无法成功写入缓冲队列的情况，redis都会进行记录，在客户端调用EXEC时，redis会拒绝执行这一事务。（这时2.6.5版本之后的策略。在2.6.5之前的版本中，redis会忽略那些入队失败的命令，只执行那些入队成功的命令）。我们来看一个这样的例子：    &lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; multi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; haha //一个明显错误的指令&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(error) ERR unknown command &lt;span class=&quot;string&quot;&gt;&#39;haha&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; ping&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; exec&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//redis无情的拒绝了事务的执行，原因是“之前出现了错误”&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(error) EXECABORT Transaction discarded because of previous errors.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而对于“调用EXEC之后的错误”，redis则采取了完全不同的策略，即redis不会理睬这些错误，而是继续向下执行事务中的其他命令。这是因为，对于应用层面的错误，并不是redis自身需要考虑和处理的问题，所以一个事务中如果某一条命令执行失败，并不会影响接下来的其他命令的执行。我们也来看一个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; multi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; set age &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//age不是集合，所以如下是一条明显错误的指令&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; sadd age &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; set age &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; exec //执行事务时，redis不会理睬第&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;条指令执行错误&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) (error) WRONGTYPE Operation against a key holding the wrong kind of value&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; get age&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;29&quot;&lt;/span&gt; //可以看出第&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;条指令被成功执行了&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好了，我们来说说最后一个指令“WATCH”，这是一个很好用的指令，它可以帮我们实现类似于“乐观锁”的效果，即CAS（check and set）。&lt;/p&gt;
&lt;p&gt;WATCH本身的作用是“监视key是否被改动过”，而且支持同时监视多个key，只要还没真正触发事务，WATCH都会尽职尽责的监视，一旦发现某个key被修改了，在执行EXEC时就会返回nil，表示事务无法触发。  &lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; set age &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; watch age //开始监视age&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; set age &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; //在EXEC之前，age的值被修改了&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; multi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; set age &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; get age&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;QUEUED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;&amp;gt; exec //触发EXEC&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(nil) //事务无法被执行&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;教你看懂redis配置-–-简介&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-–-简介&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 – 简介&quot;&gt;&lt;/a&gt;教你看懂redis配置 – 简介&lt;/h2&gt;&lt;p&gt;我们可以在启动redis-server时指定应该加载的配置文件，方法如下：&lt;/p&gt;
&lt;p&gt;$ redis-server /path/to/redis.conf&lt;br&gt;接下来，我们就来讲解下redis配置文件的各个配置项的含义，注意，本文是基于redis-2.8.4版本进行讲解的。&lt;/p&gt;
&lt;p&gt;redis官方提供的redis.conf文件，足有700+行，其中100多行为有效配置行，另外的600多行为注释说明。&lt;/p&gt;
&lt;p&gt;在配置文件的开头部分，首先明确了一些度量单位：&lt;/p&gt;
&lt;p&gt; 1k =&amp;gt; 1000 bytes&lt;br&gt; 1kb =&amp;gt; 1024 bytes&lt;br&gt; 1m =&amp;gt; 1000000 bytes&lt;br&gt; 1mb =&amp;gt; 1024&lt;em&gt;1024 bytes&lt;br&gt; 1g =&amp;gt; 1000000000 bytes&lt;br&gt; 1gb =&amp;gt; 1024&lt;/em&gt;1024*1024 bytes&lt;/p&gt;
&lt;p&gt;可以看出，redis配置中对单位的大小写不敏感，1GB、1Gb和1gB都是相同的。由此也说明，redis只支持bytes，不支持bit单位。&lt;/p&gt;
&lt;p&gt;redis支持“主配置文件中引入外部配置文件”，很像C/C++中的include指令，比如：&lt;/p&gt;
&lt;p&gt;include /path/to/other.conf&lt;br&gt;如果你看过redis的配置文件，会发现还是很有条理的。redis配置文件被分成了几大块区域，它们分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通用（general）&lt;/li&gt;
&lt;li&gt;快照（snapshotting）&lt;/li&gt;
&lt;li&gt;复制（replication）&lt;/li&gt;
&lt;li&gt;安全（security）&lt;/li&gt;
&lt;li&gt;限制（limits)&lt;/li&gt;
&lt;li&gt;追加模式（append only mode)&lt;/li&gt;
&lt;li&gt;LUA脚本（lua scripting)&lt;/li&gt;
&lt;li&gt;慢日志（slow log)&lt;/li&gt;
&lt;li&gt;事件通知（event notification）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们就来逐一讲解。&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-通用&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-通用&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置-通用&quot;&gt;&lt;/a&gt;教你看懂redis配置-通用&lt;/h2&gt;&lt;p&gt;默认情况下，redis并不是以daemon形式来运行的。通过daemonize配置项可以控制redis的运行形式，如果改为yes，那么redis就会以daemon形式运行：&lt;/p&gt;
&lt;p&gt;daemonize no&lt;br&gt;当以daemon形式运行时，redis会生成一个pid文件，默认会生成在/var/run/redis.pid。当然，你可以通过pidfile来指定pid文件生成的位置，比如：&lt;/p&gt;
&lt;p&gt;pidfile /path/to/redis.pid&lt;br&gt;默认情况下，redis会响应本机所有可用网卡的连接请求。当然，redis允许你通过bind配置项来指定要绑定的IP，比如：&lt;/p&gt;
&lt;p&gt;bind 192.168.1.2 10.8.4.2&lt;br&gt;redis的默认服务端口是6379，你可以通过port配置项来修改。如果端口设置为0的话，redis便不会监听端口了。&lt;/p&gt;
&lt;p&gt;port 6379&lt;br&gt;有些同学会问“如果redis不监听端口，还怎么与外界通信呢”，其实redis还支持通过unix socket方式来接收请求。可以通过unixsocket配置项来指定unix socket文件的路径，并通过unixsocketperm来指定文件的权限。&lt;/p&gt;
&lt;p&gt;unixsocket /tmp/redis.sock&lt;br&gt;unixsocketperm 755&lt;br&gt;当一个redis-client一直没有请求发向server端，那么server端有权主动关闭这个连接，可以通过timeout来设置“空闲超时时限”，0表示永不关闭。&lt;/p&gt;
&lt;p&gt;timeout 0&lt;br&gt;TCP连接保活策略，可以通过tcp-keepalive配置项来进行设置，单位为秒，假如设置为60秒，则server端会每60秒向连接空闲的客户端发起一次ACK请求，以检查客户端是否已经挂掉，对于无响应的客户端则会关闭其连接。所以关闭一个连接最长需要120秒的时间。如果设置为0，则不会进行保活检测。&lt;/p&gt;
&lt;p&gt;tcp-keepalive 0&lt;br&gt;redis支持通过loglevel配置项设置日志等级，共分四级，即debug、verbose、notice、warning。&lt;/p&gt;
&lt;p&gt;loglevel notice&lt;br&gt;redis也支持通过logfile配置项来设置日志文件的生成位置。如果设置为空字符串，则redis会将日志输出到标准输出。假如你在daemon情况下将日志设置为输出到标准输出，则日志会被写到/dev/null中。&lt;/p&gt;
&lt;p&gt;logfile “”&lt;br&gt;如果希望日志打印到syslog中，也很容易，通过syslog-enabled来控制。另外，syslog-ident还可以让你指定syslog里的日志标志，比如：&lt;/p&gt;
&lt;p&gt;syslog-ident redis&lt;br&gt;而且还支持指定syslog设备，值可以是USER或LOCAL0-LOCAL7。具体可以参考syslog服务本身的用法。&lt;/p&gt;
&lt;p&gt;syslog-facility local0&lt;br&gt;对于redis来说，可以设置其数据库的总数量，假如你希望一个redis包含16个数据库，那么设置如下：&lt;/p&gt;
&lt;p&gt;databases 16&lt;br&gt;这16个数据库的编号将是0到15。默认的数据库是编号为0的数据库。用户可以使用select &lt;dbid&gt;来选择相应的数据库。&lt;/dbid&gt;&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-–-快照&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-–-快照&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 – 快照&quot;&gt;&lt;/a&gt;教你看懂redis配置 – 快照&lt;/h2&gt;&lt;p&gt;快照，主要涉及的是redis的RDB持久化相关的配置，我们来一起看一看。&lt;/p&gt;
&lt;p&gt;我们可以用如下的指令来让数据保存到磁盘上，即控制RDB快照功能：&lt;/p&gt;
&lt;p&gt;save &lt;seconds&gt; &lt;changes&gt;&lt;br&gt;举例来说：&lt;/changes&gt;&lt;/seconds&gt;&lt;/p&gt;
&lt;p&gt;save 900 1 //表示每15分钟且至少有1个key改变，就触发一次持久化&lt;/p&gt;
&lt;p&gt;save 300 10 //表示每5分钟且至少有10个key改变，就触发一次持久化&lt;/p&gt;
&lt;p&gt;save 60 10000 //表示每60秒至少有10000个key改变，就触发一次持久化&lt;br&gt;如果你想禁用RDB持久化的策略，只要不设置任何save指令就可以，或者给save传入一个空字符串参数也可以达到相同效果，就像这样：&lt;/p&gt;
&lt;p&gt;save “”&lt;br&gt;如果用户开启了RDB快照功能，那么在redis持久化数据到磁盘时如果出现失败，默认情况下，redis会停止接受所有的写请求。这样做的好处在于可以让用户很明确的知道内存中的数据和磁盘上的数据已经存在不一致了。如果redis不顾这种不一致，一意孤行的继续接收写请求，就可能会引起一些灾难性的后果。&lt;/p&gt;
&lt;p&gt;如果下一次RDB持久化成功，redis会自动恢复接受写请求。&lt;/p&gt;
&lt;p&gt;当然，如果你不在乎这种数据不一致或者有其他的手段发现和控制这种不一致的话，你完全可以关闭这个功能，以便在快照写入失败时，也能确保redis继续接受新的写请求。配置项如下：&lt;/p&gt;
&lt;p&gt;stop-writes-on-bgsave-error yes&lt;br&gt;对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能，但是存储在磁盘上的快照会比较大。&lt;/p&gt;
&lt;p&gt;rdbcompression yes&lt;br&gt;在存储快照后，我们还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果你希望获取到最大的性能提升，可以关闭此功能。&lt;/p&gt;
&lt;p&gt;rdbchecksum yes&lt;br&gt;我们还可以设置快照文件的名称，默认是这样配置的：&lt;/p&gt;
&lt;p&gt;dbfilename dump.rdb&lt;br&gt;最后，你还可以设置这个快照文件存放的路径。比如默认设置就是当前文件夹：&lt;/p&gt;
&lt;p&gt;dir ./&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-–-复制&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-–-复制&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 – 复制&quot;&gt;&lt;/a&gt;教你看懂redis配置 – 复制&lt;/h2&gt;&lt;p&gt;redis提供了主从同步功能。&lt;/p&gt;
&lt;p&gt;通过slaveof配置项可以控制某一个redis作为另一个redis的从服务器，通过指定IP和端口来定位到主redis的位置。一般情况下，我们会建议用户为从redis设置一个不同频率的快照持久化的周期，或者为从redis配置一个不同的服务端口等等。&lt;/p&gt;
&lt;p&gt;slaveof &lt;masterip&gt; &lt;masterport&gt;&lt;br&gt;如果主redis设置了验证密码的话（使用requirepass来设置），则在从redis的配置中要使用masterauth来设置校验密码，否则的话，主redis会拒绝从redis的访问请求。&lt;/masterport&gt;&lt;/masterip&gt;&lt;/p&gt;
&lt;p&gt;masterauth &lt;master-password&gt;&lt;br&gt;当从redis失去了与主redis的连接，或者主从同步正在进行中时，redis该如何处理外部发来的访问请求呢？这里，从redis可以有两种选择：&lt;/master-password&gt;&lt;/p&gt;
&lt;p&gt;第一种选择：如果slave-serve-stale-data设置为yes（默认），则从redis仍会继续响应客户端的读写请求。&lt;/p&gt;
&lt;p&gt;第二种选择：如果slave-serve-stale-data设置为no，则从redis会对客户端的请求返回“SYNC with master in progress”，当然也有例外，当客户端发来INFO请求和SLAVEOF请求，从redis还是会进行处理。&lt;/p&gt;
&lt;p&gt;你可以控制一个从redis是否可以接受写请求。将数据直接写入从redis，一般只适用于那些生命周期非常短的数据，因为在主从同步时，这些临时数据就会被清理掉。自从redis2.6版本之后，默认从redis为只读。&lt;/p&gt;
&lt;p&gt;slave-read-only yes&lt;br&gt;只读的从redis并不适合直接暴露给不可信的客户端。为了尽量降低风险，可以使用rename-command指令来将一些可能有破坏力的命令重命名，避免外部直接调用。比如：&lt;/p&gt;
&lt;p&gt;rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52&lt;br&gt;从redis会周期性的向主redis发出PING包。你可以通过repl_ping_slave_period指令来控制其周期。默认是10秒。&lt;/p&gt;
&lt;p&gt;repl-ping-slave-period 10&lt;br&gt;在主从同步时，可能在这些情况下会有超时发生：&lt;/p&gt;
&lt;p&gt;以从redis的角度来看，当有大规模IO传输时。&lt;br&gt;以从redis的角度来看，当数据传输或PING时，主redis超时&lt;br&gt;以主redis的角度来看，在回复从redis的PING时，从redis超时&lt;br&gt;用户可以设置上述超时的时限，不过要确保这个时限比repl-ping-slave-period的值要大，否则每次主redis都会认为从redis超时。&lt;/p&gt;
&lt;p&gt;repl-timeout 60&lt;br&gt;我们可以控制在主从同步时是否禁用TCP_NODELAY。如果开启TCP_NODELAY，那么主redis会使用更少的TCP包和更少的带宽来向从redis传输数据。但是这可能会增加一些同步的延迟，大概会达到40毫秒左右。如果你关闭了TCP_NODELAY，那么数据同步的延迟时间会降低，但是会消耗更多的带宽。（如果你不了解TCP_NODELAY，可以到这里来科普一下）。&lt;/p&gt;
&lt;p&gt;repl-disable-tcp-nodelay no&lt;br&gt;我们还可以设置同步队列长度。队列长度（backlog)是主redis中的一个缓冲区，在与从redis断开连接期间，主redis会用这个缓冲区来缓存应该发给从redis的数据。这样的话，当从redis重新连接上之后，就不必重新全量同步数据，只需要同步这部分增量数据即可。&lt;/p&gt;
&lt;p&gt;repl-backlog-size 1mb&lt;br&gt;如果主redis等了一段时间之后，还是无法连接到从redis，那么缓冲队列中的数据将被清理掉。我们可以设置主redis要等待的时间长度。如果设置为0，则表示永远不清理。默认是1个小时。&lt;/p&gt;
&lt;p&gt;repl-backlog-ttl 3600&lt;br&gt;我们可以给众多的从redis设置优先级，在主redis持续工作不正常的情况，优先级高的从redis将会升级为主redis。而编号越小，优先级越高。比如一个主redis有三个从redis，优先级编号分别为10、100、25，那么编号为10的从redis将会被首先选中升级为主redis。当优先级被设置为0时，这个从redis将永远也不会被选中。默认的优先级为100。&lt;/p&gt;
&lt;p&gt;slave-priority 100&lt;br&gt;假如主redis发现有超过M个从redis的连接延时大于N秒，那么主redis就停止接受外来的写请求。这是因为从redis一般会每秒钟都向主redis发出PING，而主redis会记录每一个从redis最近一次发来PING的时间点，所以主redis能够了解每一个从redis的运行情况。&lt;/p&gt;
&lt;p&gt;min-slaves-to-write 3&lt;br&gt;min-slaves-max-lag 10&lt;br&gt;上面这个例子表示，假如有大于等于3个从redis的连接延迟大于10秒，那么主redis就不再接受外部的写请求。上述两个配置中有一个被置为0，则这个特性将被关闭。默认情况下min-slaves-to-write为0，而min-slaves-max-lag为10。&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-–-安全&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-–-安全&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 – 安全&quot;&gt;&lt;/a&gt;教你看懂redis配置 – 安全&lt;/h2&gt;&lt;p&gt;我们可以要求redis客户端在向redis-server发送请求之前，先进行密码验证。当你的redis-server处于一个不太可信的网络环境中时，相信你会用上这个功能。由于redis性能非常高，所以每秒钟可以完成多达15万次的密码尝试，所以你最好设置一个足够复杂的密码，否则很容易被黑客破解。&lt;/p&gt;
&lt;p&gt;requirepass zhimakaimen&lt;br&gt;这里我们通过requirepass将密码设置成“芝麻开门”。&lt;/p&gt;
&lt;p&gt;redis允许我们对redis指令进行更名，比如将一些比较危险的命令改个名字，避免被误执行。比如可以把CONFIG命令改成一个很复杂的名字，这样可以避免外部的调用，同时还可以满足内部调用的需要：&lt;/p&gt;
&lt;p&gt;rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c89&lt;br&gt;我们甚至可以禁用掉CONFIG命令，那就是把CONFIG的名字改成一个空字符串：&lt;/p&gt;
&lt;p&gt;rename-command CONFIG “”&lt;br&gt;但需要注意的是，如果你使用AOF方式进行数据持久化，或者需要与从redis进行通信，那么更改指令的名字可能会引起一些问题。&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-限制&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-限制&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 -限制&quot;&gt;&lt;/a&gt;教你看懂redis配置 -限制&lt;/h2&gt;&lt;p&gt;我们可以设置redis同时可以与多少个客户端进行连接。默认情况下为10000个客户端。当你无法设置进程文件句柄限制时，redis会设置为当前的文件句柄限制值减去32，因为redis会为自身内部处理逻辑留一些句柄出来。&lt;/p&gt;
&lt;p&gt;如果达到了此限制，redis则会拒绝新的连接请求，并且向这些连接请求方发出“max number of clients reached”以作回应。&lt;/p&gt;
&lt;p&gt;maxclients 10000&lt;br&gt;我们甚至可以设置redis可以使用的内存量。一旦到达内存使用上限，redis将会试图移除内部数据，移除规则可以通过maxmemory-policy来指定。&lt;/p&gt;
&lt;p&gt;如果redis无法根据移除规则来移除内存中的数据，或者我们设置了“不允许移除”，那么redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPUSH等。但是对于无内存申请的指令，仍然会正常响应，比如GET等。&lt;/p&gt;
&lt;p&gt;maxmemory &lt;bytes&gt;&lt;br&gt;需要注意的一点是，如果你的redis是主redis（说明你的redis有从redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素。&lt;/bytes&gt;&lt;/p&gt;
&lt;p&gt;对于内存移除规则来说，redis提供了多达6种的移除规则。他们是：&lt;/p&gt;
&lt;p&gt;volatile-lru：使用LRU算法移除过期集合中的key&lt;br&gt;allkeys-lru：使用LRU算法移除key&lt;br&gt;volatile-random：在过期集合中移除随机的key&lt;br&gt;allkeys-random：移除随机的key&lt;br&gt;volatile-ttl：移除那些TTL值最小的key，即那些最近才过期的key。&lt;br&gt;noeviction：不进行移除。针对写操作，只是返回错误信息。&lt;br&gt;无论使用上述哪一种移除规则，如果没有合适的key可以移除的话，redis都会针对写请求返回错误信息。&lt;/p&gt;
&lt;p&gt;maxmemory-policy volatile-lru&lt;br&gt;LRU算法和最小TTL算法都并非是精确的算法，而是估算值。所以你可以设置样本的大小。假如redis默认会检查三个key并选择其中LRU的那个，那么你可以改变这个key样本的数量。&lt;/p&gt;
&lt;p&gt;maxmemory-samples 3&lt;br&gt;最后，我们补充一个信息，那就是到目前版本（2.8.4）为止，redis支持的写指令包括了如下这些：&lt;/p&gt;
&lt;p&gt;set setnx setex append&lt;br&gt;incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd&lt;br&gt;sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby&lt;br&gt;zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby&lt;br&gt;getset mset msetnx exec sort&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-–-追加模式&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-–-追加模式&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 – 追加模式&quot;&gt;&lt;/a&gt;教你看懂redis配置 – 追加模式&lt;/h2&gt;&lt;p&gt;默认情况下，redis会异步的将数据持久化到磁盘。这种模式在大部分应用程序中已被验证是很有效的，但是在一些问题发生时，比如断电，则这种机制可能会导致数分钟的写请求丢失。&lt;/p&gt;
&lt;p&gt;如博文上半部分中介绍的，追加文件（Append Only File）是一种更好的保持数据一致性的方式。即使当服务器断电时，也仅会有1秒钟的写请求丢失，当redis进程出现问题且操作系统运行正常时，甚至只会丢失一条写请求。&lt;/p&gt;
&lt;p&gt;我们建议大家，AOF机制和RDB机制可以同时使用，不会有任何冲突。对于如何保持数据一致性的讨论，请参见本文。&lt;/p&gt;
&lt;p&gt;appendonly no&lt;br&gt;我们还可以设置aof文件的名称：&lt;/p&gt;
&lt;p&gt;appendfilename “appendonly.aof”&lt;br&gt;fsync()调用，用来告诉操作系统立即将缓存的指令写入磁盘。一些操作系统会“立即”进行，而另外一些操作系统则会“尽快”进行。&lt;/p&gt;
&lt;p&gt;redis支持三种不同的模式：&lt;/p&gt;
&lt;p&gt;no：不调用fsync()。而是让操作系统自行决定sync的时间。这种模式下，redis的性能会最快。&lt;br&gt;always：在每次写请求后都调用fsync()。这种模式下，redis会相对较慢，但数据最安全。&lt;br&gt;everysec：每秒钟调用一次fsync()。这是性能和安全的折衷。&lt;br&gt;默认情况下为everysec。有关数据一致性的揭秘，可以参考本文。&lt;/p&gt;
&lt;p&gt;appendfsync everysec&lt;br&gt;当fsync方式设置为always或everysec时，如果后台持久化进程需要执行一个很大的磁盘IO操作，那么redis可能会在fsync()调用时卡住。目前尚未修复这个问题，这是因为即使我们在另一个新的线程中去执行fsync()，也会阻塞住同步写调用。&lt;/p&gt;
&lt;p&gt;为了缓解这个问题，我们可以使用下面的配置项，这样的话，当BGSAVE或BGWRITEAOF运行时，fsync()在主进程中的调用会被阻止。这意味着当另一路进程正在对AOF文件进行重构时，redis的持久化功能就失效了，就好像我们设置了“appendsync none”一样。如果你的redis有时延问题，那么请将下面的选项设置为yes。否则请保持no，因为这是保证数据完整性的最安全的选择。&lt;/p&gt;
&lt;p&gt;no-appendfsync-on-rewrite no&lt;br&gt;我们允许redis自动重写aof。当aof增长到一定规模时，redis会隐式调用BGREWRITEAOF来重写log文件，以缩减文件体积。&lt;/p&gt;
&lt;p&gt;redis是这样工作的：redis会记录上次重写时的aof大小。假如redis自启动至今还没有进行过重写，那么启动时aof文件的大小会被作为基准值。这个基准值会和当前的aof大小进行比较。如果当前aof大小超出所设置的增长比例，则会触发重写。另外，你还需要设置一个最小大小，是为了防止在aof很小时就触发重写。&lt;/p&gt;
&lt;p&gt;auto-aof-rewrite-percentage 100&lt;br&gt;auto-aof-rewrite-min-size 64mb&lt;br&gt;如果设置auto-aof-rewrite-percentage为0，则会关闭此重写功能。&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-–-LUA脚本&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-–-LUA脚本&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 – LUA脚本&quot;&gt;&lt;/a&gt;教你看懂redis配置 – LUA脚本&lt;/h2&gt;&lt;p&gt;lua脚本的最大运行时间是需要被严格限制的，要注意单位是毫秒：&lt;/p&gt;
&lt;p&gt;lua-time-limit 5000&lt;br&gt;如果此值设置为0或负数，则既不会有报错也不会有时间限制。&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-–-慢日志&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-–-慢日志&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 – 慢日志&quot;&gt;&lt;/a&gt;教你看懂redis配置 – 慢日志&lt;/h2&gt;&lt;p&gt;redis慢日志是指一个系统进行日志查询超过了指定的时长。这个时长不包括IO操作，比如与客户端的交互、发送响应内容等，而仅包括实际执行查询命令的时间。&lt;/p&gt;
&lt;p&gt;针对慢日志，你可以设置两个参数，一个是执行时长，单位是微秒，另一个是慢日志的长度。当一个新的命令被写入日志时，最老的一条会从命令日志队列中被移除。&lt;/p&gt;
&lt;p&gt;单位是微秒，即1000000表示一秒。负数则会禁用慢日志功能，而0则表示强制记录每一个命令。&lt;/p&gt;
&lt;p&gt;slowlog-log-slower-than 10000&lt;br&gt;慢日志最大长度，可以随便填写数值，没有上限，但要注意它会消耗内存。你可以使用SLOWLOG RESET来重设这个值。&lt;/p&gt;
&lt;p&gt;slowlog-max-len 128&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-–-事件通知&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-–-事件通知&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 – 事件通知&quot;&gt;&lt;/a&gt;教你看懂redis配置 – 事件通知&lt;/h2&gt;&lt;p&gt;redis可以向客户端通知某些事件的发生。这个特性的具体解释可以参见本文。&lt;/p&gt;
&lt;h2 id=&quot;教你看懂redis配置-–-高级配置&quot;&gt;&lt;a href=&quot;#教你看懂redis配置-–-高级配置&quot; class=&quot;headerlink&quot; title=&quot;教你看懂redis配置 – 高级配置&quot;&gt;&lt;/a&gt;教你看懂redis配置 – 高级配置&lt;/h2&gt;&lt;p&gt;有关哈希数据结构的一些配置项：&lt;/p&gt;
&lt;p&gt;hash-max-ziplist-entries 512&lt;br&gt;hash-max-ziplist-value 64&lt;br&gt;有关列表数据结构的一些配置项：&lt;/p&gt;
&lt;p&gt;list-max-ziplist-entries 512&lt;br&gt;list-max-ziplist-value 64&lt;br&gt;有关集合数据结构的配置项：&lt;/p&gt;
&lt;p&gt;set-max-intset-entries 512&lt;br&gt;有关有序集合数据结构的配置项：&lt;/p&gt;
&lt;p&gt;zset-max-ziplist-entries 128&lt;br&gt;zset-max-ziplist-value 64&lt;br&gt;关于是否需要再哈希的配置项：&lt;/p&gt;
&lt;p&gt;activerehashing yes&lt;br&gt;关于客户端输出缓冲的控制项：&lt;/p&gt;
&lt;p&gt;client-output-buffer-limit normal 0 0 0&lt;br&gt;client-output-buffer-limit slave 256mb 64mb 60&lt;br&gt;client-output-buffer-limit pubsub 32mb 8mb 60&lt;br&gt;有关频率的配置项：&lt;/p&gt;
&lt;p&gt;hz 10&lt;br&gt;有关重写aof的配置项&lt;/p&gt;
&lt;p&gt;aof-rewrite-incremental-fsync yes&lt;/p&gt;
&lt;p&gt;至此，redis的入门内容就结束了，内容实在不少，但相对来说都很基础，本文没有涉及redis集群、redis工作原理、redis源码、redis相关LIB库等内容，后续会陆续奉献&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;redis是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库。&lt;br&gt;redis的官网地址，非常好记，是redis.io。（特意查了一下，域名后缀io属于国家域名，是british Indian Ocean territory，即英属印度洋领地）&lt;br&gt;目前，Vmware在资助着redis项目的开发和维护。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="redis" scheme="http://hangweiping.github.io/tags/redis/"/>
    
      <category term="数据库" scheme="http://hangweiping.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>git笔记</title>
    <link href="http://hangweiping.github.io/2016/05/08/git%E7%AC%94%E8%AE%B0/"/>
    <id>http://hangweiping.github.io/2016/05/08/git笔记/</id>
    <published>2016-05-08T13:26:23.000Z</published>
    <updated>2016-08-10T10:13:19.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。&lt;br&gt;Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。&lt;br&gt;Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Git-与-SVN-区别&quot;&gt;&lt;a href=&quot;#Git-与-SVN-区别&quot; class=&quot;headerlink&quot; title=&quot;Git 与 SVN 区别&quot;&gt;&lt;/a&gt;Git 与 SVN 区别&lt;/h3&gt;&lt;p&gt;GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。&lt;br&gt;如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。&lt;/li&gt;
&lt;li&gt;GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。    &lt;/li&gt;
&lt;li&gt;GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。  &lt;/li&gt;
&lt;li&gt;GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。  &lt;/li&gt;
&lt;li&gt;GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。    &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;git安装及初始设置&quot;&gt;&lt;a href=&quot;#git安装及初始设置&quot; class=&quot;headerlink&quot; title=&quot;git安装及初始设置&quot;&gt;&lt;/a&gt;git安装及初始设置&lt;/h2&gt;&lt;p&gt;安装完成后，还需要最后一步设置，在命令行输入：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global user.name &lt;span class=&quot;string&quot;&gt;&quot;Your Name&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global user.email &lt;span class=&quot;string&quot;&gt;&quot;email@example.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。&lt;/p&gt;
&lt;p&gt;注意&lt;code&gt;git config&lt;/code&gt;命令的&lt;code&gt;--global&lt;/code&gt;参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。&lt;/p&gt;
&lt;h2 id=&quot;基本操作-初始化，添加，提交，查看状态&quot;&gt;&lt;a href=&quot;#基本操作-初始化，添加，提交，查看状态&quot; class=&quot;headerlink&quot; title=&quot;基本操作(初始化，添加，提交，查看状态)&quot;&gt;&lt;/a&gt;基本操作(初始化，添加，提交，查看状态)&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;暂存区是Git非常重要的概念&lt;/strong&gt;，弄明白了暂存区，就弄明白了Git的很多操作到底干了什么。&lt;/p&gt;
&lt;p&gt;初始化一个Git仓库，使用&lt;code&gt;git init&lt;/code&gt;命令。&lt;br&gt;添加文件到Git仓库，分两步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步，使用命令&lt;code&gt;git add &amp;lt;file&amp;gt;&lt;/code&gt;，注意，可反复多次使用，添加多个文件；&lt;/li&gt;
&lt;li&gt;第二步，使用命令&lt;code&gt;git commit&lt;/code&gt;，完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要随时掌握工作区的状态，使用&lt;code&gt;git status&lt;/code&gt;命令。&lt;br&gt;如果&lt;code&gt;git status&lt;/code&gt;告诉你有文件被修改过，用&lt;code&gt;git diff&lt;/code&gt;可以查看修改内容。&lt;/p&gt;
&lt;h3 id=&quot;版本回退&quot;&gt;&lt;a href=&quot;#版本回退&quot; class=&quot;headerlink&quot; title=&quot;版本回退&quot;&gt;&lt;/a&gt;版本回退&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令&lt;code&gt;git reset --hard commit_id&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;穿梭前，用&lt;code&gt;git log&lt;/code&gt;可以查看提交历史，以便确定要回退到哪个版本。&lt;/li&gt;
&lt;li&gt;要重返未来，用&lt;code&gt;git reflog&lt;/code&gt;查看命令历史，以便确定要回到未来的哪个版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;add的实质&lt;/strong&gt; 理解Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中。&lt;/p&gt;
&lt;h3 id=&quot;撤销修改&quot;&gt;&lt;a href=&quot;#撤销修改&quot; class=&quot;headerlink&quot; title=&quot;撤销修改&quot;&gt;&lt;/a&gt;撤销修改&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令&lt;code&gt;git checkout -- file&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令&lt;code&gt;git reset HEAD file&lt;/code&gt;，就回到了场景1，第二步按场景1操作。&lt;/li&gt;
&lt;li&gt;场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命令&lt;code&gt;git rm&lt;/code&gt;用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。&lt;/p&gt;
&lt;h2 id=&quot;远程仓库&quot;&gt;&lt;a href=&quot;#远程仓库&quot; class=&quot;headerlink&quot; title=&quot;远程仓库&quot;&gt;&lt;/a&gt;远程仓库&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;要关联一个远程库，使用命令&lt;code&gt;git remote add origin git@server-name:path/repo-name.git&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;关联后，使用命令&lt;code&gt;git push -u origin master&lt;/code&gt;第一次推送master分支的所有内容；&lt;/li&gt;
&lt;li&gt;此后，每次本地提交后，只要有必要，就可以使用命令&lt;code&gt;git push origin master&lt;/code&gt;推送最新修改；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！&lt;/p&gt;
&lt;p&gt;要克隆一个仓库，首先必须知道仓库的地址，然后使用&lt;code&gt;git clone&lt;/code&gt;命令克隆。&lt;br&gt;Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。&lt;/p&gt;
&lt;h2 id=&quot;分支管理&quot;&gt;&lt;a href=&quot;#分支管理&quot; class=&quot;headerlink&quot; title=&quot;分支管理&quot;&gt;&lt;/a&gt;分支管理&lt;/h2&gt;&lt;p&gt;Git鼓励大量使用分支：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看分支：&lt;code&gt;git branch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建分支：&lt;code&gt;git branch &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;切换分支：&lt;code&gt;git checkout &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建+切换分支：&lt;code&gt;git checkout -b &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;合并某分支到当前分支：&lt;code&gt;git merge &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除分支：&lt;code&gt;git branch -d &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。&lt;br&gt;用&lt;code&gt;git log --graph&lt;/code&gt;命令可以看到分支合并图。&lt;/p&gt;
&lt;p&gt;合并分支时，加上&lt;code&gt;--no-ff&lt;/code&gt;参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而&lt;code&gt;fast forward&lt;/code&gt;合并就看不出来曾经做过合并。&lt;/p&gt;
&lt;p&gt;修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；&lt;br&gt;当手头工作没有完成时，先把工作现场&lt;code&gt;git stash&lt;/code&gt;一下，然后去修复bug，修复后，再&lt;code&gt;git stash pop&lt;/code&gt;，回到工作现场。&lt;/p&gt;
&lt;p&gt;如果要丢弃一个没有被合并过的分支，可以通过&lt;code&gt;git branch -D &amp;lt;name&amp;gt;&lt;/code&gt;强行删除。&lt;/p&gt;
&lt;h3 id=&quot;多人协作&quot;&gt;&lt;a href=&quot;#多人协作&quot; class=&quot;headerlink&quot; title=&quot;多人协作&quot;&gt;&lt;/a&gt;多人协作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;查看远程库信息，使用&lt;code&gt;git remote -v&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;本地新建的分支如果不推送到远程，对其他人就是不可见的；&lt;/li&gt;
&lt;li&gt;从本地推送分支，使用&lt;code&gt;git push origin branch-name&lt;/code&gt;，如果推送失败，先用&lt;code&gt;git pull&lt;/code&gt;抓取远程的新提交；&lt;/li&gt;
&lt;li&gt;在本地创建和远程分支对应的分支，使用&lt;code&gt;git checkout -b branch-name origin/branch-name&lt;/code&gt;，本地和远程分支的名称最好一致；&lt;/li&gt;
&lt;li&gt;建立本地分支和远程分支的关联，使用&lt;code&gt;git branch --set-upstream branch-name origin/branch-name&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;从远程抓取分支，使用`git pull，如果有冲突，要先处理冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;标签管理&quot;&gt;&lt;a href=&quot;#标签管理&quot; class=&quot;headerlink&quot; title=&quot;标签管理&quot;&gt;&lt;/a&gt;标签管理&lt;/h2&gt;&lt;h3 id=&quot;创作标签&quot;&gt;&lt;a href=&quot;#创作标签&quot; class=&quot;headerlink&quot; title=&quot;创作标签&quot;&gt;&lt;/a&gt;创作标签&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;命令&lt;code&gt;git tag &amp;lt;name&amp;gt;&lt;/code&gt;用于新建一个标签，默认为&lt;code&gt;HEAD&lt;/code&gt;，也可以指定一个&lt;code&gt;commit id&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag -a &amp;lt;tagname&amp;gt; -m &amp;quot;blablabla...&amp;quot;&lt;/code&gt;可以指定标签信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag -s &amp;lt;tagname&amp;gt; -m &amp;quot;blablabla...&amp;quot;&lt;/code&gt;可以用PGP签名标签；&lt;/li&gt;
&lt;li&gt;命令&lt;code&gt;git tag&lt;/code&gt;可以查看所有标签。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;操作标签&quot;&gt;&lt;a href=&quot;#操作标签&quot; class=&quot;headerlink&quot; title=&quot;操作标签&quot;&gt;&lt;/a&gt;操作标签&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;命令&lt;code&gt;git push origin &amp;lt;tagname&amp;gt;&lt;/code&gt;可以推送一个本地标签；&lt;/li&gt;
&lt;li&gt;命令&lt;code&gt;git push origin --tags&lt;/code&gt;可以推送全部未推送过的本地标签；&lt;/li&gt;
&lt;li&gt;命令&lt;code&gt;git tag -d &amp;lt;tagname&amp;gt;&lt;/code&gt;可以删除一个本地标签；&lt;/li&gt;
&lt;li&gt;命令&lt;code&gt;git push origin :refs/tags/&amp;lt;tagname&amp;gt;&lt;/code&gt;可以删除一个远程标签。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;自定义Git&quot;&gt;&lt;a href=&quot;#自定义Git&quot; class=&quot;headerlink&quot; title=&quot;自定义Git&quot;&gt;&lt;/a&gt;自定义Git&lt;/h2&gt;&lt;p&gt;让&lt;strong&gt;Git显示颜色&lt;/strong&gt;，会让命令输出看起来更醒目：&lt;br&gt;&lt;code&gt;$ git config --global color.ui true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;忽略某些文件&lt;/strong&gt;时，需要编写&lt;code&gt;.gitignore&lt;/code&gt;；&lt;br&gt;&lt;code&gt;.gitignore&lt;/code&gt;文件本身要放到版本库里，并且可以对&lt;code&gt;.gitignore&lt;/code&gt;做版本管理！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置别名&lt;/strong&gt;：Git配置文件都放在&lt;code&gt;.git/config&lt;/code&gt;文件中&lt;/p&gt;
&lt;p&gt;搭建Git服务器非常简单，通常10分钟即可完成.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。&lt;br&gt;Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。&lt;br&gt;Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://hangweiping.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>HTML5(1)--web worker</title>
    <link href="http://hangweiping.github.io/2016/05/07/web_worker/"/>
    <id>http://hangweiping.github.io/2016/05/07/web_worker/</id>
    <published>2016-05-07T11:43:49.000Z</published>
    <updated>2016-08-10T10:18:12.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;JavaScript语言采用的是单线程模型，也就是说，所有任务排成一个队列，一次只能做一件事。随着电脑计算能力的增强，尤其是多核CPU的出现，这一点带来很大的不便，无法充分发挥JavaScript的潜力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Web Worker的目的，就是为JavaScript创造多线程环境，允许主线程将一些任务分配给子线程。在主线程运行的同时，子线程在后台运行，两者互不干扰。等到子线程完成计算任务，再把结果返回给主线程。因此，每一个子线程就好像一个“工人”（worker），默默地完成自己的工作。这样做的好处是，一些高计算量或高延迟的工作，被worker线程负担了，所以主进程（通常是UI进程）就会很流畅，不会被阻塞或拖慢。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;Worker线程分成好几种。&quot;&gt;&lt;a href=&quot;#Worker线程分成好几种。&quot; class=&quot;headerlink&quot; title=&quot;Worker线程分成好几种。&quot;&gt;&lt;/a&gt;Worker线程分成好几种。&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;普通的Worker：只能与创造它们的主进程通信。&lt;/li&gt;
&lt;li&gt;Shared Worker：能被所有同源的进程获取（比如来自不同的浏览器窗口、iframe窗口和其他Shared worker），它们必须通过一个端口通信。&lt;/li&gt;
&lt;li&gt;ServiceWorker：实际上是一个在网络应用与浏览器或网络层之间的代理层。它可以拦截网络请求，使得离线访问成为可能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Web-Worker有以下几个特点：&quot;&gt;&lt;a href=&quot;#Web-Worker有以下几个特点：&quot; class=&quot;headerlink&quot; title=&quot;Web Worker有以下几个特点：&quot;&gt;&lt;/a&gt;Web Worker有以下几个特点：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;同域限制&lt;/strong&gt;。子线程加载的脚本文件，必须与主线程的脚本文件在同一个域。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DOM限制&lt;/strong&gt;。子线程所在的全局对象，与主进程不一样，它无法读取网页的DOM对象，即&lt;code&gt;document&lt;/code&gt;、&lt;code&gt;window&lt;/code&gt;、&lt;code&gt;parent&lt;/code&gt;这些对象，子线程都无法得到。（但是，&lt;code&gt;navigator&lt;/code&gt;对象和&lt;code&gt;location&lt;/code&gt;对象可以获得。）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;脚本限制&lt;/strong&gt;。子线程无法读取网页的全局变量和函数，也不能执行alert和confirm方法，不过可以执行setInterval和setTimeout，以及使用XMLHttpRequest对象发出AJAX请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件限制&lt;/strong&gt;。子线程无法读取本地文件，即子线程无法打开本机的文件系统（file://），它所加载的脚本，必须来自网络。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;我们可以做什么：&quot;&gt;&lt;a href=&quot;#我们可以做什么：&quot; class=&quot;headerlink&quot; title=&quot;我们可以做什么：&quot;&gt;&lt;/a&gt;我们可以做什么：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;可以加载一个JS进行大量的复杂计算而不挂起主进程，并通过postMessage，onmessage进行通信&lt;/li&gt;
&lt;li&gt;可以在worker中通过importScripts(url)加载另外的脚本文件&lt;/li&gt;
&lt;li&gt;可以使用 setTimeout(), clearTimeout(), setInterval(), and clearInterval()&lt;/li&gt;
&lt;li&gt;可以使用XMLHttpRequest来发送请求&lt;/li&gt;
&lt;li&gt;可以访问navigator的部分属性&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;有那些局限性：&quot;&gt;&lt;a href=&quot;#有那些局限性：&quot; class=&quot;headerlink&quot; title=&quot;有那些局限性：&quot;&gt;&lt;/a&gt;有那些局限性：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;不能跨域加载JS&lt;/li&gt;
&lt;li&gt;worker内代码不能访问DOM&lt;/li&gt;
&lt;li&gt;各个浏览器对Worker的实现不大一致，例如FF里允许worker中创建新的worker,而Chrome中就不行&lt;/li&gt;
&lt;li&gt;不是每个浏览器都支持这个新特性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用之前，检查浏览器是否支持这个API。&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.Worker) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 支持&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 不支持&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;新建和启动子线程&quot;&gt;&lt;a href=&quot;#新建和启动子线程&quot; class=&quot;headerlink&quot; title=&quot;新建和启动子线程&quot;&gt;&lt;/a&gt;新建和启动子线程&lt;/h2&gt;&lt;p&gt;主线程采用&lt;code&gt;new&lt;/code&gt;命令，调用&lt;code&gt;Worker&lt;/code&gt;构造函数，可以新建一个子线程。&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; worker = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Worker(&lt;span class=&quot;string&quot;&gt;&#39;work.js&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Worker构造函数的参数是一个脚本文件，这个文件就是子线程所要完成的任务，上面代码中是&lt;code&gt;work.js&lt;/code&gt;。由于子线程不能读取本地文件系统，所以这个脚本文件必须来自网络端。如果下载没有成功，比如出现404错误，这个子线程就会默默地失败。&lt;/p&gt;
&lt;p&gt;子线程新建之后，并没有启动，必需等待主线程调用&lt;code&gt;postMessage&lt;/code&gt;方法，即发出信号之后才会启动。&lt;code&gt;postMessage&lt;/code&gt;方法的参数，就是主线程传给子线程的信号。它可以是一个字符串，也可以是一个对象。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.postMessage&lt;/span&gt;(&quot;&lt;span class=&quot;selector-tag&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;World&lt;/span&gt;&quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.postMessage&lt;/span&gt;(&amp;#123;&lt;span class=&quot;attribute&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;echo&#39;&lt;/span&gt;, args: [&lt;span class=&quot;string&quot;&gt;&#39;Work&#39;&lt;/span&gt;]&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只要符合父线程的同源政策，Worker线程自己也能新建Worker线程。Worker线程可以使用XMLHttpRequest进行网络I/O，但是&lt;code&gt;XMLHttpRequest&lt;/code&gt;对象的&lt;code&gt;responseXML&lt;/code&gt;和&lt;code&gt;channel&lt;/code&gt;属性总是返回&lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;子线程的事件监听&quot;&gt;&lt;a href=&quot;#子线程的事件监听&quot; class=&quot;headerlink&quot; title=&quot;子线程的事件监听&quot;&gt;&lt;/a&gt;子线程的事件监听&lt;/h2&gt;&lt;p&gt;在子线程内，必须有一个回调函数，监听message事件。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* File: work.js */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;message&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.postMessage(&lt;span class=&quot;string&quot;&gt;&#39;You said: &#39;&lt;/span&gt; + e.data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;self代表子线程自身，self.addEventListener表示对子线程的message事件指定回调函数（直接指定onmessage属性的值也可）。回调函数的参数是一个事件对象，它的data属性包含主线程发来的信号。self.postMessage则表示，子线程向主线程发送一个信号。&lt;/p&gt;
&lt;p&gt;根据主线程发来的不同的信号值，子线程可以调用不同的方法。&lt;/p&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* File: work.js */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;self.onmessage = function(event) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;method&lt;/span&gt; = event.data.&lt;span class=&quot;built_in&quot;&gt;method&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;args&lt;/span&gt; = event.data.&lt;span class=&quot;built_in&quot;&gt;args&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; reply = doSomething(&lt;span class=&quot;built_in&quot;&gt;args&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  self.postMessage(&amp;#123;&lt;span class=&quot;built_in&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;method&lt;/span&gt;, reply: reply&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;主线程的事件监听&quot;&gt;&lt;a href=&quot;#主线程的事件监听&quot; class=&quot;headerlink&quot; title=&quot;主线程的事件监听&quot;&gt;&lt;/a&gt;主线程的事件监听&lt;/h2&gt;&lt;p&gt;主线程也必须指定message事件的回调函数，监听子线程发来的信号。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* File: main.js */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;worker.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;message&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(e.data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;错误处理&quot;&gt;&lt;a href=&quot;#错误处理&quot; class=&quot;headerlink&quot; title=&quot;错误处理&quot;&gt;&lt;/a&gt;错误处理&lt;/h2&gt;&lt;p&gt;主线程可以监听子线程是否发生错误。如果发生错误，会触发主线程的error事件。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;worker.onerror(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(event);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// or&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;worker.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(event);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;关闭子线程&quot;&gt;&lt;a href=&quot;#关闭子线程&quot; class=&quot;headerlink&quot; title=&quot;关闭子线程&quot;&gt;&lt;/a&gt;关闭子线程&lt;/h2&gt;&lt;p&gt;使用完毕之后，为了节省系统资源，我们必须在主线程调用terminate方法，手动关闭子线程。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;worker&lt;span class=&quot;selector-class&quot;&gt;.terminate&lt;/span&gt;();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以子线程内部关闭自身。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;self&lt;span class=&quot;selector-class&quot;&gt;.close&lt;/span&gt;();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;主线程与子线程的数据通信&quot;&gt;&lt;a href=&quot;#主线程与子线程的数据通信&quot; class=&quot;headerlink&quot; title=&quot;主线程与子线程的数据通信&quot;&gt;&lt;/a&gt;主线程与子线程的数据通信&lt;/h2&gt;&lt;p&gt;前面说过，主线程与子线程之间的通信内容，可以是文本，也可以是对象。需要注意的是，这种通信是拷贝关系，即是传值而不是传址，子线程对通信内容的修改，不会影响到主线程。事实上，浏览器内部的运行机制是，先将通信内容串行化，然后把串行化后的字符串发给子线程，后者再将它还原。&lt;/p&gt;
&lt;p&gt;主线程与子线程之间也可以交换二进制数据，比如File、Blob、ArrayBuffer等对象，也可以在线程之间发送。&lt;/p&gt;
&lt;p&gt;但是，用拷贝方式发送二进制数据，会造成性能问题。比如，主线程向子线程发送一个500MB文件，默认情况下浏览器会生成一个原文件的拷贝。为了解决这个问题，JavaScript允许主线程把二进制数据直接转移给子线程，但是一旦转移，主线程就无法再使用这些二进制数据了，这是为了防止出现多个线程同时修改数据的麻烦局面。这种转移数据的方法，叫做&lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#transferable-objects&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Transferable Objects&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果要使用该方法，postMessage方法的最后一个参数必须是一个数组，用来指定前面发送的哪些值可以被转移给子线程。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.postMessage&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;arrayBuffer&lt;/span&gt;, &lt;span class=&quot;selector-attr&quot;&gt;[arrayBuffer]&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.postMessage&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;arrayBuffer&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;targetOrigin&lt;/span&gt;, &lt;span class=&quot;selector-attr&quot;&gt;[arrayBuffer]&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;同页面的Web-Worker&quot;&gt;&lt;a href=&quot;#同页面的Web-Worker&quot; class=&quot;headerlink&quot; title=&quot;同页面的Web Worker&quot;&gt;&lt;/a&gt;同页面的Web Worker&lt;/h2&gt;&lt;p&gt;通常情况下，子线程载入的是一个单独的JavaScript文件，但是也可以载入与主线程在同一个网页的代码。假设网页代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;worker&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;app/worker&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;actionscript&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;message&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                postMessage(&lt;span class=&quot;string&quot;&gt;&#39;Im reading Tech.pro&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以读取页面中的script，用worker来处理。&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; blob = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Blob([&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;#worker&#39;&lt;/span&gt;).textContent]);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里需要把代码当作二进制对象读取，所以使用Blob接口。然后，这个二进制对象转为URL，再通过这个URL创建worker。&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.URL.createObjectURL(blob);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; worker = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Worker(&lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;部署事件监听代码。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;worker.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;message&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(e.data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，启动worker。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;worker&lt;span class=&quot;selector-class&quot;&gt;.postMessage&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;整个页面的代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;worker&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;app/worker&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;actionscript&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;message&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      postMessage(&lt;span class=&quot;string&quot;&gt;&#39;Work done!&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; blob = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Blob([&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#worker&#39;&lt;/span&gt;).textContent]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.URL.createObjectURL(blob);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; worker = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Worker(url);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      worker.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;message&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(e.data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      worker.postMessage(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，主线程和子线程的代码都在同一个网页上面。&lt;/p&gt;
&lt;p&gt;上面所讲的Web Worker都是专属于某个网页的，当该网页关闭，worker就自动结束。除此之外，还有一种共享式的Web Worker，允许多个浏览器窗口共享同一个worker，只有当所有网口关闭，它才会结束。这种共享式的Worker用SharedWorker对象来建立，因为适用场合不多，这里就省略了。&lt;/p&gt;
&lt;h2 id=&quot;Service-Worker&quot;&gt;&lt;a href=&quot;#Service-Worker&quot; class=&quot;headerlink&quot; title=&quot;Service Worker&quot;&gt;&lt;/a&gt;Service Worker&lt;/h2&gt;&lt;p&gt;Service worker是一个在浏览器后台运行的脚本，与网页不相干，专注于那些不需要网页或用户互动就能完成的功能。它主要用于操作离线缓存。&lt;/p&gt;
&lt;p&gt;Service Worker有以下特点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属于JavaScript Worker，不能直接接触DOM，通过&lt;code&gt;postMessage&lt;/code&gt;接口与页面通信。&lt;/li&gt;
&lt;li&gt;不需要任何页面，就能执行。&lt;/li&gt;
&lt;li&gt;不用的时候会终止执行，需要的时候又重新执行，即它是事件驱动的。&lt;/li&gt;
&lt;li&gt;有一个精心定义的升级策略。&lt;/li&gt;
&lt;li&gt;只在HTTPs协议下可用，这是因为它能拦截网络请求，所以必须保证请求是安全的。&lt;/li&gt;
&lt;li&gt;可以拦截发出的网络请求，从而控制页面的网路通信。&lt;/li&gt;
&lt;li&gt;内部大量使用Promise。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Service worker的常见用途。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过拦截网络请求，使得网站运行得更快，或者在离线情况下，依然可以执行。&lt;/li&gt;
&lt;li&gt;作为其他后台功能的基础，比如消息推送和背景同步。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用Service Worker有以下步骤。&lt;/p&gt;
&lt;p&gt;首先，需要向浏览器登记Service Worker。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;serviceWorker&#39;&lt;/span&gt; in navigator) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.serviceWorker&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.register&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;/sw.js&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.then&lt;/span&gt;(function(registration) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 登记成功&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console&lt;span class=&quot;selector-class&quot;&gt;.log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;ServiceWorker登记成功，范围为&#39;&lt;/span&gt;, registration.scope);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;span class=&quot;selector-class&quot;&gt;.catch&lt;/span&gt;(function(err) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 登记失败&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      console&lt;span class=&quot;selector-class&quot;&gt;.log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;ServiceWorker登记失败：&#39;&lt;/span&gt;, err);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码向浏览器登记&lt;code&gt;sw.js&lt;/code&gt;脚本，实质就是浏览器加载&lt;code&gt;sw.js&lt;/code&gt;。这段代码可以多次调用，浏览器会自行判断&lt;code&gt;sw.js&lt;/code&gt;是否登记过，如果已经登记过，就不再重复执行了。注意，Service worker脚本必须与页面在同一个域，且必须在HTTPs协议下正常运行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sw.js&lt;/code&gt;位于域名的根目录下，这表明这个Service worker的范围（scope）是整个域，即会接收整个域下面的&lt;code&gt;fetch&lt;/code&gt;事件。如果脚本的路径是&lt;code&gt;/example/sw.js&lt;/code&gt;，那么Service worker只对&lt;code&gt;/example/&lt;/code&gt;开头的URL有效（比如&lt;code&gt;/example/page1/&lt;/code&gt;、&lt;code&gt;/example/page2/&lt;/code&gt;）。如果脚本不在根目录下，但是希望对整个域都有效，可以指定&lt;code&gt;scope&lt;/code&gt;属性。&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;navigator.serviceWorker.&lt;span class=&quot;keyword&quot;&gt;register&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;/path/to/serviceworker.js&#39;&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  scope: &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一旦登记完成，这段脚本就会用户的浏览器之中长期存在，不会随着用户离开你的网站而消失。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.register&lt;/code&gt;方法返回一个Promise对象。&lt;/p&gt;
&lt;p&gt;登记成功后，浏览器执行下面步骤。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载资源（Download）&lt;/li&gt;
&lt;li&gt;安装（Install）&lt;/li&gt;
&lt;li&gt;激活（Activate）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;安装和激活，主要通过事件来判断。&lt;/p&gt;
&lt;figure class=&quot;highlight oxygene&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;install&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;event&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  event.waitUntil(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fetchStuffAndInitDatabases()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;activate&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;event&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  // You&#39;re good to go!&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Service worker一旦激活，就开始控制页面。网页加载的时候，可以选择一个Service worker作为自己的控制器。不过，页面第一次加载的时候，它不受Service worker控制，因为这时还没有一个Service worker在运行。只有重新加载页面后，Service worker才会生效，控制加载它的页面。&lt;/p&gt;
&lt;p&gt;你可以查看&lt;code&gt;navigator.serviceWorker.controller&lt;/code&gt;，了解当前哪个ServiceWorker掌握控制权。如果后台没有任何Service worker，&lt;code&gt;navigator.serviceWorker.controller&lt;/code&gt;返回&lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Service worker激活以后，就能监听&lt;code&gt;fetch&lt;/code&gt;事件。&lt;/p&gt;
&lt;figure class=&quot;highlight oxygene&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;event&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  console.log(event.request);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;fetch&lt;/code&gt;事件会在两种情况下触发。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户访问Service worker范围内的网页。&lt;/li&gt;
&lt;li&gt;这些网页发出的任何网络请求（页面本身、CSS、JS、图像、XHR等等），即使这些请求是发向另一个域。但是，&lt;code&gt;iframe&lt;/code&gt;和``标签发出的请求不会被拦截。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;fetch&lt;/code&gt;事件的&lt;code&gt;event&lt;/code&gt;对象的&lt;code&gt;request&lt;/code&gt;属性，返回一个对象，包含了所拦截的网络请求的所有信息，比如URL、请求方法和HTTP头信息。&lt;/p&gt;
&lt;p&gt;Service worker的强大之处，在于它会拦截请求，并会返回一个全新的回应。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(event)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  event.respondWith(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Response(&lt;span class=&quot;string&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;respondWith&lt;/code&gt;方法的参数是一个Response对象实例，或者一个Promise对象（resolved以后返回一个Response实例）。上面代码手动创造一个Response实例。&lt;/p&gt;
&lt;p&gt;下面是完整的&lt;a href=&quot;https://github.com/jakearchibald/isserviceworkerready/tree/gh-pages/demos/manual-response&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;先看网页代码&lt;code&gt;index.html&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;white-space&lt;/span&gt;: pre-line;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;: monospace;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;14px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createTextNode(&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.join.call(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;, &quot;&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log.apply(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onerror = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      log(&lt;span class=&quot;string&quot;&gt;&quot;Error&quot;&lt;/span&gt;, err);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    navigator.serviceWorker.register(&lt;span class=&quot;string&quot;&gt;&#39;sw.js&#39;&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      scope: &lt;span class=&quot;string&quot;&gt;&#39;./&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;sw&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      log(&lt;span class=&quot;string&quot;&gt;&quot;Registered!&quot;&lt;/span&gt;, sw);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      log(&lt;span class=&quot;string&quot;&gt;&quot;You should get a different response when you refresh&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;).catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      log(&lt;span class=&quot;string&quot;&gt;&quot;Error&quot;&lt;/span&gt;, err);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后是Service worker脚本&lt;code&gt;sw.js&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The SW will be shutdown when not in use to save memory,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// be aware that any global state is likely to disappear&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;SW startup&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;self.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;install&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;SW installed&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;self.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;activate&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;SW activated&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;self.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Caught a fetch!&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  event.respondWith(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Response(&lt;span class=&quot;string&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每一次浏览器向服务器要求一个文件的时候，就会触发&lt;code&gt;fetch&lt;/code&gt;事件。Service worker可以在发出这个请求之前，前拦截它。&lt;/p&gt;
&lt;figure class=&quot;highlight oxygene&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;event&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  var request = event.request;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实际应用中，我们使用&lt;code&gt;fetch&lt;/code&gt;方法去抓取资源，该方法返回一个Promise对象。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;self.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;regexp&quot;&gt;/\.jpg$/&lt;/span&gt;.test(event.request.url)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    event.respondWith(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      fetch(&lt;span class=&quot;string&quot;&gt;&#39;//www.google.co.uk/logos/example.gif&#39;&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mode: &lt;span class=&quot;string&quot;&gt;&#39;no-cors&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，如果网页请求JPG文件，就会被Service worker拦截，转而返回一个Google的Logo图像。&lt;code&gt;fetch&lt;/code&gt;方法默认会加上CORS信息头，，上面设置了取消这个头。&lt;/p&gt;
&lt;p&gt;下面的代码是一个将所有JPG、PNG图片请求，改成WebP格式返回的例子。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Listen to fetch events&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;self.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Check if the image is a jpeg&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;regexp&quot;&gt;/\.jpg$|.png$/&lt;/span&gt;.test(event.request.url)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Inspect the accept header for WebP support&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; supportsWebp = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (event.request.headers.has(&lt;span class=&quot;string&quot;&gt;&#39;accept&#39;&lt;/span&gt;))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      supportsWebp = event.request.headers.get(&lt;span class=&quot;string&quot;&gt;&#39;accept&#39;&lt;/span&gt;).includes(&lt;span class=&quot;string&quot;&gt;&#39;webp&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// If we support WebP&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (supportsWebp) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Clone the request&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; req = event.request.clone();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Build the return URL&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; returnUrl = req.url.substr(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, req.url.lastIndexOf(&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;)) + &lt;span class=&quot;string&quot;&gt;&quot;.webp&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      event.respondWith(fetch(returnUrl, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mode: &lt;span class=&quot;string&quot;&gt;&#39;no-cors&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果请求失败，可以通过Promise的&lt;code&gt;catch&lt;/code&gt;方法处理。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(event)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  event.respondWith(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fetch(event.request).&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Response(&lt;span class=&quot;string&quot;&gt;&quot;Request failed!&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;登记成功后，可以在Chrome浏览器访问&lt;code&gt;chrome://inspect/#service-workers&lt;/code&gt;，查看整个浏览器目前正在运行的Service worker。访问&lt;code&gt;chrome://serviceworker-internals&lt;/code&gt;，可以查看浏览器目前安装的所有Service worker。&lt;/p&gt;
&lt;p&gt;一个已经登记过的Service worker脚本，如果发生改动，浏览器就会重新安装，这被称为“升级”。&lt;/p&gt;
&lt;p&gt;Service worker有一个Cache API，用来缓存外部资源。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;install&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(event)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// pre cache a load of stuff:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  event.waitUntil(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    caches.open(&lt;span class=&quot;string&quot;&gt;&#39;myapp-static-v1&#39;&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(cache)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cache.addAll([&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;/styles/all.css&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;/styles/imgs/bg.png&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;/scripts/all.js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      ]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(event)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  event.respondWith(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    caches.match(event.request).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(response)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; response || fetch(event.request);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，&lt;code&gt;caches.open&lt;/code&gt;方法用来建立缓存，然后使用&lt;code&gt;addAll&lt;/code&gt;方法添加资源。&lt;code&gt;caches.match&lt;/code&gt;方法则用来建立缓存以后，匹配当前请求是否在缓存之中，如果命中就取出缓存，否则就正常发出这个请求。一旦一个资源进入缓存，它原来指定是否过期的HTTP信息头，就会被忽略。缓存之中的资源，只在你移除它们的时候，才会被移除。&lt;/p&gt;
&lt;p&gt;单个资源可以使用&lt;code&gt;cache.put(request, response)&lt;/code&gt;方法添加。&lt;/p&gt;
&lt;p&gt;下面是一个在安装阶段缓存资源的例子。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; staticCacheName = &lt;span class=&quot;string&quot;&gt;&#39;static&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; version = &lt;span class=&quot;string&quot;&gt;&#39;v1::&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;install&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(event)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  event.waitUntil(updateStaticCache());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateStaticCache&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; caches.open(version + staticCacheName)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(cache)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cache.addAll([&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;/path/to/javascript.js&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;/path/to/stylesheet.css&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;/path/to/someimage.png&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;/path/to/someotherimage.png&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;/offline&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      ]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码将JavaScript脚本、CSS样式表、图像文件、网站首页、离线页面，存入浏览器缓存。这些资源都要等全部进入缓存之后，才会安装。&lt;/p&gt;
&lt;p&gt;安装以后，就需要激活。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;self.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;activate&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  event.waitUntil(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    caches.keys()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;keys&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.all(keys&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          .filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;key&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; key.indexOf(version) !== &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          .map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;key&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; caches.delete(key);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Worker的其他尝试&quot;&gt;&lt;a href=&quot;#Worker的其他尝试&quot; class=&quot;headerlink&quot; title=&quot;Worker的其他尝试&quot;&gt;&lt;/a&gt;Worker的其他尝试&lt;/h3&gt;&lt;p&gt;我们已经知道Worker通过接收一个URL来创建一个worker，那么我们是否可以利用web worker来做一些类似jsonp的请求呢，大家知道jsonp是通过插入script标签来加载json数据的，而script元素在加载和执行过程中都是阻塞式的，如果能利用web worker实现异步加载将会非常不错。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// /aj/webWorker/core.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;$E&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;id&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(id);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;onload =&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//通过web worker加载&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $E(&lt;span class=&quot;string&quot;&gt;&#39;workerLoad&#39;&lt;/span&gt;).onclick =&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url =&lt;span class=&quot;string&quot;&gt;&#39;http://js.wcdn.cn/aj/mblog/face2&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; d = (&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()).valueOf();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; worker =&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Worker(url);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        worker.onmessage =&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;web worker: &#39;&lt;/span&gt;+ ((&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()).valueOf() - d));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//通过jsonp加载&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $E(&lt;span class=&quot;string&quot;&gt;&#39;jsonpLoad&#39;&lt;/span&gt;).onclick =&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url =&lt;span class=&quot;string&quot;&gt;&#39;http://js.wcdn.cn/aj/mblog/face1&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; d = (&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()).valueOf();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        STK.core.io.scriptLoader(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            method:&lt;span class=&quot;string&quot;&gt;&#39;post&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            url : url,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            onComplete : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;jsonp: &#39;&lt;/span&gt;+ ((&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()).valueOf() - d));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//通过ajax加载&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $E(&lt;span class=&quot;string&quot;&gt;&#39;ajaxLoad&#39;&lt;/span&gt;).onclick =&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url =&lt;span class=&quot;string&quot;&gt;&#39;http://js.wcdn.cn/aj/mblog/face&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; d = (&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()).valueOf();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        STK.core.io.ajax(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            url : url,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            onComplete : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;json&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;ajax: &#39;&lt;/span&gt;+ ((&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()).valueOf() - d));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;HTML页面：/aj/webWorker/worker.html&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/html; charset=utf-8&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Worker example: load data&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://js.t.sinajs.cn/STK/js/gaea.1.14.js&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://js.wcdn.cn/aj/webWorker/core.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;workerLoad&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;web worker加载&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;jsonpLoad&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;jsonp加载&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ajaxLoad&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ajax加载&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;得到控制台输出：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;web worker: &lt;span class=&quot;number&quot;&gt;174&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;jsonp: &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ajax: &lt;span class=&quot;number&quot;&gt;38&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个例子将通过 web worker、jsonp、ajax三种不同的方式来加载一个169.42KB大小的JSON数据高位，所以用web worker来加载数据还是比较慢的，即便是大数据量情况下也没任何优势，可能是Worker初始化新起线程比较耗时间。除了在加载过程中是无阻塞的之外没有任何优势。&lt;/p&gt;
&lt;p&gt;web worker是不支持跨域加载JS的，这对于将静态文件部署到单独的静态服务器的网站来说是个坏消息。所以web worker只能用来加载同域下的json数据，而这方面ajax已经可以做到了，而且效率更高更通用。还是让Worker做它自己擅长的事吧。&lt;/p&gt;
&lt;h2 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Matt West, &lt;a href=&quot;http://blog.teamtreehouse.com/using-web-workers-to-speed-up-your-javascript-applications&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Web Workers to Speed-Up Your JavaScript Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Eric Bidelman, &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/workers/basics/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Basics of Web Workers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Eric Bidelman, &lt;a href=&quot;http://updates.html5rocks.com/2011/12/Transferable-Objects-Lightning-Fast&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Transferable Objects: Lightning Fast!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jesse Cravens, &lt;a href=&quot;http://tech.pro/tutorial/1487/web-worker-patterns&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Worker Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bipin Joshi, &lt;a href=&quot;http://www.developer.com/lang/jscript/7-things-you-need-to-know-about-web-workers.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;7 Things You Need To Know About Web Workers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jeremy Keith, &lt;a href=&quot;https://adactio.com/journal/9775&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;My first Service Worker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Alex Russell, &lt;a href=&quot;https://github.com/slightlyoff/ServiceWorker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ServiceWorker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JavaScript语言采用的是单线程模型，也就是说，所有任务排成一个队列，一次只能做一件事。随着电脑计算能力的增强，尤其是多核CPU的出现，这一点带来很大的不便，无法充分发挥JavaScript的潜力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Web Worker的目的，就是为JavaScript创造多线程环境，允许主线程将一些任务分配给子线程。在主线程运行的同时，子线程在后台运行，两者互不干扰。等到子线程完成计算任务，再把结果返回给主线程。因此，每一个子线程就好像一个“工人”（worker），默默地完成自己的工作。这样做的好处是，一些高计算量或高延迟的工作，被worker线程负担了，所以主进程（通常是UI进程）就会很流畅，不会被阻塞或拖慢。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://hangweiping.github.io/categories/HTML5/"/>
    
    
      <category term="HTML5" scheme="http://hangweiping.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>HTML5(2)--web storage</title>
    <link href="http://hangweiping.github.io/2016/05/06/web_storage/"/>
    <id>http://hangweiping.github.io/2016/05/06/web_storage/</id>
    <published>2016-05-06T09:41:19.000Z</published>
    <updated>2016-08-10T10:18:18.000Z</updated>
    
    <content type="html">&lt;p&gt;WebStorage是HTML5中本地存储的解决方案之一，在HTML5的WebStorage概念引入之前除去IE User Data、Flash Cookie、Google Gears等看名字就不靠谱的解决方案，浏览器兼容的本地存储方案只有使用cookie。有同学可能会问，既然有了cookie本地存储，为什么还要引入WebStorage的概念？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Cookie肿么了&quot;&gt;&lt;a href=&quot;#Cookie肿么了&quot; class=&quot;headerlink&quot; title=&quot;Cookie肿么了&quot;&gt;&lt;/a&gt;Cookie肿么了&lt;/h3&gt;&lt;p&gt;cookie的缺陷是非常明显的&lt;/p&gt;
&lt;p&gt;\1. 数据大小：作为存储容器，cookie的大小限制在4KB左右这是非常坑爹的，尤其对于现在复杂的业务逻辑需求，4KB的容量除了存储一些配置字段还简单单值信息，对于绝大部分开发者来说真的不知指望什么了。&lt;/p&gt;
&lt;p&gt;\2. 安全性问题：由于在HTTP请求中的cookie是明文传递的（HTTPS不是），带来的安全性问题还是很大的。&lt;/p&gt;
&lt;p&gt;\3. 网络负担：我们知道cookie会被附加在每个HTTP请求中，在HttpRequest 和HttpResponse的header中都是要被传输的，所以无形中增加了一些不必要的流量损失。&lt;/p&gt;
&lt;h3 id=&quot;WebStorage&quot;&gt;&lt;a href=&quot;#WebStorage&quot; class=&quot;headerlink&quot; title=&quot;WebStorage&quot;&gt;&lt;/a&gt;WebStorage&lt;/h3&gt;&lt;p&gt;WebStorage是HTML新增的本地存储解决方案之一，但并不是为了取代cookie而制定的标准，cookie作为HTTP协议的一部分用来处理客户端和服务器通信是不可或缺的，session正是依赖于实现的客户端状态保持。WebStorage的意图在于解决本来不应该cookie做，却不得不用cookie的本地存储。&lt;/p&gt;
&lt;p&gt;WebStorage提供两种类型的API：localStorage和sessionStorage，两者的区别看名字就有大概了解，localStorage在本地永久性存储数据，除非显式将其删除或清空，sessionStorage存储的数据只在会话期间有效，关闭浏览器则自动删除。两个对象都有共同的API&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Storage&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt; attribute unsigned &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  DOMString? key(unsigned &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; index);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;getter DOMString &lt;span class=&quot;title&quot;&gt;getItem&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;DOMString key&lt;/span&gt;)&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;setter creator &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setItem&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;DOMString key, DOMString &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;deleter &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeItem&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;DOMString key&lt;/span&gt;)&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;clear&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;length:唯一的属性，只读，用来获取storage内的键值对数量。&lt;/li&gt;
&lt;li&gt;key：根据index获取storage的键名&lt;/li&gt;
&lt;li&gt;getItem：根据key获取storage内的对应value&lt;/li&gt;
&lt;li&gt;setItem：为storage内添加键值对&lt;/li&gt;
&lt;li&gt;removeItem：根据键名，删除键值对&lt;/li&gt;
&lt;li&gt;clear：清空storage对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;在实现了WebStorage的浏览器中，页面有两个全局的对象localStorage和sessionStorage&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img0.tuicool.com/vaeArq.png!web&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;以localStorage为例，看一段简单的操作代码&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ls=localStorage;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(ls.length);&lt;span class=&quot;comment&quot;&gt;//0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ls.setItem(&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Byron&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ls.setItem(&lt;span class=&quot;string&quot;&gt;&#39;age&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;24&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(ls.length);&lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//遍历localStorage&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;ls.length;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    age : 24 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    name : Byron &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; key=ls.key(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(key+&lt;span class=&quot;string&quot;&gt;&#39; : &#39;&lt;/span&gt;+ls.getItem(key));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ls.removeItem(&lt;span class=&quot;string&quot;&gt;&#39;age&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;ls.length;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    name : Byron &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; key=ls.key(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(key+&lt;span class=&quot;string&quot;&gt;&#39; : &#39;&lt;/span&gt;+ls.getItem(key));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ls.clear();&lt;span class=&quot;comment&quot;&gt;//0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(ls.length);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;事件&quot;&gt;&lt;a href=&quot;#事件&quot; class=&quot;headerlink&quot; title=&quot;事件&quot;&gt;&lt;/a&gt;事件&lt;/h3&gt;&lt;p&gt;同时HTML5规定了一个storage事件，在WebStorage发生变化的时候触发，可以用此监视不同页面对storage的修改&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;interface StorageEvent : Event &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  readonly attribute DOMString key;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  readonly attribute DOMString? oldValue;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  readonly attribute DOMString? newValue;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  readonly attribute DOMString url;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  readonly attribute Storage? storageArea;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;key:键值对的键&lt;/li&gt;
&lt;li&gt;oldValue：修改之前的value&lt;/li&gt;
&lt;li&gt;newValue：修改之后的value&lt;/li&gt;
&lt;li&gt;url：触发改动的页面url&lt;/li&gt;
&lt;li&gt;StorageArea：发生改变的Storage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;在index.php中定义&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;test.php&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;target&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;_blank&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;storage&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(e.key+&lt;span class=&quot;string&quot;&gt;&#39; is changed form &#39;&lt;/span&gt;+e.oldValue+&lt;span class=&quot;string&quot;&gt;&#39; to &#39;&lt;/span&gt;+e.newValue+&lt;span class=&quot;string&quot;&gt;&#39; by      &#39;&lt;/span&gt;+e.url );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(e.storageArea ==localStorage);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;localStorage.setItem(&lt;span class=&quot;string&quot;&gt;&#39;userName&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Byron&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;test.php&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;localStorage.setItem(&lt;span class=&quot;string&quot;&gt;&#39;userName&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Casper&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在index.php页面点击链接访问test.php时可以看到index.php的控制台输出log&lt;/p&gt;
&lt;h3 id=&quot;为什么比cookie好&quot;&gt;&lt;a href=&quot;#为什么比cookie好&quot; class=&quot;headerlink&quot; title=&quot;为什么比cookie好&quot;&gt;&lt;/a&gt;为什么比cookie好&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;从容量上讲WebStorage一般浏览器提供5M的存储空间，用来存储视频、图片神马的不够，但对于绝大部分操作足矣.&lt;/li&gt;
&lt;li&gt;安全性上WebStorage并不作为HTTP header发送的浏览器，所以相对安全&lt;/li&gt;
&lt;li&gt;从流量上讲，因为WebStorage不传送到服务器，所以不必要的流量可以节省，这样对于高频次访问或者针对手机移动设备的网页还是很不错的。&lt;/li&gt;
&lt;li&gt;这并不意味着WebStorage可以取代cookie，而是有了WebStorage后cookie能只做它应该做的事情了——作为客户端与服务器交互的通道，保持客户端状态。所以仅仅作为本地存储解决方案WebStorage是优于cookie的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;注意点&quot;&gt;&lt;a href=&quot;#注意点&quot; class=&quot;headerlink&quot; title=&quot;注意点&quot;&gt;&lt;/a&gt;注意点&lt;/h3&gt;&lt;p&gt;1.浏览器兼容性，这个几乎是所有HTML5新特性中最容易实施的了，因为IE8+的浏览器都支持，在IE7、IE6中可以使用IE User Data实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img2.tuicool.com/myaA73.jpg!web&quot; alt=&quot;2011052411384081&quot;&gt; &lt;/p&gt;
&lt;p&gt;2.由于localStorage和sessionStorage都是对象，所以我饿每年也可以通过”.key”或”[key]”的方式获取、修改键值对，但不推荐这么做&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;localStorage.userName=&lt;span class=&quot;string&quot;&gt;&#39;Frank&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(localStorage[&lt;span class=&quot;string&quot;&gt;&#39;userName&#39;&lt;/span&gt;]);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.虽然localStorage存储在本地，但不同的浏览器存储存储数据是独立的，所以在Chrome上存储的localStorage在FireFox上是获取不到的。&lt;/p&gt;
&lt;p&gt;4.localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理，低版本IE可以使用 &lt;a href=&quot;https://github.com/douglascrockford/JSON-js/blob/master/json2.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;json2.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5.现在很多浏览器都提供了“匿名访问”，“安全模式”，“隐身窗口”等等功能。在这种情况下，浏览器都是会重新建立一个新的localStorage，所以这些模式下的页面是没法访问在正常模式下的页面中的数据。&lt;/p&gt;
&lt;p&gt;6.除了控制台，Chrome还为本地存储提供了非常直观的显示方式，调试的时候很方便&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img0.tuicool.com/RVzQFb.png!web&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;引入实例&quot;&gt;&lt;a href=&quot;#引入实例&quot; class=&quot;headerlink&quot; title=&quot;引入实例&quot;&gt;&lt;/a&gt;引入实例&lt;/h3&gt;&lt;p&gt;今天给大家分享一个留言实时保存的例子。&lt;/p&gt;
&lt;p&gt;js代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;upInfo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; lStorage = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.localStorage;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; show = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.document.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;show&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.localStorage.myBoard) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;         show.value = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.localStorage.myBoard;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;     &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;         &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; info = &lt;span class=&quot;string&quot;&gt;&quot;还没有留言&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;         show.value = &lt;span class=&quot;string&quot;&gt;&quot;还没有留言&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addInfo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; info = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.document.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;t1&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; lStorage = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.localStorage;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (lStorage.myBoard) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;         &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; date = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;         lStorage.myBoard += t1.value + &lt;span class=&quot;string&quot;&gt;&quot;\n发表时间：&quot;&lt;/span&gt; + date.toLocaleString() + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;     &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;         &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; date = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;         lStorage.myBoard = t1.value + &lt;span class=&quot;string&quot;&gt;&quot;\n发表时间：&quot;&lt;/span&gt; + date.toLocaleString() + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;     upInfo();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cleanInfo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;     &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.localStorage.removeItem(&lt;span class=&quot;string&quot;&gt;&quot;myBoard&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;     upInfo();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;26&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;27&lt;/span&gt; upInfo();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;html如下：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; 1 &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 2   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 3    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;简单的web存储留言板&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 4    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;textarea&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;t1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;textarea&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 5    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 6    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;addInfo()&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;留言&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 7    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;cleanInfo()&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;清除留言&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 8    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 9    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;hr&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;shows&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;textarea&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;show&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;readonly&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;readonly&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;textarea&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行效果，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img0.tuicool.com/QbQNVv2.png!web&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;WebStorage是HTML5中本地存储的解决方案之一，在HTML5的WebStorage概念引入之前除去IE User Data、Flash Cookie、Google Gears等看名字就不靠谱的解决方案，浏览器兼容的本地存储方案只有使用cookie。有同学可能会问，既然有了cookie本地存储，为什么还要引入WebStorage的概念？&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://hangweiping.github.io/categories/HTML5/"/>
    
    
      <category term="HTML5" scheme="http://hangweiping.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>HTML5(3)--web socket</title>
    <link href="http://hangweiping.github.io/2016/05/05/web_socket/"/>
    <id>http://hangweiping.github.io/2016/05/05/web_socket/</id>
    <published>2016-05-05T12:21:18.000Z</published>
    <updated>2016-08-10T10:18:23.000Z</updated>
    
    <content type="html">&lt;p&gt;HTTP协议是一种无状态协议，服务器端本身不具有识别客户端的能力，必须借助外部机制，比如session和cookie，才能与特定客户端保持对话。这多多少少带来一些不便，尤其在服务器端与客户端需要持续交换数据的场合（比如网络聊天），更是如此。为了解决这个问题，HTML5提出了浏览器的&lt;a href=&quot;http://dev.w3.org/html5/websockets/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebSocket API&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WebSocket的主要作用是，允许服务器端与客户端进行全双工（full-duplex）的通信。举例来说，HTTP协议有点像发电子邮件，发出后必须等待对方回信；WebSocket则是像打电话，服务器端和客户端可以同时向对方发送数据，它们之间存着一条持续打开的数据通道。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;WebSocket协议完全可以取代Ajax方法，用来向服务器端发送文本和二进制数据，而且还没有“同域限制”。&lt;/p&gt;
&lt;p&gt;WebSocket不使用HTTP协议，而是使用自己的协议。浏览器发出的WebSocket请求类似于下面的样子：&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/&lt;/span&gt; HTTP/1.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Connection&lt;/span&gt;: Upgrade&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Upgrade&lt;/span&gt;: websocket&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Host&lt;/span&gt;: example.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Origin&lt;/span&gt;: null&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Sec-WebSocket-Key&lt;/span&gt;: sN9cRrP/n9NdMgdcy2VJFQ==&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Sec-WebSocket-Version&lt;/span&gt;: 13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的头信息显示，有一个HTTP头是Upgrade。HTTP1.1协议规定，Upgrade头信息表示将通信协议从HTTP/1.1转向该项所指定的协议。“Connection: Upgrade”就表示浏览器通知服务器，如果可以，就升级到webSocket协议。Origin用于验证浏览器域名是否在服务器许可的范围内。Sec-WebSocket-Key则是用于握手协议的密钥，是base64编码的16字节随机字符串。&lt;/p&gt;
&lt;p&gt;服务器端的WebSocket回应则是&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;HTTP/&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;101&lt;/span&gt; Switching Protocols&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;Connection:&lt;/span&gt; Upgrade&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;Upgrade:&lt;/span&gt; websocket&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Sec-WebSocket-&lt;span class=&quot;string&quot;&gt;Accept:&lt;/span&gt; fFBooB7FAkLlXgRSz0BT3v4hq5s=&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Sec-WebSocket-&lt;span class=&quot;string&quot;&gt;Origin:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Sec-WebSocket-&lt;span class=&quot;string&quot;&gt;Location:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;ws:&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//example.com/&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;服务器端同样用“Connection: Upgrade”通知浏览器，需要改变协议。Sec-WebSocket-Accept是服务器在浏览器提供的Sec-WebSocket-Key字符串后面，添加“258EAFA5-E914-47DA-95CA-C5AB0DC85B11” 字符串，然后再取sha-1的hash值。浏览器将对这个值进行验证，以证明确实是目标服务器回应了webSocket请求。Sec-WebSocket-Location表示进行通信的WebSocket网址。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;请注意，WebSocket协议用ws表示。此外，还有wss协议，表示加密的WebSocket协议，对应HTTPs协议。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;完成握手以后，WebSocket协议就在TCP协议之上，开始传送数据。&lt;/p&gt;
&lt;p&gt;WebSocket协议需要服务器支持，目前比较流行的实现是基于node.js的&lt;a href=&quot;http://socket.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;socket.io&lt;/a&gt;，更多的实现可参阅&lt;a href=&quot;http://en.wikipedia.org/wiki/WebSocket#Server_side&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipedia&lt;/a&gt;。至于浏览器端，目前主流浏览器都支持WebSocket协议（包括IE 10+），仅有的例外是手机端的Opera Mini和Android Browser。&lt;/p&gt;
&lt;h2 id=&quot;客户端&quot;&gt;&lt;a href=&quot;#客户端&quot; class=&quot;headerlink&quot; title=&quot;客户端&quot;&gt;&lt;/a&gt;客户端&lt;/h2&gt;&lt;p&gt;浏览器端对WebSocket协议的处理，无非就是三件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立连接和断开连接&lt;/li&gt;
&lt;li&gt;发送数据和接收数据&lt;/li&gt;
&lt;li&gt;处理错误&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;建立连接和断开连接&quot;&gt;&lt;a href=&quot;#建立连接和断开连接&quot; class=&quot;headerlink&quot; title=&quot;建立连接和断开连接&quot;&gt;&lt;/a&gt;建立连接和断开连接&lt;/h3&gt;&lt;p&gt;首先，客户端要检查浏览器是否支持WebSocket，使用的方法是查看window对象是否具有WebSocket属性。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.WebSocket != &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// WebSocket代码&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，开始与服务器建立连接（这里假定服务器就是本机的1740端口，需要使用ws协议）。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.WebSocket != &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; connection = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WebSocket(&lt;span class=&quot;string&quot;&gt;&#39;ws://localhost:1740&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;建立连接以后的WebSocket实例对象（即上面代码中的connection），有一个readyState属性，表示目前的状态，可以取4个值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0： 正在连接&lt;/li&gt;
&lt;li&gt;1： 连接成功&lt;/li&gt;
&lt;li&gt;2： 正在关闭&lt;/li&gt;
&lt;li&gt;3： 连接关闭&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;握手协议成功以后，readyState就从0变为1，并触发open事件，这时就可以向服务器发送信息了。我们可以指定open事件的回调函数。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;connection.onopen = wsOpen;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wsOpen&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Connected to: &#39;&lt;/span&gt; + event.currentTarget.URL);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关闭WebSocket连接，会触发close事件。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;connection.onclose = wsClose;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wsClose&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Closed&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;connection.close();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;发送数据和接收数据&quot;&gt;&lt;a href=&quot;#发送数据和接收数据&quot; class=&quot;headerlink&quot; title=&quot;发送数据和接收数据&quot;&gt;&lt;/a&gt;发送数据和接收数据&lt;/h3&gt;&lt;p&gt;连接建立后，客户端通过send方法向服务器端发送数据。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;connection&lt;span class=&quot;selector-class&quot;&gt;.send&lt;/span&gt;(message);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了发送字符串，也可以使用 Blob 或 ArrayBuffer 对象发送二进制数据。&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用ArrayBuffer发送canvas图像数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; img = canvas_context.getImageData(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;320&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; binary = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Uint8Array&lt;/span&gt;(img.data.length);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; img.data.length; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    binary[i] = img.data[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;connection.send(binary.buffer);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用Blob发送文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; file = document.querySelector(&lt;span class=&quot;symbol&quot;&gt;&#39;input&lt;/span&gt;[&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt;]&#39;).files[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;connection.send(file);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;客户端收到服务器发送的数据，会触发message事件。可以通过定义message事件的回调函数，来处理服务端返回的数据。&lt;/p&gt;
&lt;figure class=&quot;highlight fortran&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;connection.onmessage = wsMessage;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;/span&gt; wsMessage (event) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(event.&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码的回调函数wsMessage的参数为事件对象event，该对象的data属性包含了服务器返回的数据。&lt;/p&gt;
&lt;p&gt;如果接收的是二进制数据，需要将连接对象的格式设为blob或arraybuffer。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;connection.binaryType = &lt;span class=&quot;string&quot;&gt;&#39;arraybuffer&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;connection.onmessage = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(e.data.byteLength); &lt;span class=&quot;comment&quot;&gt;// ArrayBuffer对象有byteLength属性&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;处理错误&quot;&gt;&lt;a href=&quot;#处理错误&quot; class=&quot;headerlink&quot; title=&quot;处理错误&quot;&gt;&lt;/a&gt;处理错误&lt;/h3&gt;&lt;p&gt;如果出现错误，浏览器会触发WebSocket实例对象的error事件。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;connection.onerror = wsError;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wsError&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Error: &quot;&lt;/span&gt; + event.data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;服务器端&quot;&gt;&lt;a href=&quot;#服务器端&quot; class=&quot;headerlink&quot; title=&quot;服务器端&quot;&gt;&lt;/a&gt;服务器端&lt;/h2&gt;&lt;p&gt;服务器端需要单独部署处理WebSocket的代码。下面用node.js搭建一个服务器环境。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; server = http.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;request, response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假设监听1740端口。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;server.listen(&lt;span class=&quot;number&quot;&gt;1740&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log((&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()) + &lt;span class=&quot;string&quot;&gt;&#39; Server is listening on port 1740&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着启动WebSocket服务器。这需要加载websocket库，如果没有安装，可以先使用npm命令安装。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; WebSocketServer = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;websocket&#39;&lt;/span&gt;).server;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wsServer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WebSocketServer(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    httpServer: server&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;WebSocket服务器建立request事件的回调函数。&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; connection;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;wsServer.on(&lt;span class=&quot;string&quot;&gt;&#39;request&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(req)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    connection = req.accept(&lt;span class=&quot;string&quot;&gt;&#39;echo-protocol&#39;&lt;/span&gt;, req.origin);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码的回调函数接受一个参数req，表示request请求对象。然后，在回调函数内部，建立WebSocket连接connection。接着，就要对connection的message事件指定回调函数。&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wsServer.on(&lt;span class=&quot;string&quot;&gt;&#39;request&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(r)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    connection = req.accept(&lt;span class=&quot;string&quot;&gt;&#39;echo-protocol&#39;&lt;/span&gt;, req.origin);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    connection.on(&lt;span class=&quot;string&quot;&gt;&#39;message&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(message)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; msgString = message.utf8Data;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        connection.sendUTF(msgString);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，监听用户的disconnect事件。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;connection.on(&lt;span class=&quot;string&quot;&gt;&#39;close&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;reasonCode, description&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(connection.remoteAddress + &lt;span class=&quot;string&quot;&gt;&#39; disconnected.&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用&lt;a href=&quot;https://github.com/einaros/ws&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ws&lt;/a&gt;模块，部署一个简单的WebSocket服务器非常容易。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; WebSocketServer = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;ws&#39;&lt;/span&gt;).Server;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wss = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WebSocketServer(&amp;#123; port: &lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt; &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;wss.on(&lt;span class=&quot;string&quot;&gt;&#39;connection&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;connection&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ws&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ws.on(&lt;span class=&quot;string&quot;&gt;&#39;message&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;incoming&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;message&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;received: %s&#39;&lt;/span&gt;, message);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ws.send(&lt;span class=&quot;string&quot;&gt;&#39;something&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Socket-io简介&quot;&gt;&lt;a href=&quot;#Socket-io简介&quot; class=&quot;headerlink&quot; title=&quot;Socket.io简介&quot;&gt;&lt;/a&gt;Socket.io简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://socket.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Socket.io&lt;/a&gt;是目前最流行的WebSocket实现，包括服务器和客户端两个部分。它不仅简化了接口，使得操作更容易，而且对于那些不支持WebSocket的浏览器，会自动降为Ajax连接，最大限度地保证了兼容性。它的目标是统一通信机制，使得所有浏览器和移动设备都可以进行实时通信。&lt;/p&gt;
&lt;p&gt;第一步，在服务器端的项目根目录下，安装socket.io模块。&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; socket.io&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二步，在根目录下建立app.js，并写入以下代码（假定使用了Express框架）。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;express&#39;&lt;/span&gt;)();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; server = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;).createServer(app);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; io = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;socket.io&#39;&lt;/span&gt;).listen(server);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;server.listen(&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;app.get(&lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  res.sendfile(__dirname + &lt;span class=&quot;string&quot;&gt;&#39;/index.html&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码表示，先建立并运行HTTP服务器。Socket.io的运行建立在HTTP服务器之上。&lt;/p&gt;
&lt;p&gt;第三步，将Socket.io插入客户端网页。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/socket.io/socket.io.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，在客户端脚本中，建立WebSocket连接。&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; socket = io.connect(&lt;span class=&quot;symbol&quot;&gt;&#39;http&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//localhost&#39;);&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于本例假定WebSocket主机与客户端是同一台机器，所以connect方法的参数是&lt;code&gt;http://localhost&lt;/code&gt;。接着，指定news事件（即服务器端发送news）的回调函数。&lt;/p&gt;
&lt;figure class=&quot;highlight delphi&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;socket.&lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;news&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(data)&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   console.log(data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，用emit方法向服务器端发送信号，触发服务器端的anotherNews事件。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;socket&lt;span class=&quot;selector-class&quot;&gt;.emit&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;anotherNews&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;请注意，emit方法可以取代Ajax请求，而on方法指定的回调函数，也等同于Ajax的回调函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第四步，在服务器端的app.js，加入以下代码。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;io.sockets.on(&lt;span class=&quot;string&quot;&gt;&#39;connection&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;socket&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  socket.emit(&lt;span class=&quot;string&quot;&gt;&#39;news&#39;&lt;/span&gt;, &amp;#123; hello: &lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt; &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  socket.on(&lt;span class=&quot;string&quot;&gt;&#39;anotherNews&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码的io.sockets.on方法指定connection事件（WebSocket连接建立）的回调函数。在回调函数中，用emit方法向客户端发送数据，触发客户端的news事件。然后，再用on方法指定服务器端anotherNews事件的回调函数。&lt;/p&gt;
&lt;p&gt;不管是服务器还是客户端，socket.io提供两个核心方法：emit方法用于发送消息，on方法用于监听对方发送的消息。&lt;/p&gt;
&lt;h3 id=&quot;WebSockets支持及时数据交换，并被所有现代浏览器支持。&quot;&gt;&lt;a href=&quot;#WebSockets支持及时数据交换，并被所有现代浏览器支持。&quot; class=&quot;headerlink&quot; title=&quot;WebSockets支持及时数据交换，并被所有现代浏览器支持。&quot;&gt;&lt;/a&gt;WebSockets支持及时数据交换，并被所有现代浏览器支持。&lt;/h3&gt;&lt;p&gt;没有其他技术能够像WebSocket一样提供真正的双向通信，许多web开发者仍然是依赖于ajax的长轮询来实现。（注：我认为长轮询是富于创造性和多功能性的，虽然这只是一个不太完美的解决办法（hack））对Websocket缺少热情，也许是因为多年前他的安全性的脆弱，抑或者是缺少浏览器的支持，不管怎样，这两个问题都已经被解决了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;决定手头的工作是否需要使用WebSocket技术的方法很简单：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你的应用提供多个用户相互交流吗？&lt;/li&gt;
&lt;li&gt;你的应用是展示服务器端经常变动的数据吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你的回答是肯定的，那么请考虑使用WebSocket。如果你仍然不确定，并想要更多的灵感，这有一些杀手锏的案例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.社交订阅&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对社交类的应用的一个裨益之处就是能够即时的知道你的朋友正在做什么。虽然听起来有点可怕，但是我们都喜欢这样做。你不会想要在数分钟之后才能知道一个家庭成员在馅饼制作大赛获胜或者一个朋友订婚的消息。你是在线的，所以你的订阅的更新应该是实时的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.多玩家游戏&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网络正在迅速转变为游戏平台。在不使用插件（我指的是Flash）的情况下，网络开发者现在可以在浏览器中实现和体验高性能的游戏。无论你是在处理DOM元素、CSS动画，HTML5的canvas或者尝试使用WebGL，玩家之间的互动效率是至关重要的。我不想在我扣动扳机之后，我的对手却已经移动位置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.协同编辑/编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们生活在分布式开发团队的时代。平时使用一个文档的副本就满足工作需求了，但是你最终需要有一个方式来合并所有的编辑副本。版本控制系统，比如Git能够帮助处理某些文件，但是当Git发现一个它不能解决的冲突时,你仍然需要去跟踪人们的修改历史。通过一个协同解决方案，比如WebSocket，我们能够工作在同一个文档，从而省去所有的合并版本。这样会很容易看出谁在编辑什么或者你在和谁同时在修改文档的同一部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.点击流数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分析用户与你网站的互动是提升你的网站的关键。HTTP的开销让我们只能优先考虑和收集最重要的数据部分。然后，经过六个月的线下分析，我们意识到我们应该收集一个不同的判断标准——一个看起来不是那么重要但是现在却影响了一个关键的决定。与HTTP请求的开销方式相比，使用Websocket，你可以由客户端发送不受限制的数据。想要在除页面加载之外跟踪鼠标的移动？只需要通过WebSocket连接发送这些数据到服务器，并存储在你喜欢的NoSQL数据库中就可以了（MongoDB是适合记录这样的事件的）。现在你可以通过回放用户在页面的动作来清楚的知道发生了什么。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.股票基金报价&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;金融界瞬息万变——几乎是每毫秒都在变化。我们人类的大脑不能持续以那样的速度处理那么多的数据，所以我们写了一些算法来帮我们处理这些事情。虽然你不一定是在处理高频的交易，但是，过时的信息也只能导致损失。当你有一个显示盘来跟踪你感兴趣的公司时，你肯定想要随时知道他们的价值，而不是10秒前的数据。使用WebSocket可以流式更新这些数据变化而不需要等待。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.体育实况更新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在我们开始讨论一个让人们激情澎湃的愚蠢的东西——体育。我不是运动爱好者，但是我知道运动迷们想要什么。当爱国者在打比赛的时候，我的妹夫将会沉浸于这场比赛中而不能自拔。那是一种疯狂痴迷的状态，完全发自内心的。我虽然不理解这个，但是我敬佩他们与运动之间的这种强烈的联系，所以，最后我能做的就是给他的体验中降低延迟。如果你在你的网站应用中包含了体育新闻，WebSocket能够助力你的用户获得实时的更新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7.多媒体聊天&lt;/strong&gt;视频会议并不能代替和真人相见，但当你不能在同一个屋子里见到你谈话的对象时，视频会议是个不错的选择。尽管视频会议私有化做的“不错”，但其使用还是很繁琐。我可是开放式网络的粉丝，所以用WebSockets getUserMedia API和HTML5音视频元素明显是个不错的选择。WebRTC的出现顺理成章的成为我刚才概括的组合体，它看起来很有希望，但其缺乏目前浏览器的支持，所以就取消了它成为候选人的资格。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.基于位置的应用&lt;/strong&gt;越来越多的开发者借用移动设备的GPS功能来实现他们&lt;a href=&quot;http://www.infoworld.com/d/application-development/use-mongodb-make-your-app-location-aware-229403&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于位置的网络应用&lt;/a&gt;。如果你一直记录用户的位置(比如运行应用来记录运动轨迹)，你可以收集到更加细致化的数据。如果你想实时的更新网络数据仪表盘(可以说是一个监视运动员的教练)，HTTP协议显得有些笨拙。借用WebSocket TCP链接可以让数据飞起来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9.在线教育&lt;/strong&gt;上学花费越来越贵了，但互联网变得更快和更便宜。&lt;a href=&quot;http://www.infoworld.com/d/application-development/200k-computer-science-degree-or-these-free-online-classes-218565&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在线教育&lt;/a&gt;是学习的不错方式，尤其是你可以和老师以及其他同学一起交流。很自然，WebSockets是个不错的选择，可以多媒体聊天、文字聊天以及其它优势如与别人合作一起在公共数字黑板上画画…&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/java/j-lo-WebSocket/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebSocket 实战&lt;/a&gt;简要介绍了 WebSocket 的由来，原理机制以及服务端/客户端实现，并以实际客户案例指导并讲解了如何使用 WebSocket 解决实时响应及服务端消息推送方面的问题。本文适用于熟悉 HTML 协议规范和 J2EE Web 编程的读者，旨在帮助读者快速熟悉 HTML5 WebSocket 的原理和开发应用。文中的服务端及客户端项目代码可供下载，修改后可用于用户基于 WebSocket 的 HTTP 长连接的实际生产环境中。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;HTTP协议是一种无状态协议，服务器端本身不具有识别客户端的能力，必须借助外部机制，比如session和cookie，才能与特定客户端保持对话。这多多少少带来一些不便，尤其在服务器端与客户端需要持续交换数据的场合（比如网络聊天），更是如此。为了解决这个问题，HTML5提出了浏览器的&lt;a href=&quot;http://dev.w3.org/html5/websockets/&quot;&gt;WebSocket API&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WebSocket的主要作用是，允许服务器端与客户端进行全双工（full-duplex）的通信。举例来说，HTTP协议有点像发电子邮件，发出后必须等待对方回信；WebSocket则是像打电话，服务器端和客户端可以同时向对方发送数据，它们之间存着一条持续打开的数据通道。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://hangweiping.github.io/categories/HTML5/"/>
    
    
      <category term="HTML5" scheme="http://hangweiping.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>docker总结</title>
    <link href="http://hangweiping.github.io/2016/05/04/docker%E6%80%BB%E7%BB%93/"/>
    <id>http://hangweiping.github.io/2016/05/04/docker总结/</id>
    <published>2016-05-04T10:23:46.000Z</published>
    <updated>2016-06-28T13:33:21.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Docker的应用场景&quot;&gt;&lt;a href=&quot;#Docker的应用场景&quot; class=&quot;headerlink&quot; title=&quot;Docker的应用场景&quot;&gt;&lt;/a&gt;Docker的应用场景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Web 应用的自动化打包和发布。  &lt;/li&gt;
&lt;li&gt;自动化测试和持续集成、发布。  &lt;/li&gt;
&lt;li&gt;在服务型环境中部署和调整数据库或其他的后台应用。  &lt;/li&gt;
&lt;li&gt;从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Docker-的优点&quot;&gt;&lt;a href=&quot;#Docker-的优点&quot; class=&quot;headerlink&quot; title=&quot;Docker 的优点&quot;&gt;&lt;/a&gt;Docker 的优点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;简化程序：&lt;br&gt;Docker 让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，便可以实现虚拟化。Docker改变了虚拟化的方式，使开发者可以直接将自己的成果放入Docker中进行管理。方便快捷已经是 Docker的最大优势，过去需要用数天乃至数周的 任务，在Docker容器的处理下，只需要数秒就能完成。  &lt;/li&gt;
&lt;li&gt;避免选择恐惧症：&lt;br&gt;如果你有选择恐惧症，还是资深患者。Docker 帮你 打包你的纠结！比如 Docker 镜像；Docker 镜像中包含了运行环境和配置，所以 Docker 可以简化部署多种应用实例工作。比如 Web 应用、后台应用、数据库应用、大数据应用比如 Hadoop 集群、消息队列等等都可以打包成一个镜像部署。  &lt;/li&gt;
&lt;li&gt;节省开支：&lt;br&gt;一方面，云计算时代到来，使开发者不必为了追求效果而配置高额的硬件，Docker 改变了高性能必然高价格的思维定势。Docker 与云的结合，让云空间得到更充分的利用。不仅解决了硬件管理的问题，也改变了虚拟化的方式。  &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;容器运行方式&quot;&gt;&lt;a href=&quot;#容器运行方式&quot; class=&quot;headerlink&quot; title=&quot;容器运行方式&quot;&gt;&lt;/a&gt;容器运行方式&lt;/h2&gt;&lt;h3 id=&quot;输出Hello-world&quot;&gt;&lt;a href=&quot;#输出Hello-world&quot; class=&quot;headerlink&quot; title=&quot;输出Hello world&quot;&gt;&lt;/a&gt;输出Hello world&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;docker run ubuntu:15.10 /bin/echo &amp;quot;Hello world&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;各个参数解析：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;css设计指南-定位.mdocker: Docker 的二进制执行文件。  &lt;/li&gt;
&lt;li&gt;run:与前面的 docker 组合来运行一个容器。  &lt;/li&gt;
&lt;li&gt;ubuntu:15.10指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。  &lt;/li&gt;
&lt;li&gt;/bin/echo “Hello world”: 在启动的容器里执行的命令  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上命令完整的意思可以解释为：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo “Hello world”，然后输出结果。&lt;/p&gt;
&lt;h3 id=&quot;运行交互式的容器&quot;&gt;&lt;a href=&quot;#运行交互式的容器&quot; class=&quot;headerlink&quot; title=&quot;运行交互式的容器&quot;&gt;&lt;/a&gt;运行交互式的容器&lt;/h3&gt;&lt;p&gt;我们通过docker的两个参数 -i -t，让docker运行的容器实现”对话”的能力&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -i -t ubuntu:15.10 /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;各个参数解析：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i:在新容器内指定一个伪终端或终端。  &lt;/li&gt;
&lt;li&gt;-t:允许你对容器内的标准输入 (STDIN) 进行交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此时我们已进入一个 ubuntu15.10系统的容器&lt;br&gt;我们尝试在容器中运行命令 cat /proc/version和ls分别查看当前系统的版本信息和当前目录下的文件列表&lt;/p&gt;
&lt;h3 id=&quot;启动容器（后台模式）&quot;&gt;&lt;a href=&quot;#启动容器（后台模式）&quot; class=&quot;headerlink&quot; title=&quot;启动容器（后台模式）&quot;&gt;&lt;/a&gt;启动容器（后台模式）&lt;/h3&gt;&lt;p&gt;使用以下命令创建一个以进程方式运行的容器   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -d ubuntu:15.10 /bin/sh -c &amp;quot;while true; do echo hello world; sleep 1; done&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Docker-实例&quot;&gt;&lt;a href=&quot;#Docker-实例&quot; class=&quot;headerlink&quot; title=&quot;Docker 实例&quot;&gt;&lt;/a&gt;Docker 实例&lt;/h2&gt;&lt;h3 id=&quot;Docker-安装-MySQL&quot;&gt;&lt;a href=&quot;#Docker-安装-MySQL&quot; class=&quot;headerlink&quot; title=&quot;Docker 安装 MySQL&quot;&gt;&lt;/a&gt;Docker 安装 MySQL&lt;/h3&gt;&lt;p&gt;默认会在 3306 端口启动数据库&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=password -d mysql:latest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后就可以使用其它应用来连接到该容器。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run --name some-app --link some-mysql:mysql -d application-that-uses-mysql
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者通过 mysql&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -it --link some-mysql:mysql --rm mysql sh -c &amp;apos;exec mysql -h&amp;quot;$MYSQL_PORT_3306_TCP_ADDR&amp;quot; -P&amp;quot;$MYSQL_PORT_3306_TCP_PORT&amp;quot; -uroot -p&amp;quot;$MYSQL_ENV_MYSQL_ROOT_PASSWORD&amp;quot;&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;其他命令&quot;&gt;&lt;a href=&quot;#其他命令&quot; class=&quot;headerlink&quot; title=&quot;其他命令&quot;&gt;&lt;/a&gt;其他命令&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;docker rm `docker ps -a -q`  //删除所有容器
docker images //列出本地主机上的镜像
docker pull ubuntu:13.10 //获取一个新的镜像
docker search httpd //查找镜像
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;创建镜像&quot;&gt;&lt;a href=&quot;#创建镜像&quot; class=&quot;headerlink&quot; title=&quot;创建镜像&quot;&gt;&lt;/a&gt;创建镜像&lt;/h3&gt;&lt;p&gt;当我们从docker镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从已经创建的容器中更新镜像，并且提交这个镜像&lt;/li&gt;
&lt;li&gt;使用 Dockerfile 指令来创建一个新的镜像&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;更新镜像&quot;&gt;&lt;a href=&quot;#更新镜像&quot; class=&quot;headerlink&quot; title=&quot;更新镜像&quot;&gt;&lt;/a&gt;更新镜像&lt;/h3&gt;&lt;p&gt;更新镜像之前，我们需要使用镜像来创建一个容器。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -t -i ubuntu:15.10 /bin/bash
root@e218edb10161:/# //在运行的容器内使用 apt-get update 命令进行更新。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在完成操作之后，输入 exit命令来退出这个容器。&lt;br&gt;此时ID为e218edb10161的容器，是按我们的需求更改的容器。我们可以通过命令 docker commit来提交容器副本。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker commit -m=&amp;quot;has update&amp;quot; -a=&amp;quot;runoob&amp;quot; e218edb10161 runoob/ubuntu:v2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;各个参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-m:提交的描述信息&lt;/li&gt;
&lt;li&gt;-a:指定镜像作者&lt;/li&gt;
&lt;li&gt;e218edb10161：容器ID&lt;/li&gt;
&lt;li&gt;runoob/ubuntu:v2:指定要创建的目标镜像名&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;构建镜像&quot;&gt;&lt;a href=&quot;#构建镜像&quot; class=&quot;headerlink&quot; title=&quot;构建镜像&quot;&gt;&lt;/a&gt;构建镜像&lt;/h3&gt;&lt;p&gt;我们使用命令 docker build ， 从零开始来创建一个新的镜像。为此，我们需要创建一个 Dockerfile 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。&lt;/p&gt;
&lt;h3 id=&quot;设置镜像标签&quot;&gt;&lt;a href=&quot;#设置镜像标签&quot; class=&quot;headerlink&quot; title=&quot;设置镜像标签&quot;&gt;&lt;/a&gt;设置镜像标签&lt;/h3&gt;&lt;p&gt;我们可以使用 docker tag 命令，为镜像添加一个新的标签。  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker tag 860c279d2fec runoob/centos:dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;docker tag 镜像ID，这里是 860c279d2fec ,用户名称、镜像源名(repository name)和新的标签名(tag)。&lt;/p&gt;
&lt;h3 id=&quot;Docker容器连接&quot;&gt;&lt;a href=&quot;#Docker容器连接&quot; class=&quot;headerlink&quot; title=&quot;Docker容器连接&quot;&gt;&lt;/a&gt;Docker容器连接&lt;/h3&gt;&lt;p&gt;端口映射并不是唯一把 docker 连接到另一个容器的方法。&lt;br&gt;docker有一个连接系统允许将多个容器连接在一起，共享连接信息。&lt;br&gt;docker连接会创建一个父子关系，其中父容器可以看到子容器的信息。  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://hangweiping.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>大前端工具集</title>
    <link href="http://hangweiping.github.io/2016/04/01/%E5%A4%A7%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    <id>http://hangweiping.github.io/2016/04/01/大前端工具集/</id>
    <published>2016-04-01T08:12:43.000Z</published>
    <updated>2016-06-18T03:51:17.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本篇文章记录了一枚程序猿的百宝箱。PS：每个分类的都按照推荐的先后排列。&lt;/p&gt;
&lt;p&gt;主要内容是一些使用过的库、工具、套路或关注的前端组织等等，反正用 &lt;strong&gt;前端瑞士军刀&lt;/strong&gt; 来总结这篇文章再合适不过鸟。&lt;/p&gt;
&lt;/blockquote&gt;
 &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;您可以通过以下方式联系到我：&quot;&gt;&lt;a href=&quot;#您可以通过以下方式联系到我：&quot; class=&quot;headerlink&quot; title=&quot;您可以通过以下方式联系到我：&quot;&gt;&lt;/a&gt;您可以通过以下方式联系到我：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;微博 &lt;a href=&quot;http://weibo.com/darrencode&quot; title=&quot;Darren 聂微东&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@聂微东&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;个人 Blog &lt;a href=&quot;http://www.fefork.com/&quot; title=&quot;一枚 Web 技术领域的手艺人&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fefork.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;博客园 &lt;a href=&quot;http://www.cnblogs.com/Darren_code/&quot; title=&quot;关注前端技术&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;犀利的东哥&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;QQ 群 &lt;strong&gt;214199415&lt;/strong&gt;，群名&lt;strong&gt;前端 Club&lt;/strong&gt;。PS：入群务必请提供 &lt;strong&gt;有内容的 git 或 blog 地址&lt;/strong&gt;，否则进不去哈:)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#blogs&quot;&gt;前端组织/前端博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#blog_build&quot;&gt;博客搭建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#html&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#css&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript&quot;&gt;浏览端 JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#project_build&quot;&gt;Project Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#node_package&quot;&gt;Node Package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#node_project&quot;&gt;Node Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#read&quot;&gt;精选阅读&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#fedev&quot;&gt;前端技术&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#node_read&quot;&gt;Node 学习资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#interview&quot;&gt;前端面试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#otherdev&quot;&gt;其他技术&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tools&quot;&gt;工具/软件&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#web&quot;&gt;Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#app&quot;&gt;APP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#mac_soft&quot;&gt;Mac 软件篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#mac_dev&quot;&gt;Mac 开发篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#linux&quot;&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#BrowserPlugins&quot;&gt;Chrome Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#git&quot;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#servers&quot;&gt;服务端&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#backend&quot;&gt;数据端&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ux&quot;&gt;设计/交互&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#handbook&quot;&gt;速查手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#other&quot;&gt;杂七杂八&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cool&quot;&gt;前端炫技-炫酷狂拽叼炸天的 Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#todo&quot;&gt;TODO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;h3 id=&quot;blogs&quot;&gt;前端组织/前端博客&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;虽混过外企俩家，但劳资英文这项的技能点还是灰色的…so，俺关注的站点主要以中文为主&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; - 没 &lt;em&gt;Github&lt;/em&gt; 都不好意思面基有木有！！！&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN&lt;/a&gt; - 无数的资源再等着你探索，追标准和新特性肯定得关注的网站&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.awesomes.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Awesomes.cn&lt;/a&gt; - 国人维护的前端资源库，深度对接到 &lt;em&gt;Github&lt;/em&gt;，分类和展现清晰，值得收藏&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://uptodate.frontendrescue.org/zh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何跟上前端开发的最新前沿&lt;/a&gt; - RT，不解释&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.imooc.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;慕课&lt;/a&gt; - 大量的在线计算机课程。 虽然初、中级居多，但是不乏有巨作值得细细品尝&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javascript.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰&lt;/a&gt; - 关注多年，拜读其 &lt;a href=&quot;http://es6.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES6&lt;/a&gt; 系列。虽网传靠写书进鸟阿里，但博客内容确实够丰富&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3cplus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3Cplus&lt;/a&gt; - 大漠(《图解 CSS3》作者)在国内的影响力杠杠的，&lt;em&gt;Sass&lt;/em&gt; 专家级&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://taobaofed.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;淘宝前端团队&lt;/a&gt; - 内容涵盖 &lt;em&gt;Web&lt;/em&gt; 和 &lt;em&gt;Node&lt;/em&gt;，要深度游深度，要广度有广度&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.75team.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;奇舞团博客&lt;/a&gt; - 坚持是最宝贵的，别人的奇舞周刊早已经过百期了&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fex.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度 FEX&lt;/a&gt; - 代表作 &lt;em&gt;FIS&lt;/em&gt;、&lt;em&gt;UEditor&lt;/em&gt;、&lt;em&gt;WebUploader&lt;/em&gt;、&lt;em&gt;KityMinder&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.alloyteam.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;腾讯全端 AlloyTeam&lt;/a&gt; - 腾讯 Web 前端团队，博客真的有点丑…&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.fens.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;粉丝日志 for 张丹&lt;/a&gt; - 大爱作者写的 &lt;em&gt;Node&lt;/em&gt; 系列&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;张鑫旭&lt;/a&gt; - 成名多年的、高产的前端大湿，&lt;em&gt;CSS&lt;/em&gt;猛人&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;blog_build&quot;&gt;博客搭建&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt; - 快速、简洁且高效的博客框架，照着文档分分钟就可以在本地跑起来。&lt;em&gt;Github&lt;/em&gt; 地址:&lt;a href=&quot;https://github.com/hexojs/hexo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jekyll.bootcss.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jekyll&lt;/a&gt; - 将纯文本转化为静态网站和博客。由于环境依赖的问题，所以安装起来可能稍费劲那么一点。&lt;em&gt;Github&lt;/em&gt; 地址：&lt;a href=&quot;https://github.com/jekyll/jekyll&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GithubPages&lt;/a&gt; - 免费的静态站点。配合着 &lt;em&gt;Hexo&lt;/em&gt; 或 &lt;em&gt;Jekyll&lt;/em&gt; 的模板，分分搭建出一套炫酷的个人博客&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.tumblr.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tumblr&lt;/a&gt; - 轻博客的祖师爷，各种各样的主题感觉不错&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh-cn.wordpress.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wordpress&lt;/a&gt; - 这玩意古老到都不想介绍&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 &lt;em&gt;Hexo/Jekyll + GitPage&lt;/em&gt;，前端搭建静态博客那是相当 easy。用 &lt;em&gt;Markdown&lt;/em&gt; 写文章做记录，再 &lt;em&gt;push&lt;/em&gt; 到 &lt;em&gt;Github&lt;/em&gt; 上，分分钟高大上有木有&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再推荐三款视觉效果极佳的 &lt;em&gt;Hexo&lt;/em&gt; 主题，且在 &lt;em&gt;Github&lt;/em&gt; 上的 &lt;em&gt;star&lt;/em&gt; 都很不错：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NexT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yilia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tranquilpeak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不能偏心，所以也推荐三款 &lt;em&gt;Jekyll&lt;/em&gt; 的好主题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mmistakes/so-simple-theme&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;So Simple&lt;/a&gt; 如果你看过俺的博客，对这个主题就肯定不会陌生啦&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mmistakes/hpstr-jekyll-theme&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HPSTR&lt;/a&gt; 当初 &lt;a href=&quot;http://www.fefork.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fefork&lt;/a&gt; 差点选这个主题:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/daattali/beautiful-jekyll#readme&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;beautiful&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;html&quot;&gt;HTML&lt;/h3&gt;

&lt;p&gt;纯 &lt;em&gt;HTML&lt;/em&gt; 相关其实没有好玩的项目，所以这儿展示的内容主要都是一些模板，而且以下列出来的都是免费的，方便拿取搭架后台或者博客&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/joshbuchea/HEAD&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HEAD&lt;/a&gt; - 最全的 &lt;em&gt;&lt;head&gt;&lt;/head&gt;&lt;/em&gt; 列表，真心佩服这种偏执的整理能力&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/akveo/blur-admin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;blur-admin&lt;/a&gt; - 视觉冲击极强的管理后台，各种动画效果。PS：因为团队有&lt;a href=&quot;https://github.com/ant-design/ant-design&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ant-design&lt;/a&gt;的使用经验，感觉使用起来不是很顺畅，这套后台又是基于&lt;em&gt;AngularJS&lt;/em&gt;，所以再三权限之后还是没实际使用，劳资还是别给团队添乱了，囧…&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/almasaeed2010/AdminLTE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AdminLTE&lt;/a&gt; - 很小清新的后台模板，每次看&lt;a href=&quot;https://almsaeedstudio.com/preview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;preview&lt;/a&gt; 页面都觉得很有视觉冲击&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/puikinsh/gentelella&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gentelella&lt;/a&gt; - 刚用这个搭建了我司内部用的的数据平台，效果喜人。模板实现的功能比较全，比如登录、注册甚至各种 &lt;em&gt;widget&lt;/em&gt;，所以最终交付的时候，自己几乎没写几行CSS。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/google/material-design-lite&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;material-design-lite&lt;/a&gt; - &lt;em&gt;Star&lt;/em&gt; 数超过2W的开源模板项目，包含了多套简洁的 &lt;em&gt;templates&lt;/em&gt;，可以用于博客、后台或者企业首页。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;css&quot;&gt;CSS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://metroui.org.ua/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MetroUI&lt;/a&gt; - 好看好用，重点是样式特别、个性&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fontawesome.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Font-Awesome&lt;/a&gt; - 图标字体库。相类似的库有不少，大厂都喜欢造轮子嘛:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://connoratherton.com/loaders&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LoadersCSS&lt;/a&gt; - 用 CSS 技术实现 loading 动画； 补一句，想熟悉、理解 &lt;em&gt;keyframes、animation、transform、transition&lt;/em&gt; 的童鞋可以直接去读其源码(只有千把行代码)，读完就算出师鸟:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/weui/weui&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WeUI&lt;/a&gt; - 一套同微信原生视觉体验一致的基础样式库 为微信 Web 开发量身设计，令用户的使用感知更加统一&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/postcss/postcss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PostCSS&lt;/a&gt; - 最近才知道大名鼎鼎&lt;a href=&quot;https://github.com/postcss/autoprefixer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Autoprefixer&lt;/a&gt;是其插件 推荐大漠的文章&lt;a href=&quot;http://www.w3cplus.com/PostCSS/postcss-deep-dive-what-you-need-to-know.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《PostCSS深入学习》&lt;/a&gt;，有关 PostCSS 不是什么？PostCSS 是什么？PostCSS 可以做什么等等问题，文章里面有答案&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/una/CSSgram&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSSgram&lt;/a&gt; - 图片滤镜库，终于可以用 CSS 在 web 上实现滤镜的效果鸟 IE不支持，不过新的移动设备支持没问题 &lt;a href=&quot;http://caniuse.com/#search=CSS%20Blend%20Modes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Can I Use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chinchang/hint.css&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HINT.css&lt;/a&gt; - 一款非常小巧的提示框效果&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kazzkiq.github.io/balloon.css/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Balloon.css&lt;/a&gt;| |同上，一款非常小巧的提示框效果&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ianlunn.github.io/Hover/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hover.css&lt;/a&gt; - 很多鼠标 Hover 态的效果，可以给产品学习一下:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://css-cursor.techstream.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cursor&lt;/a&gt; - 记录各浏览器对Cursor的支持情况&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zmoazeni/csscss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;csscss&lt;/a&gt; - 用于检查 CSS 代码冗余&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://purecss.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;purecss&lt;/a&gt; - 小巧的响应式 CSS 库，Yahoo!出品&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jonsuh.com/hamburgers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hamburgers&lt;/a&gt; - 简单的动画库，让 Click(or Tap) 变得美妙&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cssmatic.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cssmatic&lt;/a&gt; - 一个帮忙调试CSS效果的工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;javascript&quot;&gt;浏览端 JS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/requirejs/requirejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;requirejs&lt;/a&gt; - JS模块化是构建复杂项目的第一步 中文学习文档奉上：&lt;a href=&quot;http://www.requirejs.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RequireJS 中文网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://echarts.baidu.com/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECharts&lt;/a&gt; - 好用，最关键的是支持的图表展示非常之多，强烈推荐&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.swiper.com.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swiper&lt;/a&gt; - 强大的 Slider 库 其实这类效果库非常多，但文档能那么专业的就很少鸟&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://babeljs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;babel&lt;/a&gt; - &lt;em&gt;ES6&lt;/em&gt; 用起来。这个插件可以让我们用新的 &lt;strong&gt;标准/提案&lt;/strong&gt; 写 &lt;em&gt;JavaScript&lt;/em&gt; 代码，然后再向下 &lt;strong&gt;转换编译&lt;/strong&gt;，最终生成随处可用的 &lt;em&gt;JavaScript&lt;/em&gt; 代码。中文文档奉上&lt;a href=&quot;https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/README.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《babel-handbook》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://alvarotrigo.com/fullPage/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fullPage&lt;/a&gt; - 非常好用的全屏滑动库，看 Demo 就明白&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://photoswipe.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhotoSwipe&lt;/a&gt; - 偶常用的 js 库 官网上有这么一句很关键、重要”no dependencies”&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cn.vuejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vuejs&lt;/a&gt; - 比较喜欢其作者… 所以劳资正在看源码学习学习&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lab.ejci.net/favico.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;favico.js&lt;/a&gt; - 动态改变浏览器标签栏中的网站图标，非常好玩&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ant.design&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ant.design&lt;/a&gt; - 蚂蚁金服搞的良心项目，文档美好的令人发指 样式优雅，强烈推荐内部系统尝试此库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://highlightjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;highlightjs&lt;/a&gt; - 代码高亮库，支持非常多的语言&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.daterangepicker.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;daterangepicker&lt;/a&gt; - 时间选择插件的不二选择，基于 &lt;em&gt;Bootstrap&lt;/em&gt; 和 &lt;a href=&quot;http://momentjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Moment.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ksky521/nodePPT&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodePPT&lt;/a&gt; - 前同事三水的大作，好用必须得支持:) 用 Markdown 写 PPT，还可以 HTML 混排，上手飞快&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/RubaXa/Sortable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sortable&lt;/a&gt; - 拖拽神器，用了就知道&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CodeSeven/toastr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;toastr&lt;/a&gt; - 信息提示的库，推荐的原因是卖相好、功能强大  &lt;a href=&quot;http://codeseven.github.io/toastr/demo.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://benpickles.github.io/peity/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;peity.js&lt;/a&gt; - jQuery的图表插件，特别cute，感觉萌萌哒 将HTML转换成一个小的&lt;em&gt;&lt;svg/&gt;&lt;/em&gt;饼图、圆环图、折线图等等&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Ranks/emojify.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;emojify.js&lt;/a&gt; - 能够将&lt;em&gt;emoji&lt;/em&gt;关键词转换为&lt;em&gt;emoji&lt;/em&gt;图片的&lt;em&gt;JS&lt;/em&gt;插件 可以快速的为你的网站提供&lt;em&gt;emoji&lt;/em&gt;表情支持&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Nickersoft/push.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Push.js&lt;/a&gt; - 基于 &lt;em&gt;Notification API&lt;/em&gt; 实现的桌面效果的提示栏。浏览器支持情况不错，如&lt;a href=&quot;http://caniuse.com/#search=Notification&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://caniuse.com/#search=Notification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.hcharts.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Highcharts&lt;/a&gt;| |Highcharts 中文网，又是一个图表库 确实功能强大，但是觉得不好看… PS：官网就做的不好看，脏脏的赶脚&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rstacruz/nprogress/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NProgress&lt;/a&gt; - 使页面加载时有更好的loading效果&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaredreich/notie.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Noticejs&lt;/a&gt; - 一个简单的通知库，木有依赖&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/peachananr/onepage-scroll&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;onepage-scroll&lt;/a&gt; - 依赖 jQuery 的单页滚动库，和 &lt;a href=&quot;http://alvarotrigo.com/fullPage/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fullPage&lt;/a&gt; 类似&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://videojs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videojs&lt;/a&gt; - 当下视频需求都用上&lt;em&gt;&lt;video&gt;&lt;/video&gt;&lt;/em&gt;鸟 样式和交互统一的问题交给 videojs 搞定:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zenorocha.github.io/clipboard.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clipboard&lt;/a&gt; - 仅 2KB 大小，搞定剪贴板功能，屌不屌~ 但是，Safari 不支持…&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/impress/impress.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;impress.js&lt;/a&gt; -  用来写 PPT 不错，偶也曾为其写过一篇&lt;a href=&quot;http://www.cnblogs.com/Darren_code/archive/2013/01/04/impressjs.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;impress.js 初体验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fengyuanchen.github.io/cropper/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cropper&lt;/a&gt; - 国人开发的图片裁剪库&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;em&gt;Swiper/PhotoSwipe/fullPage&lt;/em&gt; 有这仨库，微信里常见的 H5 页完全不是问题哒&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;project_build&quot;&gt;Project Build&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/pm2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pm2&lt;/a&gt; - 是一个带有负载均衡功能的 Node 应用的进程管理器； 是 &lt;a href=&quot;https://www.npmjs.com/package/forever&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forever&lt;/a&gt; 的进阶库，想了解的可以看这篇文章&lt;a href=&quot;http://se77en.cc/2013/06/27/goodbye-node-forever-hello-pm2-translation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《拥抱PM2》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://webpack.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Webpack&lt;/a&gt; - 项目构建工具，由于过于复杂和太强大，所以劳资还没去深入研究。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gulpjs/gulp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gulp&lt;/a&gt; - Gulp 是基于 Node 实现 Web 前端自动化开发的工具。 俺总结了篇&lt;a href=&quot;http://www.fefork.com/gulp_1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《gulp使用小结》&lt;/a&gt;，推荐您阅读:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bower.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bower&lt;/a&gt; - 前端项目的包管理其实是件复杂的事 谁谁谁依赖谁谁谁，谁谁谁依赖谁谁谁的某个版本…卧槽 Bower 就是搞定这件事儿的，亲爹是 Twitter 推荐篇 Bower 的中文文章：&lt;a href=&quot;http://blog.fens.me/nodejs-bower-intro/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《bower 解决 js 的依赖管理》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gruntjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Grunt&lt;/a&gt; - 和 Gulp 类似，都是项目构建的常见选择 对比这俩的文章可谓不少，推荐篇&lt;a href=&quot;http://www.benben.cc/blog/?p=407&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Gulp vs Grunt》&lt;/a&gt; 英盲又想看文档，可以去&lt;a href=&quot;http://www.gruntjs.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Grunt 中文网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fex-team.github.io/fis3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FIS&lt;/a&gt; - 度厂出品的前端构建工具 文档清晰，功能强大，推荐了解和使用&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ci.gitlab.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gitlab CI&lt;/a&gt; - 一套基于&lt;a href=&quot;https://about.gitlab.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gitlab&lt;/a&gt;的持续集成服务&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Gulp + Webpack 的使用&lt;strong&gt;套路&lt;/strong&gt;参考: &lt;a href=&quot;https://github.com/demohi/learning-gulp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;learning-gulp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gulp 资料收集：&lt;a href=&quot;https://github.com/Platform-CUF/use-gulp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;use-gulp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;推荐篇与 Webpack 相关的文章《&lt;a href=&quot;http://boke.io/tan-tan-css-modules/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS Modules&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;Webpack 用起来吼吼：&lt;a href=&quot;https://github.com/petehunt/webpack-howto&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webpack-howto&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;node_package&quot;&gt;Node Package&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;作为一名大前端甚至是多端，&lt;em&gt;Node&lt;/em&gt; 绝逼是必备的一块&lt;/p&gt;
&lt;p&gt;有关 &lt;em&gt;Node&lt;/em&gt; 的学习资料，请访问&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;这里介绍些有特色且前端有必要知道的包&quot;&gt;&lt;a href=&quot;#这里介绍些有特色且前端有必要知道的包&quot; class=&quot;headerlink&quot; title=&quot;这里介绍些有特色且前端有必要知道的包&quot;&gt;&lt;/a&gt;这里介绍些有特色且前端有必要知道的包&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/anywhere&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;anywhere&lt;/a&gt; - 随时随地将你的当前目录变成一个静态文件服务器的根目录&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/supervisor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;supervisor&lt;/a&gt; - 监控 Node 代码，自动重启。 A supervisor program for running nodejs programs&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/remy/nodemon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodemon&lt;/a&gt; - 监控 Node 代码，自动重启。 Nodemon is a utility that will monitor for any changes in your source and automatically restart your server.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/pm2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pm2&lt;/a&gt; - 是一个带有负载均衡功能的 Node 应用的进程管理器； 是 &lt;a href=&quot;https://www.npmjs.com/package/forever&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forever&lt;/a&gt; 的进阶库，想了解的可以看这篇文章&lt;a href=&quot;http://se77en.cc/2013/06/27/goodbye-node-forever-hello-pm2-translation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《拥抱PM2》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/async&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;async&lt;/a&gt; - 一个流程控制工具包，提供直接而强大的异步功能&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/lodash&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lodash&lt;/a&gt; - JS 工具库 &lt;em&gt;Underscore.js&lt;/em&gt;的一个 fork 发展而来&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/socketio/socket.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;socket.io&lt;/a&gt; - 预计 Node 的实时框架 聊天室、页游等对实时性有高要求的较适用&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Automattic/mongoose&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mongoose&lt;/a&gt; - 让 NodeJS 更容易操作 Mongodb 数据库；  附上一篇&lt;a href=&quot;https://cnodejs.org/topic/504b4924e2b84515770103dd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mongoose 学习参考文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://npm.taobao.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CNPM&lt;/a&gt; - 淘宝 NPM 镜像，提供了 NPM 同步的服务 当然可不仅仅这样，利用 CNPM 可以打造&lt;strong&gt;企业/个人&lt;/strong&gt;私有的 NPM 服务 推荐篇搭建私有NPM的文章：&lt;a href=&quot;http://blog.fens.me/nodejs-cnpm-npm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《CNPM搭建私有的NPM服务》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://koajs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;koa&lt;/a&gt; - 玩 Node 都知道 express，但使用 koa 的就少很多，门槛比 Ex 稍高 通过 generator 避免繁琐的回调函数嵌套，强烈推崇 &lt;a href=&quot;https://github.com/guo-yu/koa-guide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方的文章教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/shipitjs/shipit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Shipit&lt;/a&gt; - 一个强大的自动化部署工具。 shipit 很多地方非常类似 gulp，他们的核心都是任务系统。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/node-inspector&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-inspector&lt;/a&gt; - Node 调试工具，使用起来跟 Chrome 的 JS 调试器很相似&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/winston&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;winston&lt;/a&gt; - Node 服务最流行的日志库之一&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/co&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;co&lt;/a&gt; - 用 generator 写法让异步代码同步&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/thenify-all&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;thenify-all&lt;/a&gt; - 把异步的方法变成 Promise 的 Promisifies all the selected functions in an object&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://phantomjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhantomJS&lt;/a&gt; - 一般用来做抓取截图和无界面测试 也可以用来操作 DOM 和网络监测，很好玩的库 &lt;a href=&quot;http://phantomjs.org/quick-start.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Quick Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/ava&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ava&lt;/a&gt; - 偶是应TJ大神推荐而得之的 &lt;em&gt;ava&lt;/em&gt; 未来的测试运行器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mochajs/mocha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mocha&lt;/a&gt; - Node 里最常用的测试框架； 它支持多种 Node 的 Assert libs； 同时支持异步和同步的测试，同时支持多种方式导出结果； 也支持直接在 browser 上跑 JS 代码测试。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/koa-validate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;koa-validate&lt;/a&gt; - &lt;em&gt;koa&lt;/em&gt; 的校验库 可以非常方便的对 &lt;em&gt;queryString&lt;/em&gt; 或 &lt;em&gt;postBody&lt;/em&gt; 的信息进行验证&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/line-reader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;line-reader&lt;/a&gt; - 基于&lt;em&gt;steam&lt;/em&gt;的按行读文件，偶处理日志时用哒 要不实现一个按行读文件，又得 &lt;em&gt;steam&lt;/em&gt;、 又得 &lt;em&gt;chunk&lt;/em&gt;，还是比较麻烦的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/everyauth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;everyauth&lt;/a&gt;| |OAuth 的集成解决方案&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://documentup.com/shelljs/shelljs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shelljs&lt;/a&gt; - 写 Node 时难免需要用 shell 去操作些神马 shelljs 是基于 Node 的 shell 工具，API 及其简单&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/hashids&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hashids&lt;/a&gt; - 看名称就懂，给 userid 加解密用的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/coopernurse/node-pool&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-pool&lt;/a&gt; - 让 &lt;em&gt;Node&lt;/em&gt; 有连接池的概念&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/colors&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;colors&lt;/a&gt; - 花俏的小工具 让打印&lt;em&gt;console.log&lt;/em&gt;时有更好的展示样式&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/n&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;n&lt;/a&gt; - 控制Node的版本，想升级一行代码搞定&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;supervisor&lt;/em&gt; 和 &lt;em&gt;nodemon&lt;/em&gt; 这俩都是监控 Node 代码，使得每次修改代码后会，开发 Node 程序必备&lt;/p&gt;
&lt;p&gt;以上库俺都有使用过，甚至有不少都是项目开发中、各种特定场景下必用的，有任何使用问题欢迎沟通哈:)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;node_project&quot;&gt;Node Project&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;暂无&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;read&quot;&gt;精选阅读&lt;/h2&gt;

&lt;h3 id=&quot;fedev&quot;&gt;前端技术&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.imooc.com/learn/590&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2015D2前端论坛&lt;/a&gt; - Node方向非常值得看，有干货，相信东哥推荐哈&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhibimo.com/read/Ashu/front-end-style-guide/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端开发规范手册&lt;/a&gt; -  此手册主要实现的目标：代码一致性和最佳实践&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/README.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《babel-handbook》&lt;/a&gt; - 可以用新的规范(如 &lt;em&gt;ES6&lt;/em&gt;)写代码，经过 &lt;em&gt;babel&lt;/em&gt; 编译后生成没有兼容问题的代码&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://es6.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMAScript 6入门&lt;/a&gt; - 阮一峰大神所著，一本开源的JS教程 全面介绍 ECMAScript 6新引入的语法特性&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/project/react-native/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactNative 中文版&lt;/a&gt; - 翻译自官方的中文文档&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fakefish.github.io/react-webpack-cookbook/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactWebpackCookBook&lt;/a&gt; |  |此书会引导读者是进入&lt;em&gt;React&lt;/em&gt;和&lt;em&gt;Webpack&lt;/em&gt;的世界。 俩都是非常前沿的技术，同时使用会更有趣。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ele828/react-native-guide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactNative 学习指南&lt;/a&gt; - 新玩意层出不穷… 对于能持续学习的童鞋，这是个美好的时代&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.css88.com/doc/codeguide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML/CSS 编码规范&lt;/a&gt; - 编写灵活、稳定、高质量的&lt;em&gt;HTML&lt;/em&gt;和&lt;em&gt;CSS&lt;/em&gt;代码的规范&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gold.xitu.io/entry/56c29abfa34131005b8cb1f3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;移动前端入门&lt;/a&gt; - 入门价值高，移动方向常见问题的较好总结&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nimojs/gulp-book&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GulpBook&lt;/a&gt; - Gulp 是基于 Node 实现 Web 前端自动化开发的工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;node_read&quot;&gt;Node 学习资料&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/youyudehexie/node123&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js 中文资料导航&lt;/a&gt; - Node 的中文资料导航，&lt;em&gt;start1300+&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.fens.me/series-nodejs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;从零开始 NodeJS 系列文章&lt;/a&gt; - 基本上每一篇都看过，强烈推荐&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nqdeng.github.io/7-days-nodejs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js 包教不包会&lt;/a&gt; - 值得阅读，看完绝不用买书鸟&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alsotang/node-lessons&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;七天学会 NodeJS&lt;/a&gt; - 劳资还没看，不过看目录还不错:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dead-horse/node-style-guide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Style Guide&lt;/a&gt; - 这是一份关于如何写出一致且美观的 &lt;em&gt;Node&lt;/em&gt; 代码的风格指南&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.apebook.org/minghe/koa-action/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;koa实战&lt;/a&gt; - “&lt;a href=&quot;https://github.com/minghe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;明河&lt;/a&gt;出品”这四字已经说明一切。PS：正在连载中&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jabez128/stream-handbook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stream-handbook&lt;/a&gt; - 如果学习 NodeJS，那么流一定是需要掌握的概念&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;interview&quot;&gt;前端面试&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://dongfei.baijia.baidu.com/article/52449&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在 LinkedIn 做面试官的故事&lt;/a&gt; - 非面试题，介绍 LinkedIn 的面试过程 文章有很多中肯的建议和想法，推荐阅读&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3cplus.com/css/write-to-front-end-developer-interview.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;大漠：写给前端面试者&lt;/a&gt; - 这篇文章不涉及任何的面试题 大漠与大家聊聊面试者与被面者之间的感受…&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端面试题&lt;/a&gt; - Git 上非常火的前端面试题，&lt;em&gt;start17k+&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/paddingme/Front-end-Web-Development-Interview-Question&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端面经&lt;/a&gt; - 主要内容是些前端面试笔试题和面试套路，值得阅读&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;otherdev&quot;&gt;其他技术&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MongoDB 极简实践入门&lt;/a&gt; - 入门推荐的套路，非常浅显易懂&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/macdao/ocds-guide-to-setting-up-mac&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mac 设置指南&lt;/a&gt; - Mac 使用必看 尤其适合 偏执狂/强迫症 患者:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xirong/my-markdown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown 资料&lt;/a&gt; - 简单看些语法入门，快速用起来&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tools&quot;&gt;工具/软件&lt;/h2&gt;

&lt;h3 id=&quot;web&quot;&gt;Web&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://caniuse.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CanIuse&lt;/a&gt; - &lt;strong&gt;前端必备&lt;/strong&gt;；查看浏览器对各种新特性的兼容情况&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://overapi.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;overapi&lt;/a&gt; - 最全的开发人员在线速查手册&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://naotu.baidu.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度脑图&lt;/a&gt; - 非常方便的思维导图工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.processon.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ProcessOn&lt;/a&gt; - 和百度脑图的功能类似，脑图工具。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vimawesome.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VimAwesome&lt;/a&gt; - Vim 插件集合，&lt;strong&gt;Vim 党必备&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tower.im&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tower&lt;/a&gt; - 小而美的多人协同工具。 不光只有 Web 版，还有 iPhone、iPad、Android、微信版。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://slides.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Slides&lt;/a&gt; - 一个所见即所得的 WebPPT 编辑器，非常推荐&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.faviconer.co/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;faviconer.co&lt;/a&gt; - 一个所见即所得的icon生成器，很好用&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://smallpdf.com/cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;smallpdf&lt;/a&gt; - 提供各种格式和 PDF 互相转换&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zybuluo.com/mdeditor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cmd Markdown&lt;/a&gt; - 好用的 Web 版 Markdown 编辑器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackedit.io/editor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StackEdit&lt;/a&gt; - 又是一款 Web 版 Markdown 编辑器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://modao.cc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;墨刀&lt;/a&gt; - 一个在线移动应用原型制作工具。 旨在帮助产品经理快速制作可在手机端展示的移动应用原型。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.htm2pdf.co.uk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;htm2pdf&lt;/a&gt;| |HTML to PDF&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/p/featured&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Speaker Deck&lt;/a&gt; - 在线的演讲稿展示平台&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://runjs.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RunJS&lt;/a&gt; - 在线编辑、展示、分享、交流你的 &lt;em&gt;JavaScript&lt;/em&gt; 代码&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bootswatch.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bootswatch&lt;/a&gt; - &lt;em&gt;Bootstrap&lt;/em&gt; 的免费模板&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/almasaeed2010/AdminLTE/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AdminLTE&lt;/a&gt; -  又是一个 &lt;em&gt;Bootstrap&lt;/em&gt; 的免费管理后台&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;app&quot;&gt;APP&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;以下列表中的 APP 都是不区分系统平台的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.yinxiang.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;印象笔记&lt;/a&gt; - 免费账号完全够用，跨平台跨终端的记录软件&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.365rili.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;365日历&lt;/a&gt; - 首先肯定比系统自带的日历强大，要不推荐个蛋蛋 俺一般用来搞目标管理，比如学习计划和工作计划 生活中会订阅演唱会、电影首映的信息&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.duokan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;多看阅读&lt;/a&gt; - kindle 确实好，但是懒得随身带着 多看还算不错，书较多且偶尔有特价比较爽&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/surge-web-developer-tool-proxy/id1040100637?mt=8&amp;amp;v0=WWW-GCCN-ITSTOP100-PAIDAPPS&amp;amp;l=&amp;amp;ign-mpt=uo%3D4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Surge&lt;/a&gt; - 非免费 牛逼的网络开发与调试工具，前端必备&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/coderyi/Monkey&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Monkey&lt;/a&gt; - Monkey 是 iPhone 上一个 GitHub 第三方客户端。 展示 GitHub 上的开发者的排名，以及仓库的排名&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;mac_soft&quot;&gt;Mac 软件篇&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;对于美好事务的追求无论何时都不算晚，前年公司给配了台 Mac 用做测试开发机，于是开始在 Mac 下办公。 &lt;strong&gt;Windows？&lt;/strong&gt; 回不去鸟…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.macupdate.com/app/mac/34344/alfred&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Alfred&lt;/a&gt; - 绝对的Top1。除了打开应用程序之外，查找文件、全文检索、调起浏览器搜索和计数器都是俺经常使用的功能。如果想知道具体咋用，推荐阅读老池(池建强)的一篇文章：&lt;a href=&quot;http://www.cnblogs.com/chijianqiang/p/alfred.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《神兵利器—Alfred》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://brew.sh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Homebrew&lt;/a&gt; - 没它程序猿没法好好干活… &lt;em&gt;Homebrew&lt;/em&gt;使&lt;em&gt;OS X&lt;/em&gt;更完美。 使用&lt;em&gt;gem&lt;/em&gt;来安装&lt;em&gt;gems&lt;/em&gt;、用&lt;em&gt;brew&lt;/em&gt;来搞定那些依赖包&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bahoom.com/hyperdock/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HyperDock&lt;/a&gt; - 价格￥68，但感觉还是比较值的。预览和快速切换不说，能用快捷键控制窗口，能让拖拽到边缘的窗口自动调整大小(window早就有的功能)，真心能提高效率。推荐篇中文的文章：&lt;a href=&quot;http://www.cnblogs.com/ider/p/let-mac-window-fly-with-hyperdock.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;让Mac的窗口飞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iterm2.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iTerm2&lt;/a&gt; - Mac 终端功能少又不好看，iTerm2 可以解救你~  推荐篇文章：&lt;a href=&quot;http://swiftcafe.io/2015/07/25/iterm/?hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《让你的命令行丰富多彩》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/browseshot/id615916400&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BrowseShot&lt;/a&gt; - 偶正在使用的网页截图工具，强烈推荐&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.scootersoftware.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BeyondCompare&lt;/a&gt; - 在Windows下就开始用了 比对文件和文件夹杠杠好使，Merge必备工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mediaatelier.com/CheatSheet/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CheatSheet&lt;/a&gt; - 能够显示当前程序的快捷键列表，默认的快捷键是长按 ⌘&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sequelpro.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sequel Pro&lt;/a&gt; - 免费好用的Mysql工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cockos.com/licecap/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LICEcap&lt;/a&gt; - 屏幕录制工具，支持导出 GIF 动画图片格式 轻量级、使用简单，录制过程中可以改变录屏范围&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.macbartender.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bartender&lt;/a&gt; - 有免费试用版(一个月)。Mac右上角菜单的管理工具，试用之后右上角的菜单瞬间清爽了&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://manico.im/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Manico&lt;/a&gt; - 快捷启动和切换 APP 的工具，高效的第一步 AppStore 上收费，不过可以免费试用&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jetbrains.com/webstorm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebStorm&lt;/a&gt; - 功能超强的前端 IDE，不多介绍，谁用谁知道 PS：貌似俺插件装多了，用着卡卡的，风扇呼呼转…&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://atom.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Atom&lt;/a&gt; - 2015 年 7 月之前，在桌面环境下我最喜欢的编辑器是 Sublime。 但之后就是 Atom，俺也专门为它写了篇&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/nieweidong/learn-atom&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用纪要&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.getmarkman.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;马克鳗&lt;/a&gt; - MarkMan，非常强大好用的标注、测量工具。 日常工作免费版就完全可以满足，&lt;strong&gt;强烈推荐&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.wireshark.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wireshark&lt;/a&gt; - 说实话，Mac 下木有 Fiddler 挺不习惯，不过在有更强大的替代品&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sourcetreeapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SourceTree&lt;/a&gt; - 一款好用的的 Git 客户端工具，重点是支持中文:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.focusboosterapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;focus booster&lt;/a&gt; - 因为比较在意时间管理，所以这软件是俺工作时间的必备之物&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://25.io/mou/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mou&lt;/a&gt; - 我曾使用过的 mk 编辑器。原本准备去掉这个推荐，但是我想让大家了解下这个有意思的事情：&lt;a href=&quot;http://matrix.sspai.com/p/c7a3c9c0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《一年了，那个闻名遐迩的 Mou 你还记得吗？》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;mac_dev&quot;&gt;Mac 开发篇&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;暂无&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;linux&quot;&gt;Linux&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ohmyz.sh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;oh-my-zsh&lt;/a&gt; - &lt;strong&gt;&lt;em&gt;终端党&lt;/em&gt;&lt;/strong&gt; 必用的好工具，强烈推荐&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/iadanac/p/3859481.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tree&lt;/a&gt; - linux 以树状图逐级列出目录的内容&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oneapm.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;oneapm&lt;/a&gt; - 强大的运维工具，提供多种监控客户端； 有采集、分析、展示等一套功能； PS：我这用了服务器监控(免费哦)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jkbrzt/httpie&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;httpie&lt;/a&gt; - 一个 CLI 中的 HTTP 客户端 用法简单、易读&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;BrowserPlugins&quot;&gt;Chrome 浏览器插件&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Chrome&lt;/em&gt; 应用商店必定是需要翻墙的哈。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下插件都是俺多年积累淘出来的，数量不多，所以就不区分 &lt;em&gt;Github&lt;/em&gt; 插件和非 &lt;em&gt;Github&lt;/em&gt; 插件了。按照俺推荐的强度自上向下展示，且大多数插件就是偶工作和生活必备，希望能对大家有用。后续如有新发现好插件，偶也会及时更新哒。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Postman&lt;/a&gt; - &lt;em&gt;POST&lt;/em&gt; 接口调试终结者，异常强大的接口调试工具。稍稍有一点学习成本，推荐之&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSONView&lt;/a&gt; - 就是个 &lt;em&gt;JSON&lt;/em&gt; 格式的查看工具，可以很方便的展示数据，麻麻再也不用担心偶调试接口啦。PS：同类插件有不少，所以用的开心就行&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/%E4%BA%8C%E7%BB%B4%E7%A0%81qr%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/pflgjjogbmmcmfhfcnlohagkablhbpmg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;二维码生成器&lt;/a&gt; - RT。PS：这FF早已经自带生成二维码工具了，&lt;em&gt;Chrome&lt;/em&gt; 还得装插件才行，任性…&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WEB前端助手(FeHelper)&lt;/a&gt; - &lt;a href=&quot;https://www.baidufe.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度FE&lt;/a&gt;出品，功能超全的 Chrome 插件。简单列一下其功能：QR码生成器、字符串编解码工具、JSON格式化查看器、前端编码规范检测、代码压缩工具、页面取色工具、统计并分析网页加载性能等等&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/eye-dropper/hmdcmlfkchdmnmnmheododdhjedfccka&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Eye Dropper&lt;/a&gt; - 前端必备的颜色提取神器，操作简单容易上手&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vimium&lt;/a&gt; 和 &lt;em&gt;Vim&lt;/em&gt; 快捷键一样，浏览网站时不需要鼠标咯&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/page-ruler/jlpkojjdgbllmedoapgfodplfhcbnbpn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Page Ruler&lt;/a&gt; - 前端必备的尺子。计算页面元素间距、位置等信息的时候，你就知道它的好了，无脑上手，你值得拥有&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/capture-webpage-screensho/mcbpblocgmgfnpjjppndjkmgjaogfceg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FireShot&lt;/a&gt; - 可以截取整个网页、部分页面，然后支持导出为各种格式。俺微博上发的网页全景图都是靠这个插件截取的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/infinity-new-tab/dbfmnekepjoapopniengjbcpnbljalfg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Infinity&lt;/a&gt; - 好不好用有点见仁见智了，但是我个人比较喜欢。使用后会让你的 &lt;strong&gt;新标签页&lt;/strong&gt; 耳目一新，有漂亮的背景和各种常用的功能，比如地图、天气、&lt;em&gt;Gmail&lt;/em&gt;、&lt;em&gt;Chrome&lt;/em&gt;商店等等。当然，在这个插件的设置中还可以设置壁纸、动画效果等等&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Momentum&lt;/a&gt; - 同样也是 &lt;strong&gt;新标签页&lt;/strong&gt; 的插件，但是不管是视觉上(高清大图)还是功能上，都比 &lt;a href=&quot;https://chrome.google.com/webstore/detail/infinity-new-tab/dbfmnekepjoapopniengjbcpnbljalfg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Infinity&lt;/a&gt; 高大上不少，&lt;em&gt;Setting&lt;/em&gt; 里面有不少设置和快捷键，都很好上手的。&lt;a href=&quot;https://chrome.google.com/webstore/detail/infinity-new-tab/dbfmnekepjoapopniengjbcpnbljalfg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Infinity&lt;/a&gt;胜在中文和直观，&lt;a href=&quot;https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Momentum&lt;/a&gt;胜在视觉冲击。俺基本上这俩款看心情换着用，所以希望你也都能喜欢:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google翻译&lt;/a&gt; - 英文不好又得经常浏览英文资料的，一般都准备好了翻译工具。不过能在浏览器里达到划词翻译的方案就不多了，偶推荐这个Google翻译(PS：如不能翻墙，有道词典的扩展也同样支持划词翻译)。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Octotree&lt;/a&gt; - 在浏览器左侧展示 &lt;em&gt;Github&lt;/em&gt; 项目的文件导航，使目录结构一目了然，而且我们国内 &lt;em&gt;Github&lt;/em&gt; 的访问速度又不稳定，用这个工具也就很提效率了。对经常使用 &lt;em&gt;Github&lt;/em&gt; 的同学强烈推荐&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/builtwith-technology-prof/dapjbgnjinbpoindlpdmhochffioedbn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BuiltWith&lt;/a&gt; / &lt;a href=&quot;https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wappalyzer&lt;/a&gt; / &lt;a href=&quot;https://chrome.google.com/webstore/detail/chrome-sniffer-plus/fhhdlnnepfjhlhilgmeepgkhjmhhhjkh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chrome Sniffer Plus&lt;/a&gt; - 几款超强的网站分析工具，可以给出网站非常多的技术栈信息。大到 &lt;em&gt;Web Servers&lt;/em&gt;、服务端的 &lt;em&gt;Frameworks&lt;/em&gt; 或 &lt;em&gt;JS&lt;/em&gt; 框架，小到 &lt;em&gt;meta&lt;/em&gt;、编码格式甚至 &lt;em&gt;Analytics&lt;/em&gt;，非常推荐&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb/related&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adblock Plus&lt;/a&gt; - 非常非常有名的免费的过滤广告的插件。PS：广告屏蔽这个见仁见智，其实俺个人还是比较接受一些个性化推荐的广告&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/wide-github/kaalofacklcidaampbokdplbklpeldpj/related&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wide Github&lt;/a&gt; - 无聊又实用的 &lt;em&gt;Github&lt;/em&gt; 插件。无聊是因为这个插件就特么一个功能，&lt;strong&gt;加宽&lt;/strong&gt;，能让 &lt;em&gt;Github&lt;/em&gt; 页面变宽，每行展示更多的内容，尤其配合着&lt;a href=&quot;https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Octotree&lt;/a&gt;，展示效果极佳。非常推荐 &lt;em&gt;Mac&lt;/em&gt; 用户实用，因为屏幕比较不大，变宽后阅读感觉更好&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/google-mail-checker/mihcahmgecmbnbcchbopgniflfhgnkff&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gmail&lt;/a&gt; - 方便查看自己的 &lt;em&gt;Gmail&lt;/em&gt; 邮件&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/devtools-author/egfhcfdfnajldliefpdoaojgahefjhhi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DevTools Author&lt;/a&gt; - 纯装逼的插件，可以选择你的 &lt;em&gt;Chrome&lt;/em&gt; 开发者工具的主题，且支持的主题超过25种，视觉装逼控必备。设置分大概三步，官网有文字说明，&lt;em&gt;youtube&lt;/em&gt; 上的视频教程奉上(Customization With DevTools Author)[&lt;a href=&quot;https://www.youtube.com/watch?v=AUZagMLMAJc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.youtube.com/watch?v=AUZagMLMAJc&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/porter-plug/lngoojfoglemfpbeiomhgheccpdheilp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitPlug&lt;/a&gt; - 在 &lt;em&gt;Github&lt;/em&gt; 项目页中嵌入有关的图表信息，直观的展示当前项目的 &lt;em&gt;Star Trend&lt;/em&gt;，能方便看到当前这个开源项目的发起时间，火爆趋势；对比较知名的项目还有相关的 &lt;em&gt;News&lt;/em&gt; 展示&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/octolinker/jlmafbaeoofdegohdhinkhilhclaklkp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OctoLinker&lt;/a&gt; - 在 &lt;em&gt;package.json&lt;/em&gt; 或任意 &lt;em&gt;.js&lt;/em&gt; 文件中，可以方便的对 &lt;em&gt;require()&lt;/em&gt; 的 &lt;em&gt;package&lt;/em&gt; 进去点击，跳转去对应的 &lt;em&gt;Github&lt;/em&gt; 页面。PS：特么不太好表达，建议你去这个插件的概述页，里面有个十来秒的视频，看完就明白鸟&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;补充：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;翻墙代理的插件偶没使用，偶手机和电脑的翻墙都是配的 &lt;em&gt;Surge&lt;/em&gt; 无脑搞定，不过翻墙代理插件推荐&lt;a href=&quot;https://chrome.google.com/webstore/detail/proxy-switchysharp/dpplabbmogkhghncfbfdeeokoefdjegm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Proxy SwitchySharp&lt;/a&gt;，熊掌公司里大多用的都是它&lt;/li&gt;
&lt;li&gt;日常开发相关的插件就以上这些，还有几款如知乎的插件、购物插件等这类与开发效率不沾边的，俺就不这上头列了哈&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;git&quot;&gt;Git&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git 教程-廖雪峰&lt;/a&gt; - 俺有看过不少 Git 的文章，确实这个系列是最通俗易懂的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github-awards.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitAwards&lt;/a&gt; - Git 工具，可以查看 Git 排名&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flyhigher139/Git-Cheat-Sheet/blob/master/Git%20Cheat%20Sheet-Zh.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git 速查&lt;/a&gt; - 分类清晰的速查表&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rogerdudler.github.io/git-guide/index.zh.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git 简明指南&lt;/a&gt; - 入门&lt;em&gt;Github&lt;/em&gt;的简明指南，木有高深内容:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xirong/my-git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git 学习资料整理&lt;/a&gt;| |内容包括很多 Git 的相关资料，&lt;em&gt;star 1200+&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/phodal/github-roam&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub 漫游指南&lt;/a&gt; - 一篇还算不错的 Git 学习总结，就是乱了点… 我理解作者&lt;strong&gt;&lt;em&gt;漫游&lt;/em&gt;&lt;/strong&gt;的意思是漫无目的想到哪写到哪~ 看到作者为鸟达成 Git 连击的成就，也是蛮拼的:)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;servers&quot;&gt;服务端&lt;/h3&gt;

&lt;p&gt;如 &lt;em&gt;Ruby、Python、Perl&lt;/em&gt; 等相似的服务端语言的学习资源。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;暂无&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;backend&quot;&gt;数据端&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Automattic/mongoose&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mongoose&lt;/a&gt; - 让 NodeJS 更容易操作 Mongodb 数据库。  附上一篇&lt;a href=&quot;https://cnodejs.org/topic/504b4924e2b84515770103dd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mongoose 学习参考文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ux&quot;&gt;设计/交互&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;作为负责最终效果呈现的前端工程师，多少得了解些 &lt;strong&gt;设计和交互&lt;/strong&gt; 的，这也是为什么 fetool 会单独的存在这一章…当然话又说回来了，偶毕业的第一份工作是设计:)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zcool.com.cn/works/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;站酷&lt;/a&gt; - 里面好东西太多，俺当年真没少再上面淘素材&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ui.cn/list.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UI中国&lt;/a&gt; - 光听名字就知道有多高大上鸟:)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;handbook&quot;&gt;速查手册&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;RT，这篇都是些文档或者API，一般这类东西都在大家浏览器的书签内，偶这也列一下大前端常用的手册地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/joshbuchea/HEAD&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HEAD&lt;/a&gt; - 最全的 &lt;em&gt;&lt;head&gt;&lt;/head&gt;&lt;/em&gt; 列表，真心佩服这种偏执的整理能力&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cdn.code.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度CDN公共库&lt;/a&gt; - 基本常见的库都收录拉，搞 demo 的时候特方便&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codeguide.bootcss.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML 和 CSS 代码规范&lt;/a&gt; - 编写灵活、稳定、高质量的 HTML 和 CSS 代码的规范&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://linux.51yip.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux命令中文手册&lt;/a&gt; - 木有系统的好好学习 Linux，所以命令更不熟悉 真羡慕那些CLI玩的飞起的:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flyhigher139/Git-Cheat-Sheet/blob/master/Git%20Cheat%20Sheet-Zh.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git 速查&lt;/a&gt; - 分类清晰的速查表&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jquery.cuishifeng.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQueryAPI 1.11.3&lt;/a&gt; - ZeptoAPI 基本和 jQuery 一样，所以看一份就好&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.php100.com/manual/css3_0/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS3&lt;/a&gt; - CSS3 的在线手册&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.expressjs.com.cn/4x/api.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Express API&lt;/a&gt; - 中文手册:) 4.x和3.x都有&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codeigniter.org.cn/user_guide/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CI用户指南&lt;/a&gt; - 一个轻量级的 PHP 框架用户指南 推荐指数低的原因是劳资PHP比较弱，囧&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.laruence.com/manual/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yaf&lt;/a&gt; - 鸟哥(惠新宸)所写的 PHP 框架 推荐指数低的原因同上…&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;other&quot;&gt;杂七杂八&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;放些开发中较有用的杂物在这儿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;提問的智慧&lt;/a&gt; - RT，&lt;a href=&quot;https://github.com/FredWe/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简体版&lt;/a&gt;。“當你拋出一個技術問題時，最終是否能得到有用的回答，往往取決於你所提問和追問的方式。本指南將教你如何正確的提問以獲得你滿意的答案。”——摘自原文&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/soulteary/tenant-point&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;租房要点&lt;/a&gt; - 适用于北上广深杭，大城市打拼&lt;strong&gt;租房&lt;/strong&gt;确实是硬伤&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jsfront/src/blob/master/qq.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;QQ 群规&lt;/a&gt; - 突然某天，有个 QQ 群让我加群 原本我是拒绝的，但当我看完这篇 QQ 群规后… 劳资真的被感动到了，太牛逼、够专业！ 最后，我默默加群鸟:)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/github/gitignore&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;.gitignore 文件&lt;/a&gt; - 介绍不同语言项目的 gitignore 模板&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/easychen/howto-make-more-money&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序员如何优雅的挣零花钱？&lt;/a&gt; - 中肯的文章，如果读完能有些许收获，那么恭喜你&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ben174/git-draw&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git-draw&lt;/a&gt; - 黑魔法，可以修改自己 Git 上的 Contributions&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gitbook.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitBook&lt;/a&gt; - 写记录的好地方&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codebabes.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Codebabes&lt;/a&gt; - 学编程的网站。 重点是每通过一个测试，尼玛对应的妞会脱一件衣服… PS：要翻墙哦~&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://emailframe.work/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;emailframe&lt;/a&gt; - 邮件展示确实比较坑，建议有需要的收藏&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nieweidong/ReadmeSample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReadmeSample&lt;/a&gt;| |项目高大上的第一步就是&lt;strong&gt;包装&lt;/strong&gt;，所以来看看 &lt;em&gt;README&lt;/em&gt; 的书写套路吧 PS：劳资怎么这么无聊…&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cool&quot;&gt;前端炫技-&lt;em&gt;炫酷狂拽叼炸天站点&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.windows93.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;windows93&lt;/a&gt; - 模拟 Win93 桌面，思路、体验和整体效果比较有意思&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://geektyper.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GeekTyper&lt;/a&gt; - 好玩又具有 Geek 精神的网站，虽然创建的目的是个恶作剧 PS：网站需要翻墙&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://2016.makemepulse.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2016.makemepulse.com&lt;/a&gt; - 帅哭了。请使用现代浏览器打开&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://skill.phodal.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端技能栈&lt;/a&gt; - 好玩的前端技能栈展示&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mapbox.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mapbox&lt;/a&gt; - 非常叼的开源项目，有方便的 JSAPI(还有 SDK)。 不过免费版只能浅尝，流量有限。 PS：网站需要翻墙&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.clarkduvall.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clark Duvall&lt;/a&gt; - 一枚歪果仁的个人 blog，范儿叼叼的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://johnpolacek.github.io/superscrollorama/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SuperScrollorama&lt;/a&gt; - 好玩好看的动画库，链接是 SuperScrollorama 的展示页&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://matthew.wagerfield.com/parallax/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;parallax.js&lt;/a&gt; - 一个视差引擎的官网，在电脑和手机上都有很好的体验&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yusugomori.com/projects/css-sans/fonts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS字母&lt;/a&gt; - 用 CSS 实现英文字母，叼叼的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://modao.cc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;墨刀&lt;/a&gt; - 一个在线移动应用原型制作工具。 旨在帮助产品经理快速制作可在手机端展示的移动应用原型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;summary&quot;&gt;小结&lt;/h3&gt;

&lt;h5 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h5&gt;&lt;p&gt;  俺算个比较能自我总结的码农，所以偶尔喜欢写点东西做些记录或者自我熏陶陶醉一下。&lt;br&gt;  可写着写着发现&lt;em&gt;Evernote&lt;/em&gt;里面的东西太尼玛多(乱)了，于是想着把一些技术相关的资料都整理整理，都丢到&lt;em&gt;Github&lt;/em&gt;上沉淀下来。 这样Evernote就可以只需要记录些偏生活方便的，看着清爽一些…&lt;/p&gt;
&lt;p&gt;  所以，这篇记录其实只是为偶自己而写，确信以后也一直会这样~~~&lt;/p&gt;
&lt;h5 id=&quot;说说目标&quot;&gt;&lt;a href=&quot;#说说目标&quot; class=&quot;headerlink&quot; title=&quot;说说目标&quot;&gt;&lt;/a&gt;说说目标&lt;/h5&gt;&lt;p&gt;  其实与这篇记录类似的文章太多鸟，俺也不愿意成为一个单纯的收集资料，分享资料的这么个东西。&lt;br&gt;  我希望 fetool 能更生动、更个性，最好能更另类点，对于每样工具的思考和解析更多点，吐槽也必须有理有据，然后再配上劳资收集的 low 图，完美！&lt;br&gt;  &lt;strong&gt;希望通过不停的完善这篇记录，能Push劳资多了解业内的新玩具和新创意，然后围绕这些新东西，客观的再写点好东西，比如文章、资料、开源项目这些，让其他伙伴们少走弯路或学的更顺畅点儿&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以劳资对自己的要求是：这篇记录里列出的每样东西，自己都得的去了解、去尝试，然后再列出来。 能举一反三最好，如果达不到至少也能清楚的认识：列出来的这玩意对程序员有没有卵用，解决了啥痛点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;todo&quot;&gt;TODO&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;继续完善和扩充内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“备注/说明”这一栏不够犀利，希望再多加入自己的理解、点评、吐槽，让这篇记录更犀利和生动&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持导出多种格式，如&lt;em&gt;.pdf&lt;/em&gt;、&lt;em&gt;.epub&lt;/em&gt;、&lt;em&gt;.mobi&lt;/em&gt;等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;后续看看如果有必要，可以单独搞个页面，优化下阅读和展示效果&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;以下是 &lt;a href=&quot;http://weibo.com/jayli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@拔赤&lt;/a&gt; 总结的前端技能图：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nieweidong/fetool/master/img/fe.jpg&quot; alt=&quot;拔赤总结的前端技能图&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇文章记录了一枚程序猿的百宝箱。PS：每个分类的都按照推荐的先后排列。&lt;/p&gt;
&lt;p&gt;主要内容是一些使用过的库、工具、套路或关注的前端组织等等，反正用 &lt;strong&gt;前端瑞士军刀&lt;/strong&gt; 来总结这篇文章再合适不过鸟。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端工具" scheme="http://hangweiping.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>前端工程构建乱弹</title>
    <link href="http://hangweiping.github.io/2016/01/02/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA%E4%B9%B1%E5%BC%B9/"/>
    <id>http://hangweiping.github.io/2016/01/02/前端工程构建乱弹/</id>
    <published>2016-01-02T10:25:14.000Z</published>
    <updated>2016-06-23T03:34:55.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;webpack是一个比browserify功能更强大的模块加载器。既然是模块加载器，当然就包括对各种各样模块的加载，包括SASS/LESS/CoffeeScript/png/jpg等，以及webpack对于node_module模块加载已经非常完善了。&lt;br&gt;那么，为什么还需要bower呢？由于前端开发很多第三方模块并非都以标准npm包形式存在，有一些非主流，或者各种原因没放到npm上的包，可以在bower找到。&lt;br&gt;基于这个原因，使用webpack时候，凭着能用npm就用（依赖加载更加方便，功能更加强大），不能用的时候使用bower声明第三方模块依赖，然后使用js/css加载方式进行加载。&lt;br&gt;值得一提的是，webpack官方也提供非常便利的方式加载bower模块（模块的主要文件，被声明在bower.json main属性里面）,通过配置后就可以很方便地沿用require来加载bower模块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;按需决定是否需要bower&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yeamon帮助你快速的开展一个项目工程，提供最佳实践和工具，来让你保持高效率编码。&lt;/p&gt;
&lt;p&gt;他们自己提供了一个构建生态系统，主要通过‘yo’这个命令来构建一个完整的项目或者项目的一部分。&lt;/p&gt;
&lt;p&gt;通过官方的生成器，他们建立了一个Yeoman的工作流，这个流是由一个强大的,固定的客户端组建，包含工具和框架帮助开发者快速建立牛逼的web应用。他们尽量提供了开发者所需的东西。&lt;/p&gt;
&lt;p&gt;作为良好文档和深入思考构建过程的思想者，Yeoman包含了检测（静态检测）、测试以及压缩等等一系列工具，让开发者能够更加专注于思考解决方案。&lt;/p&gt;
&lt;p&gt;Yeoman其实是3个工具的总和：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;yo — 脚手架，自动生成工具&lt;/li&gt;
&lt;li&gt;Grunt、gulp — 构建工具 （最初只有grunt，后面gulp火了添加进来的）&lt;/li&gt;
&lt;li&gt;Bower、npm — 包管理工具 （原来是 bower，后面添加了npm）  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;gulp是工具链，可以配合各种插件做js压缩，css压缩，less编译等工作&lt;br&gt;webpack是文件打包工具，可以把项目的各种js文、css文件等打包合并成一个或多个文件&lt;br&gt;bower是包管理器，用来管理你项目里的那些外部依赖的。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的三个是各自独立发展和运行的，混合后效果就不一样，主要在于yo，相当于一个粘合剂一样，把grunt这些工具粘合在一起。&lt;/p&gt;
&lt;p&gt;我们可以看到的是，几个简单的命令，Yeoman就帮助我们建立一个项目，而且项目已经填充了不少代码，我们可以选择一个自己喜欢的，来沿着别人的已经搭建好的构架来编写业务即可，这对很多新手来说是非常好的一种提高方式，所以建议大家选star多的 —代码风格好，文件夹规划清晰，js的模块拆分细致合理。  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;bower已經過時了，npm足矣。如果用WebPack就不需要Gulp和Browserify，用Redux就不需要其他Flux框架，精簡下React+Redux+WebPack。另外ES6和Babel其實少不了要了解下的.&lt;/p&gt;
&lt;p&gt;一个package同时存在多个版本了，下面是 @sheerun 给出的解决方案（修改项目根目录的bower.json文件内的dependencies即可）：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;font-awesome&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~4.2.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;font-awesome-old&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;font-awesome#3.2.1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;后来又仔细的查看了bower官方文档，发现里面已经有了对应的安装方法，可能是我以前没注意到， 官方安装方法(英文) ，下面我把常用的几种安装方法说一下：&lt;br&gt;&lt;figure class=&quot;highlight fsharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt; 基于bower.json安装&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#基于bower.json安装&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bower install &lt;span class=&quot;meta&quot;&gt;[&amp;lt;options&amp;gt;]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt; 安装指定的package， 比如一次性安装jquery, bootstrap, underscore：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# jquery, bootstrap, underscore&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bower install jquery bootstrap underscore &lt;span class=&quot;meta&quot;&gt;[&amp;lt;options&amp;gt;]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt; 安装指定版本的package, 比如安装jquery v1&lt;span class=&quot;number&quot;&gt;.9&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#安装jquery v1&lt;span class=&quot;number&quot;&gt;.9&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bower install jquery#&lt;span class=&quot;number&quot;&gt;1.9&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;[&amp;lt;options&amp;gt;]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4.&lt;/span&gt; 同时安装一个package的不同版本（多版本共存）, 比如安装jquery v1&lt;span class=&quot;number&quot;&gt;.7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;，并且安装v1&lt;span class=&quot;number&quot;&gt;.9&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;以及最新版本的jquery（目前是&lt;span class=&quot;number&quot;&gt;2.1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;）， 像下面这样安装完成后，你的bower_components目录下就会同时存在jquery-older目录(&lt;span class=&quot;number&quot;&gt;1.7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;)， jquery-old目录（&lt;span class=&quot;number&quot;&gt;1.9&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;）, jquery目录（最新版）。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 安装jquery v1&lt;span class=&quot;number&quot;&gt;.7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bower install jquery-older=juqery#&lt;span class=&quot;number&quot;&gt;1.7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;[&amp;lt;options&amp;gt;]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 安装jquery v1&lt;span class=&quot;number&quot;&gt;.9&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bower install jquery-old=juqery#&lt;span class=&quot;number&quot;&gt;1.9&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;[&amp;lt;options&amp;gt;]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 安装最新版jquery&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bower install jquery &lt;span class=&quot;meta&quot;&gt;[&amp;lt;options&amp;gt;]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的脚本中的安装选项&lt;options&gt;有以下几个可选项( 官方说明 )：&lt;/options&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;F, --force-latest &lt;span class=&quot;comment&quot;&gt;# 安装时若有冲突则强制安装最新版；&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;p, --production &lt;span class=&quot;comment&quot;&gt;# 不要安装开发依赖的package（一般用于生产环境）；&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;S, --save &lt;span class=&quot;comment&quot;&gt;# 安装完成后将此package记录在bower.json文件的dependencies项中；&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;D, --save-dev &lt;span class=&quot;comment&quot;&gt;# 安装完成后将此package记录在bower.json文件的devDependencies项中(一般用于开发环境)；&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;webpack可以理解为专门针对前端代码打包的集成方案, gulp可以做到webpack做的, 但webpack做不到gulp能做的. webpack只是针对前端代码的, 例如前端代码的合并,压缩, 把ES6代码转成ES3代码, sass转css等.&lt;br&gt;gulp 还可以对node 的服务器端的程序做处理,例如批量生成文件, 运行启动服务等等.&lt;br&gt;至于选择哪个一般看个人喜好和项目要求, 一般react的项目用webpack比较多,其他的项目用gulp比较多.&lt;br&gt;webpack是静态资源打包工具，grunt和gulp是自动化构建工具，grunt和gulp二选一就可以，用gulp的比较多，gulp可以和webpack搭配使用。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;webpack是一个比browserify功能更强大的模块加载器。既然是模块加载器，当然就包括对各种各样模块的加载，包括SASS/LESS/CoffeeScript/png/jpg等，以及webpack对于node_module模块加载已经非常完善了。&lt;br&gt;那么，为什么还需要bower呢？由于前端开发很多第三方模块并非都以标准npm包形式存在，有一些非主流，或者各种原因没放到npm上的包，可以在bower找到。&lt;br&gt;基于这个原因，使用webpack时候，凭着能用npm就用（依赖加载更加方便，功能更加强大），不能用的时候使用bower声明第三方模块依赖，然后使用js/css加载方式进行加载。&lt;br&gt;值得一提的是，webpack官方也提供非常便利的方式加载bower模块（模块的主要文件，被声明在bower.json main属性里面）,通过配置后就可以很方便地沿用require来加载bower模块。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://hangweiping.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的命名空间</title>
    <link href="http://hangweiping.github.io/2015/12/08/JavaScript%E4%B8%AD%E7%9A%84%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    <id>http://hangweiping.github.io/2015/12/08/JavaScript中的命名空间/</id>
    <published>2015-12-08T12:26:23.000Z</published>
    <updated>2016-08-30T10:21:26.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;why&quot;&gt;&lt;a href=&quot;#why&quot; class=&quot;headerlink&quot; title=&quot;why&quot;&gt;&lt;/a&gt;why&lt;/h2&gt;&lt;p&gt;在JavaScript中全局变量经常会引起命名冲突，甚至有时侯重写变量也不是按照你想像中的顺序来的，可以看看下面的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sayHello = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello var&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHello&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello function&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sayHello();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;最终的输出为&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; &amp;quot;Hello var&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为什么会这样，根据 &lt;a href=&quot;http://stackoverflow.com/questions/23889317/explain-this-javascript-name-clash&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StackOverFlow&lt;/a&gt;  的解释，实际上JavaScript的是按如下顺序解析的。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHello&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello &#39;&lt;/span&gt; + name + &lt;span class=&quot;string&quot;&gt;&#39; from function&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sayHello = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello &#39;&lt;/span&gt; + name + &lt;span class=&quot;string&quot;&gt;&#39; from var&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;u&gt;不带var&lt;/u&gt;的function声明&lt;u&gt;被提前解析&lt;/u&gt;了，因此现代的JS写法建议你始终使用前置var声明所有变量；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;避免全局变量名冲突的最好办法还是创建命名空间&lt;/strong&gt;，下面是在JS中合建命名空间的几种常用方法。&lt;/p&gt;
&lt;p&gt;全局变量应该由有系统范围相关性的对象们保留，并且它们的命名应该避免含糊并尽量减少命名冲突的风险。在实践中，这意味着你应该避免创建全局对象，除非它们是绝对必须的。&lt;/p&gt;
&lt;p&gt;传统方法告诉我们，最好的消除全局策略是创建少数作为潜在模块和子系统的实际命名空间的全局对象。&lt;/p&gt;
&lt;h2 id=&quot;静态命名空间&quot;&gt;&lt;a href=&quot;#静态命名空间&quot; class=&quot;headerlink&quot; title=&quot;静态命名空间&quot;&gt;&lt;/a&gt;静态命名空间&lt;/h2&gt;&lt;p&gt;我用&lt;code&gt;静态命名空间&lt;/code&gt;作为那些命名空间标签实际上硬编码的解决方案的涵盖性术语。是的，你可以将一个命名空间重新分配给另一个，不过新的命名空间将会引用和旧的那一个同样的对象。&lt;/p&gt;
&lt;h3 id=&quot;1-通过直接分配&quot;&gt;&lt;a href=&quot;#1-通过直接分配&quot; class=&quot;headerlink&quot; title=&quot;1.通过直接分配&quot;&gt;&lt;/a&gt;1.通过直接分配&lt;/h3&gt;&lt;p&gt;最基础的方法。这样非常冗长，并且如果你还想重命名这些命名空间，你就有得活儿干了。不过它是安全和清楚明白的。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myApp = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;myApp.id = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;myApp.next = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; myApp.id++;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;myApp.reset = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.id = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.console &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.next(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.next(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.reset(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.next()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;); &lt;span class=&quot;comment&quot;&gt;//0, 1, undefined, 0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也可以通过使用&lt;code&gt;this&lt;/code&gt;引用兄弟属性来使将来的维护更轻松一些，不过这有一点冒险因为没有什么能阻止你的那些命名空间里的方法被重新分配。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myApp = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;myApp.id = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;myApp.next = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.id++;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;myApp.reset = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.id = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;myApp.next(); &lt;span class=&quot;comment&quot;&gt;//0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;myApp.next(); &lt;span class=&quot;comment&quot;&gt;//1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; getNextId = myApp.next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;getNextId(); &lt;span class=&quot;comment&quot;&gt;//NaN whoops!&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-使用对象字面量&quot;&gt;&lt;a href=&quot;#2-使用对象字面量&quot; class=&quot;headerlink&quot; title=&quot;2.使用对象字面量&quot;&gt;&lt;/a&gt;2.使用对象字面量&lt;/h3&gt;&lt;p&gt;现在我们只需要引用命名空间名一次，因此之后改变名字更简单了一些（假设你还没反复引用这个命名空间）。仍有一个危险是&lt;code&gt;this&lt;/code&gt;的值可能会抛出一个『惊喜』 - 不过假设在一个对象字面结构里定义的对象不会被重新分配相对安全一点。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myApp = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    id: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    next: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.id++;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    reset: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.id = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.console &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.next(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.next(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.reset(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.next()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;) &lt;span class=&quot;comment&quot;&gt;//0, 1, undefined, 0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-模块模式&quot;&gt;&lt;a href=&quot;#3-模块模式&quot; class=&quot;headerlink&quot; title=&quot;3.模块模式&quot;&gt;&lt;/a&gt;3.模块模式&lt;/h3&gt;&lt;p&gt;我发现自己最近用&lt;code&gt;模块模式&lt;/code&gt;更多。逻辑被一个方法包装从全局域隔离开了（通常是自调用的），它返回一个代表这个模块公开接口的对象。通过立即调用这个方法并分配结果给一个命名空间变量，我们就锁住了这个命名变量中模块的 API。此外，任何没有包括在返回值中的变量将永远保持私有，只对引用他们的公开方法可见。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myApp = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        next: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; id++;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        reset: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            id = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)();   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.console &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.next(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.next(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.reset(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.next()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;) &lt;span class=&quot;comment&quot;&gt;//0, 1, undefined, 0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上对象字面量例子，命名空间名字可以轻易更换，不过还有额外优势：对象字面量是四班的 - 它全是关于属性分配，没有支持逻辑的空间。此外，所有属性必须被初始化，并且属性值无法轻易跨对象引用（因此，比如，内部闭包就不可能使用了）。模块模式没有任何上述约束，并且给我们额外的隐私福利。&lt;/p&gt;
&lt;h2 id=&quot;动态命名空间&quot;&gt;&lt;a href=&quot;#动态命名空间&quot; class=&quot;headerlink&quot; title=&quot;动态命名空间&quot;&gt;&lt;/a&gt;动态命名空间&lt;/h2&gt;&lt;p&gt;我们也可以将这一节称为&lt;code&gt;命名空间注入&lt;/code&gt;。命名空间由一个直接引用方法包装&lt;code&gt;内部&lt;/code&gt;的代理代表 - 这意味着我们不再需要打包分配给命名空间的返回值。这让命名空间定义变得更灵活并且让拥有多个存在于独立命名空间中（或者甚至在全局上下文中）的模块的独立实例。动态命名空间支持模块模式的全部特征并附加直观和可读性强的优势。&lt;/p&gt;
&lt;h3 id=&quot;4-提供命名空间参数&quot;&gt;&lt;a href=&quot;#4-提供命名空间参数&quot; class=&quot;headerlink&quot; title=&quot;4.提供命名空间参数&quot;&gt;&lt;/a&gt;4.提供命名空间参数&lt;/h3&gt;&lt;p&gt;在这里我们只是将命名空间作为参数传给自调用方法。变量&lt;code&gt;id&lt;/code&gt;是私有的，因为他并没有被分配给&lt;code&gt;context&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myApp = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;context&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    context.next = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; id++;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    context.reset = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        id = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)(myApp);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.console &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.next(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.next(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.reset(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.next()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;) &lt;span class=&quot;comment&quot;&gt;//0, 1, undefined, 0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们甚至可以把&lt;code&gt;context&lt;/code&gt;设置给全局对象（通过一个字的改变！）。这是库主们的巨大财富 - 他们可以将他们的特性包装在一个自调用函数中，然后让用户来决定它们是不是全局的（John Resig 在他写 JQuery 时就是一个这个理论的早期采用者）。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myApp = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;context&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    context.next = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; id++;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    context.reset = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        id = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.console &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    next(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    next(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    reset(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    next()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;) &lt;span class=&quot;comment&quot;&gt;//0, 1, undefined, 0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;5-用this作为命名空间代理&quot;&gt;&lt;a href=&quot;#5-用this作为命名空间代理&quot; class=&quot;headerlink&quot; title=&quot;5.用this作为命名空间代理&quot;&gt;&lt;/a&gt;5.用&lt;code&gt;this&lt;/code&gt;作为命名空间代理&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.brothercake.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;James Edwads&lt;/a&gt; 最近发布的一篇文章激起了我的兴趣。&lt;a href=&quot;http://blogs.sitepoint.com/2010/11/30/my-favorite-javascript-design-pattern/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《My Favorite JavaScript Design Patter》&lt;/a&gt; 显然被很多评论者误解了，他们认为他可能也是借助于模块模式。这篇文章宣传了多种技术（可能导致了读者的迷惑），但是在它的核心部分是一点我已经修改并呈现为一个命名空间工具的很天才的东西。&lt;/p&gt;
&lt;p&gt;这个模式的美就在于它仅仅是按照这个语言被设计的方式使用 - 不多不少、不投机也不取巧。此外因为命名空间是通过&lt;code&gt;this&lt;/code&gt;关键字（它在给定的执行上下文中是不变的）注入的，它不可能被意外修改。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myApp = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.next = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; id++;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.reset = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        id = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;).apply(myApp);    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.console &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.next(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.next(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.reset(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    myApp.next()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;); &lt;span class=&quot;comment&quot;&gt;//0, 1, undefined, 0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更棒的是，&lt;code&gt;apply&lt;/code&gt;（以及&lt;code&gt;call&lt;/code&gt;） API 提供了与上下文和参数天然的隔离 - 因此给模块创建者传递附加参数非常干净。下面的例子表明了这一点，并且展示了如何独立于多个命名空间来运行模块。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subsys1 = &amp;#123;&amp;#125;, subsys2 = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nextIdMod = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;startId&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id = startId || &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.next = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; id++;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.reset = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        id = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;nextIdMod.call(subsys1);    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;nextIdMod.call(subsys2,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.console &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    subsys1.next(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    subsys1.next(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    subsys2.next(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    subsys1.reset(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    subsys2.next(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    subsys1.next()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;) &lt;span class=&quot;comment&quot;&gt;//0, 1, 1000, undefined, 1001, 0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然如果我们如果我们需要一个全局 id 生成器，非常简单……&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;nextIdMod();    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.console &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    next(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    next(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    reset(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    next()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;) &lt;span class=&quot;comment&quot;&gt;//0, 1, undefined, 0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个我们作为例子使用的 id 生成器工具并没有表现出这个模式的全部潜力。通过包裹一整个库和使用&lt;code&gt;this&lt;/code&gt;关键字作为命名空间的替身，我们使得用户在任何他们选择的上下文中运行这个库很轻松（包括全局上下文）。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//library code&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; protoQueryMooJo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//everything&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//user code&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; thirdParty = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;protoQueryMooJo.apply(thirdParty);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;其他的考虑&quot;&gt;&lt;a href=&quot;#其他的考虑&quot; class=&quot;headerlink&quot; title=&quot;其他的考虑&quot;&gt;&lt;/a&gt;其他的考虑&lt;/h2&gt;&lt;p&gt;我希望避免命名空间嵌套。它们很难追踪（对人和电脑都是）并且它们会让你的代码因为一些乱七八糟的东西变得很多。如 &lt;a href=&quot;http://michaux.ca/articles/javascript-namespacing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Peter Michaux&lt;/a&gt; 指出的，深度嵌套的命名空间可能是那些视图重新创建他们熟悉和热爱的长包链的老派 Java 开发者的遗产。&lt;/p&gt;
&lt;p&gt;通过 .js 文件来固定一个单独的命名空间也是可以的（虽然只能通过命名空间注入或者直接分配每一个变量），不过你应该对依赖谨慎些。此外将命名空间绑定到文件上可以帮助读者更轻易弄清整个代码。&lt;/p&gt;
&lt;p&gt;因为 JavaScript 并没有正式的命名空间结构，所以有很多自然形成的方法。这个调查只详细说明了其中的一部分，可能有更好的技术我没有发现。我很乐意知道它们。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;why&quot;&gt;&lt;a href=&quot;#why&quot; class=&quot;headerlink&quot; title=&quot;why&quot;&gt;&lt;/a&gt;why&lt;/h2&gt;&lt;p&gt;在JavaScript中全局变量经常会引起命名冲突，甚至有时侯重写变量也不是按照你想像中的顺序来的，可以看看下面的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sayHello = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello var&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHello&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello function&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sayHello();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JS" scheme="http://hangweiping.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>《精通JavaScript》读书笔记</title>
    <link href="http://hangweiping.github.io/2015/12/03/%E3%80%8A%E7%B2%BE%E9%80%9AJavaScript%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://hangweiping.github.io/2015/12/03/《精通JavaScript》读书笔记/</id>
    <published>2015-12-03T09:56:43.000Z</published>
    <updated>2016-08-30T09:37:45.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-使用构造函数属性来判断对象的类型&quot;&gt;&lt;a href=&quot;#1-使用构造函数属性来判断对象的类型&quot; class=&quot;headerlink&quot; title=&quot;1.使用构造函数属性来判断对象的类型&quot;&gt;&lt;/a&gt;1.使用构造函数属性来判断对象的类型&lt;/h2&gt;&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//检查数字实际上是否为字符串&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (num.constructor == &lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//如果是，则把字符串解析为整数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    num = parseInt(num);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//检查字符串实际上是否为数组&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;.constructor == &lt;span class=&quot;keyword&quot;&gt;Array&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//如果是，则根据数组用逗号归并出字符串来&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;2-变量的类型检查&quot;&gt;&lt;a href=&quot;#2-变量的类型检查&quot; class=&quot;headerlink&quot; title=&quot;2.变量的类型检查&quot;&gt;&lt;/a&gt;2.变量的类型检查&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量&lt;/th&gt;
&lt;th&gt;typeof变量&lt;/th&gt;
&lt;th&gt;变量.构造函数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;{an:”object”}&lt;/td&gt;
&lt;td&gt;object&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[“an”,”array”]&lt;/td&gt;
&lt;td&gt;object&lt;/td&gt;
&lt;td&gt;Array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;function(){}&lt;/td&gt;
&lt;td&gt;function&lt;/td&gt;
&lt;td&gt;Function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;“a string”&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;55&lt;/td&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;new User()&lt;/td&gt;
&lt;td&gt;object&lt;/td&gt;
&lt;td&gt;User&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;3-用闭包实现的函数Curry化&quot;&gt;&lt;a href=&quot;#3-用闭包实现的函数Curry化&quot; class=&quot;headerlink&quot; title=&quot;3. 用闭包实现的函数Curry化&quot;&gt;&lt;/a&gt;3. 用闭包实现的函数Curry化&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//数字求和函数的函数生成器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addGenerator&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//返回一个简单的函数，求两个数字的和，其中第一个数字来自生成器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;toAdd&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num + toAdd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//addFive现在包含一个接受单一参数的函数，这个函数能求得5加上该参数的和&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; addFive = addGenerator(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(addFive(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;));&lt;span class=&quot;comment&quot;&gt;//输出9&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;4-使用匿名函数来隐藏全局作用域变量&quot;&gt;&lt;a href=&quot;#4-使用匿名函数来隐藏全局作用域变量&quot; class=&quot;headerlink&quot; title=&quot;4.使用匿名函数来隐藏全局作用域变量&quot;&gt;&lt;/a&gt;4.使用匿名函数来隐藏全局作用域变量&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//变量原本应该是全局的&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; msg = &lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//将一个新函数绑定到全局对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onunload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//这个函数使用了隐藏的msg&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        alert(msg);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//关闭匿名函数并执行&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;5-使用匿名函数来激发出创建多个使用闭包的函数所需的作用域&quot;&gt;&lt;a href=&quot;#5-使用匿名函数来激发出创建多个使用闭包的函数所需的作用域&quot; class=&quot;headerlink&quot; title=&quot;5.使用匿名函数来激发出创建多个使用闭包的函数所需的作用域&quot;&gt;&lt;/a&gt;5.使用匿名函数来激发出创建多个使用闭包的函数所需的作用域&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//一个ID为main的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//用于绑定一个数组&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; items = [&lt;span class=&quot;string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;keypress&quot;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//遍历数组的每个成员&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; items.length; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//使用一个自执行的匿名函数来激发出作用域&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//记住在这个作用域内的值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; item = items[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        obj[&lt;span class=&quot;string&quot;&gt;&quot;on&quot;&lt;/span&gt; + item] = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            /item引用本&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;循环上下文所属作用域中的一个父变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            alert(&lt;span class=&quot;string&quot;&gt;&quot;alert&quot;&lt;/span&gt; + item);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;6-在上下文对象内使用函数并将其上下文对象切换为另一个变量&quot;&gt;&lt;a href=&quot;#6-在上下文对象内使用函数并将其上下文对象切换为另一个变量&quot; class=&quot;headerlink&quot; title=&quot;6.在上下文对象内使用函数并将其上下文对象切换为另一个变量&quot;&gt;&lt;/a&gt;6.在上下文对象内使用函数并将其上下文对象切换为另一个变量&lt;/h2&gt;&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var obj = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    yes: function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;==obj&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.val = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    no: function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.val = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;我们发现&lt;span class=&quot;string&quot;&gt;&#39;obj&#39;&lt;/span&gt;对象没有val属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(obj.val == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;执行&lt;span class=&quot;literal&quot;&gt;yes&lt;/span&gt;函数后，将val属性与&lt;span class=&quot;string&quot;&gt;&#39;obj&#39;&lt;/span&gt;对象关联起来&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;obj.&lt;span class=&quot;literal&quot;&gt;yes&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(obj.val == &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;不过现在把&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;no&lt;/span&gt;指向obj.&lt;span class=&quot;literal&quot;&gt;no&lt;/span&gt;并执行之&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;no&lt;/span&gt; = obj.&lt;span class=&quot;literal&quot;&gt;no&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;no&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;结果是obj对象的val不变（因为&lt;span class=&quot;literal&quot;&gt;no&lt;/span&gt;的上下文已经变为&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;对象了）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(obj.val == &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;而&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;的val属性被更新了&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.val == &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;把obj.no变量的上下文对象切换为window变量时，代码变得不好理解了。幸运的是，JavaScript提供了一套方法来让这一过程变得更好理解和实现。即call和apply两个方法。&lt;/p&gt;
&lt;h2 id=&quot;7-修改函数上下文对象的例子&quot;&gt;&lt;a href=&quot;#7-修改函数上下文对象的例子&quot; class=&quot;headerlink&quot; title=&quot;7.修改函数上下文对象的例子&quot;&gt;&lt;/a&gt;7.修改函数上下文对象的例子&lt;/h2&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//一个设置上下文对象颜色样式的简单函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;changeColor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;color&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.style.color = &lt;span class=&quot;built_in&quot;&gt;color&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在window对象中调用此函数会失败，因为window对象没有style属性&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;changeColor(&lt;span class=&quot;string&quot;&gt;&quot;white&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//找出ID为main的文档&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; main = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//使用call方法将它的颜色置为黑色&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;changeColor.call(main, &lt;span class=&quot;string&quot;&gt;&quot;black&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置body元素颜色的函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setBodyColor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//apply方法将上下文对象设置为第一个参数指定的body元素，第二个参数是传给函数的所有参数的数组&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    changeColor.apply(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body, &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//将body的背景色置为黑色&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;setBodyColor(&lt;span class=&quot;string&quot;&gt;&quot;black&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;8-使用constructor属性的例子&quot;&gt;&lt;a href=&quot;#8-使用constructor属性的例子&quot; class=&quot;headerlink&quot; title=&quot;8.使用constructor属性的例子&quot;&gt;&lt;/a&gt;8.使用constructor属性的例子&lt;/h2&gt;&lt;figure class=&quot;highlight delphi&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建一个新的简单的User对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建一个User对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;me&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//还是创建一个新的User对象（用前一个对象的constructor引用来创建）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; you = new me.&lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//你可以发现这两个对象的constructor实质上是一致的&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(me.&lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt; == you.&lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;9-对象的方法通过prototype对象添加的例子&quot;&gt;&lt;a href=&quot;#9-对象的方法通过prototype对象添加的例子&quot; class=&quot;headerlink&quot; title=&quot;9.对象的方法通过prototype对象添加的例子&quot;&gt;&lt;/a&gt;9.对象的方法通过prototype对象添加的例子&lt;/h2&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建一个新的User构造函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name, age)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//将一个新的函数添加到此对象的prototype对象中&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;User.prototype.getName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//并再给此prototype对象添加一个函数，注意其上下文是实例化后的对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;User.prototype.getAge = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//实例化一个新的User对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; user = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; User(&lt;span class=&quot;string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//可以看到我们添加的这两个属性都在刚才创建的对象中，并且有合适的上下文&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(user.getName == &lt;span class=&quot;string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(user.getAge == &lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;10-私有方法&quot;&gt;&lt;a href=&quot;#10-私有方法&quot; class=&quot;headerlink&quot; title=&quot;10.私有方法&quot;&gt;&lt;/a&gt;10.私有方法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;私有方法和私有变量只允许其他的私有方法、私有变量和特权方法访问。这种方法可以定义一些只让对象内部访问，而外部访问不到的代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//表示教室的一个对象构造函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Classroom&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(students, teacher)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//用于显示所有班上学生的私有方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;disp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.names.join(&lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//将班级数据存入公共对象属性中&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.students = students;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.teacher = teacher;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//调用私有方法来显示错误&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    disp();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建一个新的classroom对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Classroom([&lt;span class=&quot;string&quot;&gt;&quot;John&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&quot;Mr. Smith&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//调用disp方法会失败，因为它不是该对象的公共属性&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;c.disp();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;11-特权方法&quot;&gt;&lt;a href=&quot;#11-特权方法&quot; class=&quot;headerlink&quot; title=&quot;11.特权方法&quot;&gt;&lt;/a&gt;11.特权方法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;特权方法用来指代哪些在查看并处理私有变量的同时允许用户以公共方法的方式访问的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建一个新的User对象构造函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, age&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//尝试算出用户出生的年份&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; year = (&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()).getFullYear() - age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//创建一个新的特权方法，能够访问year变量，同时自身属于公共可访问的&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getYearBorn = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; year;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建User对象的一个新示例&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; user = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; User(&lt;span class=&quot;string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//验证返回的年份正确&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(user.getYearBorn() == &lt;span class=&quot;number&quot;&gt;1962&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//注意我们无法访问该对象私有的年份属性&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(user.year == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;12-静态方法&quot;&gt;&lt;a href=&quot;#12-静态方法&quot; class=&quot;headerlink&quot; title=&quot;12.静态方法&quot;&gt;&lt;/a&gt;12.静态方法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;静态方法的实质与任何其他一般函数没有什么不同，最主要的区别在于，其他函数是以对象的静态属性形式存在的。作为一个属性，它们不能在该对象的实例的上下文中访问，而只属于主对象本身的那个上下文中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//添加到一个User对象的静态方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;User.clnoeUser = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//创建并返回一个新的用户&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; User(user.getName(), user.getAge());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;13-原型式继承的例子&quot;&gt;&lt;a href=&quot;#13-原型式继承的例子&quot; class=&quot;headerlink&quot; title=&quot;13.原型式继承的例子&quot;&gt;&lt;/a&gt;13.原型式继承的例子&lt;/h2&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//为Person对象创建一个构造函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//给Person对象添加一个新方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Person.prototype.getName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建一个新的User对象的构造函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name, password)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//注意，这里并没有支持方法的重载/集成，也就是说，不能调用父类的构造函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.password = password;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//User对象继承所有Person对象的方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;User.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//我们添加一个新方法到User对象中&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;User.prototype.getPassword = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.password;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;14-JavaScript中的命名空间化及其实现&quot;&gt;&lt;a href=&quot;#14-JavaScript中的命名空间化及其实现&quot; class=&quot;headerlink&quot; title=&quot;14.JavaScript中的命名空间化及其实现&quot;&gt;&lt;/a&gt;14.JavaScript中的命名空间化及其实现&lt;/h2&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建一个默认的、全局的命名空间&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; YAHOO = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//使用对象设置一些子命名空间&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;YAHOO.util = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建最终命名空间，它包含一个值为函数的属性&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;YAHOO.util.Event = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    addEventListener: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//调用某个具体命名空间中的函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;YAHOO.util.Event.addEventListener();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-使用构造函数属性来判断对象的类型&quot;&gt;&lt;a href=&quot;#1-使用构造函数属性来判断对象的类型&quot; class=&quot;headerlink&quot; title=&quot;1.使用构造函数属性来判断对象的类型&quot;&gt;&lt;/a&gt;1.使用构造函数属性来判断对象的类型&lt;/h2&gt;&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//检查数字实际上是否为字符串&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (num.constructor == &lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//如果是，则把字符串解析为整数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    num = parseInt(num);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//检查字符串实际上是否为数组&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;.constructor == &lt;span class=&quot;keyword&quot;&gt;Array&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//如果是，则根据数组用逗号归并出字符串来&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JS" scheme="http://hangweiping.github.io/tags/JS/"/>
    
  </entry>
  
</feed>
