<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[大前端工具集]]></title>
      <url>http://yoursite.com/2016/04/01/%E5%A4%A7%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7%E9%9B%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本篇文章记录了一枚程序猿的百宝箱。PS：每个分类的都按照推荐的先后排列。</p>
<p>主要内容是一些使用过的库、工具、套路或关注的前端组织等等，反正用 <strong>前端瑞士军刀</strong> 来总结这篇文章再合适不过鸟。</p>
</blockquote>
 <a id="more"></a>
<h4 id="您可以通过以下方式联系到我："><a href="#您可以通过以下方式联系到我：" class="headerlink" title="您可以通过以下方式联系到我："></a>您可以通过以下方式联系到我：</h4><ul>
<li>微博 <a href="http://weibo.com/darrencode" title="Darren 聂微东" target="_blank" rel="external">@聂微东</a></li>
<li>个人 Blog <a href="http://www.fefork.com/" title="一枚 Web 技术领域的手艺人" target="_blank" rel="external">fefork.com</a></li>
<li>博客园 <a href="http://www.cnblogs.com/Darren_code/" title="关注前端技术" target="_blank" rel="external">犀利的东哥</a></li>
<li>QQ 群 <strong>214199415</strong>，群名<strong>前端 Club</strong>。PS：入群务必请提供 <strong>有内容的 git 或 blog 地址</strong>，否则进不去哈:)</li>
</ul>
<hr>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#blogs">前端组织/前端博客</a></li>
<li><a href="#blog_build">博客搭建</a></li>
<li><a href="#html">HTML</a></li>
<li><a href="#css">CSS</a></li>
<li><a href="#javascript">浏览端 JS</a></li>
<li><a href="#project_build">Project Build</a></li>
<li><a href="#node_package">Node Package</a></li>
<li><a href="#node_project">Node Project</a></li>
<li><a href="#read">精选阅读</a><ul>
<li><a href="#fedev">前端技术</a></li>
<li><a href="#node_read">Node 学习资料</a></li>
<li><a href="#interview">前端面试</a></li>
<li><a href="#otherdev">其他技术</a></li>
</ul>
</li>
<li><a href="#tools">工具/软件</a><ul>
<li><a href="#web">Web</a></li>
<li><a href="#app">APP</a></li>
<li><a href="#mac_soft">Mac 软件篇</a></li>
<li><a href="#mac_dev">Mac 开发篇</a></li>
<li><a href="#linux">Linux</a></li>
</ul>
</li>
<li><a href="#BrowserPlugins">Chrome Plugins</a></li>
<li><a href="#git">Git</a></li>
<li><a href="#servers">服务端</a></li>
<li><a href="#backend">数据端</a></li>
<li><a href="#ux">设计/交互</a></li>
<li><a href="#handbook">速查手册</a></li>
<li><a href="#other">杂七杂八</a></li>
<li><a href="#cool">前端炫技-炫酷狂拽叼炸天的 Web</a></li>
<li><a href="#summary">小结</a></li>
<li><a href="#todo">TODO</a></li>
</ul>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="blogs">前端组织/前端博客</h3>

<blockquote>
<p>虽混过外企俩家，但劳资英文这项的技能点还是灰色的…so，俺关注的站点主要以中文为主</p>
</blockquote>
<ul>
<li><p><a href="https://github.com" target="_blank" rel="external">GitHub</a> - 没 <figure class="highlight plain"><figcaption><span>都不好意思面基有木有！！！</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- [MDN](https://developer.mozilla.org/zh-CN/) - 无数的资源再等着你探索，追标准和新特性肯定得关注的网站</span><br><span class="line">- [Awesomes.cn](https://www.awesomes.cn/) - 国人维护的前端资源库，深度对接到 ```Github```，分类和展现清晰，值得收藏</span><br><span class="line">- [如何跟上前端开发的最新前沿](https://uptodate.frontendrescue.org/zh/) - RT，不解释</span><br><span class="line">- [慕课](http://www.imooc.com/) - 大量的在线计算机课程。 虽然初、中级居多，但是不乏有巨作值得细细品尝</span><br><span class="line">- [阮一峰](http://javascript.ruanyifeng.com/) - 关注多年，拜读其 [ES6](http://es6.ruanyifeng.com/) 系列。虽网传靠写书进鸟阿里，但博客内容确实够丰富</span><br><span class="line">- [W3Cplus](http://www.w3cplus.com/) - 大漠(《图解 CSS3》作者)在国内的影响力杠杠的，```Sass``` 专家级</span><br><span class="line">- [淘宝前端团队](http://taobaofed.org/) - 内容涵盖 ```Web``` 和 ```Node```，要深度游深度，要广度有广度</span><br><span class="line">- [奇舞团博客](http://www.75team.com/) - 坚持是最宝贵的，别人的奇舞周刊早已经过百期了</span><br><span class="line">- [百度 FEX](http://fex.baidu.com/) - 代表作 ```FIS```、```UEditor```、```WebUploader```、```KityMinder</span><br></pre></td></tr></table></figure></p>
</li>
<li><p><a href="http://www.alloyteam.com/" target="_blank" rel="external">腾讯全端 AlloyTeam</a> - 腾讯 Web 前端团队，博客真的有点丑…</p>
</li>
<li><p><a href="http://blog.fens.me/" target="_blank" rel="external">粉丝日志 for 张丹</a> - 大爱作者写的 <figure class="highlight plain"><figcaption><span>系列</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line">- [张鑫旭](http://www.zhangxinxu.com/wordpress/) - 成名多年的、高产的前端大湿，```CSS```猛人</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h3 id=&quot;blog_build&quot;&gt;博客搭建&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">- [Hexo](https://hexo.io/zh-cn/) - 快速、简洁且高效的博客框架，照着文档分分钟就可以在本地跑起来。```Github``` 地址:[Hexo](https://github.com/hexojs/hexo)</span><br><span class="line">- [Jekyll](http://jekyll.bootcss.com/) - 将纯文本转化为静态网站和博客。由于环境依赖的问题，所以安装起来可能稍费劲那么一点。```Github``` 地址：[Jekyll](https://github.com/jekyll/jekyll)</span><br><span class="line">- [GithubPages](https://pages.github.com/) - 免费的静态站点。配合着 ```Hexo``` 或 ```Jekyll``` 的模板，分分搭建出一套炫酷的个人博客</span><br><span class="line">- [Tumblr](https://www.tumblr.com/) - 轻博客的祖师爷，各种各样的主题感觉不错</span><br><span class="line">- [Wordpress](https://zh-cn.wordpress.com/) - 这玩意古老到都不想介绍</span><br><span class="line"></span><br><span class="line">&gt; 使用 ```Hexo/Jekyll + GitPage```，前端搭建静态博客那是相当 easy。用 ```Markdown``` 写文章做记录，再 ```push``` 到 ```Github``` 上，分分钟高大上有木有</span><br><span class="line"></span><br><span class="line">再推荐三款视觉效果极佳的 ```Hexo``` 主题，且在 ```Github``` 上的 ```star``` 都很不错：</span><br><span class="line">- [NexT](https://github.com/iissnan/hexo-theme-next)</span><br><span class="line">- [Yilia](https://github.com/litten/hexo-theme-yilia)</span><br><span class="line">- [Tranquilpeak](https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak)</span><br><span class="line"></span><br><span class="line">不能偏心，所以也推荐三款 ```Jekyll``` 的好主题：</span><br><span class="line">- [So Simple](https://github.com/mmistakes/so-simple-theme) 如果你看过俺的博客，对这个主题就肯定不会陌生啦</span><br><span class="line">- [HPSTR](https://github.com/mmistakes/hpstr-jekyll-theme) 当初 [fefork](http://www.fefork.com/) 差点选这个主题:)</span><br><span class="line">- [beautiful](https://github.com/daattali/beautiful-jekyll#readme)</span><br><span class="line"></span><br><span class="line">&lt;h3 id=&quot;html&quot;&gt;HTML&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">纯 ```HTML``` 相关其实没有好玩的项目，所以这儿展示的内容主要都是一些模板，而且以下列出来的都是免费的，方便拿取搭架后台或者博客</span><br><span class="line"></span><br><span class="line">- [HEAD](https://github.com/joshbuchea/HEAD) - 最全的 ```&lt;head&gt;``` 列表，真心佩服这种偏执的整理能力</span><br><span class="line">- [blur-admin](https://github.com/akveo/blur-admin) - 视觉冲击极强的管理后台，各种动画效果。PS：因为团队有[ant-design](https://github.com/ant-design/ant-design)的使用经验，感觉使用起来不是很顺畅，这套后台又是基于```AngularJS```，所以再三权限之后还是没实际使用，劳资还是别给团队添乱了，囧...</span><br><span class="line">- [AdminLTE](https://github.com/almasaeed2010/AdminLTE) - 很小清新的后台模板，每次看[preview](https://almsaeedstudio.com/preview) 页面都觉得很有视觉冲击</span><br><span class="line">- [gentelella](https://github.com/puikinsh/gentelella) - 刚用这个搭建了我司内部用的的数据平台，效果喜人。模板实现的功能比较全，比如登录、注册甚至各种 ```widget```，所以最终交付的时候，自己几乎没写几行CSS。</span><br><span class="line">- [material-design-lite](https://github.com/google/material-design-lite) - ```Star``` 数超过2W的开源模板项目，包含了多套简洁的 ```templates```，可以用于博客、后台或者企业首页。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h3 id=&quot;css&quot;&gt;CSS&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">- [MetroUI](http://metroui.org.ua/) - 好看好用，重点是样式特别、个性</span><br><span class="line">- [Font-Awesome](http://fontawesome.io/) - 图标字体库。相类似的库有不少，大厂都喜欢造轮子嘛:)</span><br><span class="line">- [LoadersCSS](https://connoratherton.com/loaders) - 用 CSS 技术实现 loading 动画； 补一句，想熟悉、理解 ```keyframes、animation、transform、transition``` 的童鞋可以直接去读其源码(只有千把行代码)，读完就算出师鸟:)</span><br><span class="line">- [WeUI](https://github.com/weui/weui) - 一套同微信原生视觉体验一致的基础样式库 为微信 Web 开发量身设计，令用户的使用感知更加统一</span><br><span class="line">- [PostCSS](https://github.com/postcss/postcss) - 最近才知道大名鼎鼎[Autoprefixer](https://github.com/postcss/autoprefixer)是其插件 推荐大漠的文章[《PostCSS深入学习》](http://www.w3cplus.com/PostCSS/postcss-deep-dive-what-you-need-to-know.html)，有关 PostCSS 不是什么？PostCSS 是什么？PostCSS 可以做什么等等问题，文章里面有答案</span><br><span class="line">- [CSSgram](https://github.com/una/CSSgram) - 图片滤镜库，终于可以用 CSS 在 web 上实现滤镜的效果鸟 IE不支持，不过新的移动设备支持没问题 [Can I Use](http://caniuse.com/#search=CSS%20Blend%20Modes)</span><br><span class="line">- [HINT.css](https://github.com/chinchang/hint.css) - 一款非常小巧的提示框效果</span><br><span class="line">- [Balloon.css](http://kazzkiq.github.io/balloon.css/)| |同上，一款非常小巧的提示框效果</span><br><span class="line">- [Hover.css](http://ianlunn.github.io/Hover/) - 很多鼠标 Hover 态的效果，可以给产品学习一下:)</span><br><span class="line">- [Cursor](http://css-cursor.techstream.org/) - 记录各浏览器对Cursor的支持情况</span><br><span class="line">- [csscss](https://github.com/zmoazeni/csscss) - 用于检查 CSS 代码冗余</span><br><span class="line">- [purecss](http://purecss.io/) - 小巧的响应式 CSS 库，Yahoo!出品</span><br><span class="line">- [hamburgers](https://jonsuh.com/hamburgers/) - 简单的动画库，让 Click(or Tap) 变得美妙</span><br><span class="line">- [cssmatic](http://www.cssmatic.com) - 一个帮忙调试CSS效果的工具</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h3 id=&quot;javascript&quot;&gt;浏览端 JS&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">- [requirejs](https://github.com/requirejs/requirejs) - JS模块化是构建复杂项目的第一步 中文学习文档奉上：[RequireJS 中文网](http://www.requirejs.cn/)</span><br><span class="line">- [ECharts](http://echarts.baidu.com/index.html) - 好用，最关键的是支持的图表展示非常之多，强烈推荐</span><br><span class="line">- [Swiper](http://www.swiper.com.cn) - 强大的 Slider 库 其实这类效果库非常多，但文档能那么专业的就很少鸟</span><br><span class="line">- [babel](https://babeljs.io/) - ```ES6``` 用起来。这个插件可以让我们用新的 **标准/提案** 写 ```JavaScript``` 代码，然后再向下 **转换编译**，最终生成随处可用的 ```JavaScript``` 代码。中文文档奉上[《babel-handbook》](https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/README.md)</span><br><span class="line">- [fullPage](http://alvarotrigo.com/fullPage/) - 非常好用的全屏滑动库，看 Demo 就明白</span><br><span class="line">- [PhotoSwipe](http://photoswipe.com/) - 偶常用的 js 库 官网上有这么一句很关键、重要&quot;no dependencies&quot;</span><br><span class="line">- [Vuejs](http://cn.vuejs.org) - 比较喜欢其作者... 所以劳资正在看源码学习学习</span><br><span class="line">- [favico.js](http://lab.ejci.net/favico.js/) - 动态改变浏览器标签栏中的网站图标，非常好玩</span><br><span class="line">- [ant.design](http://ant.design) - 蚂蚁金服搞的良心项目，文档美好的令人发指 样式优雅，强烈推荐内部系统尝试此库</span><br><span class="line">- [highlightjs](https://highlightjs.org/) - 代码高亮库，支持非常多的语言</span><br><span class="line">- [daterangepicker](http://www.daterangepicker.com) - 时间选择插件的不二选择，基于 ```Bootstrap``` 和 [Moment.js](http://momentjs.com/)</span><br><span class="line">- [nodePPT](https://github.com/ksky521/nodePPT) - 前同事三水的大作，好用必须得支持:) 用 Markdown 写 PPT，还可以 HTML 混排，上手飞快</span><br><span class="line">- [Sortable](https://github.com/RubaXa/Sortable) - 拖拽神器，用了就知道</span><br><span class="line">- [toastr](https://github.com/CodeSeven/toastr) - 信息提示的库，推荐的原因是卖相好、功能强大  [demo](http://codeseven.github.io/toastr/demo.html)</span><br><span class="line">- [peity.js](http://benpickles.github.io/peity/) - jQuery的图表插件，特别cute，感觉萌萌哒 将HTML转换成一个小的```&lt;svg&gt;```饼图、圆环图、折线图等等</span><br><span class="line">- [emojify.js](https://github.com/Ranks/emojify.js) - 能够将```emoji```关键词转换为```emoji```图片的```JS```插件 可以快速的为你的网站提供```emoji```表情支持</span><br><span class="line">- [Push.js](https://github.com/Nickersoft/push.js) - 基于 ```Notification API``` 实现的桌面效果的提示栏。浏览器支持情况不错，如[http://caniuse.com/#search=Notification](http://caniuse.com/#search=Notification)</span><br><span class="line">- [Highcharts](http://www.hcharts.cn/)| |Highcharts 中文网，又是一个图表库 确实功能强大，但是觉得不好看... PS：官网就做的不好看，脏脏的赶脚</span><br><span class="line">- [NProgress](https://github.com/rstacruz/nprogress/) - 使页面加载时有更好的loading效果</span><br><span class="line">- [Noticejs](https://github.com/jaredreich/notie.js) - 一个简单的通知库，木有依赖</span><br><span class="line">- [onepage-scroll](https://github.com/peachananr/onepage-scroll) - 依赖 jQuery 的单页滚动库，和 [fullPage](http://alvarotrigo.com/fullPage/) 类似</span><br><span class="line">- [videojs](http://videojs.com/) - 当下视频需求都用上```&lt;video&gt;```鸟 样式和交互统一的问题交给 videojs 搞定:)</span><br><span class="line">- [clipboard](http://zenorocha.github.io/clipboard.js/) - 仅 2KB 大小，搞定剪贴板功能，屌不屌~ 但是，Safari 不支持...</span><br><span class="line">- [impress.js](https://github.com/impress/impress.js) -  用来写 PPT 不错，偶也曾为其写过一篇[impress.js 初体验](http://www.cnblogs.com/Darren_code/archive/2013/01/04/impressjs.html)</span><br><span class="line">- [Cropper](http://fengyuanchen.github.io/cropper/) - 国人开发的图片裁剪库</span><br><span class="line"></span><br><span class="line">&gt; ___```Swiper/PhotoSwipe/fullPage``` 有这仨库，微信里常见的 H5 页完全不是问题哒___</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h3 id=&quot;project_build&quot;&gt;Project Build&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">- [pm2](https://www.npmjs.com/package/pm2) - 是一个带有负载均衡功能的 Node 应用的进程管理器； 是 [Forever](https://www.npmjs.com/package/forever) 的进阶库，想了解的可以看这篇文章[《拥抱PM2》](http://se77en.cc/2013/06/27/goodbye-node-forever-hello-pm2-translation/)</span><br><span class="line">- [Webpack](http://webpack.github.io/) - 项目构建工具，由于过于复杂和太强大，所以劳资还没去深入研究。</span><br><span class="line">- [Gulp](https://github.com/gulpjs/gulp/) - Gulp 是基于 Node 实现 Web 前端自动化开发的工具。 俺总结了篇[《gulp使用小结》](http://www.fefork.com/gulp_1/)，推荐您阅读:)</span><br><span class="line">- [Bower](http://bower.io/) - 前端项目的包管理其实是件复杂的事 谁谁谁依赖谁谁谁，谁谁谁依赖谁谁谁的某个版本...卧槽 Bower 就是搞定这件事儿的，亲爹是 Twitter 推荐篇 Bower 的中文文章：[《bower 解决 js 的依赖管理》](http://blog.fens.me/nodejs-bower-intro/)</span><br><span class="line">- [Grunt](http://gruntjs.com/) - 和 Gulp 类似，都是项目构建的常见选择 对比这俩的文章可谓不少，推荐篇[《Gulp vs Grunt》](http://www.benben.cc/blog/?p=407) 英盲又想看文档，可以去[Grunt 中文网](http://www.gruntjs.net/)</span><br><span class="line">- [FIS](http://fex-team.github.io/fis3/) - 度厂出品的前端构建工具 文档清晰，功能强大，推荐了解和使用</span><br><span class="line">- [Gitlab CI](https://ci.gitlab.org/) - 一套基于[Gitlab](https://about.gitlab.com/)的持续集成服务</span><br><span class="line"></span><br><span class="line">&gt; Gulp + Webpack 的使用__套路__参考: [learning-gulp](https://github.com/demohi/learning-gulp)</span><br><span class="line"></span><br><span class="line">&gt; Gulp 资料收集：[use-gulp](https://github.com/Platform-CUF/use-gulp)</span><br><span class="line"></span><br><span class="line">&gt; 推荐篇与 Webpack 相关的文章《[CSS Modules](http://boke.io/tan-tan-css-modules/)》</span><br><span class="line"></span><br><span class="line">&gt; Webpack 用起来吼吼：[webpack-howto](https://github.com/petehunt/webpack-howto)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h3 id=&quot;node_package&quot;&gt;Node Package&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&gt; 作为一名大前端甚至是多端，```Node``` 绝逼是必备的一块</span><br><span class="line"></span><br><span class="line">&gt; 有关 ```Node``` 的学习资料，请访问</span><br><span class="line"></span><br><span class="line">##### 这里介绍些有特色且前端有必要知道的包</span><br><span class="line"></span><br><span class="line">- [anywhere](https://www.npmjs.com/package/anywhere) - 随时随地将你的当前目录变成一个静态文件服务器的根目录</span><br><span class="line">- [supervisor](https://www.npmjs.com/package/supervisor) - 监控 Node 代码，自动重启。 A supervisor program for running nodejs programs</span><br><span class="line">- [nodemon](https://github.com/remy/nodemon) - 监控 Node 代码，自动重启。 Nodemon is a utility that will monitor for any changes in your source and automatically restart your server.</span><br><span class="line">- [pm2](https://www.npmjs.com/package/pm2) - 是一个带有负载均衡功能的 Node 应用的进程管理器； 是 [Forever](https://www.npmjs.com/package/forever) 的进阶库，想了解的可以看这篇文章[《拥抱PM2》](http://se77en.cc/2013/06/27/goodbye-node-forever-hello-pm2-translation/)</span><br><span class="line">- [async](https://www.npmjs.com/package/async) - 一个流程控制工具包，提供直接而强大的异步功能</span><br><span class="line">- [lodash](https://www.npmjs.com/package/lodash) - JS 工具库 ```Underscore.js```的一个 fork 发展而来</span><br><span class="line">- [socket.io](https://github.com/socketio/socket.io) - 预计 Node 的实时框架 聊天室、页游等对实时性有高要求的较适用</span><br><span class="line">- [Mongoose](https://github.com/Automattic/mongoose) - 让 NodeJS 更容易操作 Mongodb 数据库；  附上一篇[Mongoose 学习参考文档](https://cnodejs.org/topic/504b4924e2b84515770103dd)</span><br><span class="line">- [CNPM](http://npm.taobao.org/) - 淘宝 NPM 镜像，提供了 NPM 同步的服务 当然可不仅仅这样，利用 CNPM 可以打造__企业/个人__私有的 NPM 服务 推荐篇搭建私有NPM的文章：[《CNPM搭建私有的NPM服务》](http://blog.fens.me/nodejs-cnpm-npm/)</span><br><span class="line">- [koa](http://koajs.com/) - 玩 Node 都知道 express，但使用 koa 的就少很多，门槛比 Ex 稍高 通过 generator 避免繁琐的回调函数嵌套，强烈推崇 [官方的文章教程](https://github.com/guo-yu/koa-guide)</span><br><span class="line">- [Shipit](https://github.com/shipitjs/shipit) - 一个强大的自动化部署工具。 shipit 很多地方非常类似 gulp，他们的核心都是任务系统。</span><br><span class="line">- [node-inspector](https://www.npmjs.com/package/node-inspector) - Node 调试工具，使用起来跟 Chrome 的 JS 调试器很相似</span><br><span class="line">- [winston](https://www.npmjs.com/package/winston) - Node 服务最流行的日志库之一</span><br><span class="line">- [co](https://www.npmjs.com/package/co) - 用 generator 写法让异步代码同步</span><br><span class="line">- [thenify-all](https://www.npmjs.com/package/thenify-all) - 把异步的方法变成 Promise 的 Promisifies all the selected functions in an object</span><br><span class="line">- [PhantomJS](http://phantomjs.org/) - 一般用来做抓取截图和无界面测试 也可以用来操作 DOM 和网络监测，很好玩的库 [Quick Start](http://phantomjs.org/quick-start.html)</span><br><span class="line">- [ava](https://www.npmjs.com/package/ava) - 偶是应TJ大神推荐而得之的 ```ava``` 未来的测试运行器</span><br><span class="line">- [Mocha](https://github.com/mochajs/mocha) - Node 里最常用的测试框架； 它支持多种 Node 的 Assert libs； 同时支持异步和同步的测试，同时支持多种方式导出结果； 也支持直接在 browser 上跑 JS 代码测试。</span><br><span class="line">- [koa-validate](https://www.npmjs.com/package/koa-validate) - ```koa``` 的校验库 可以非常方便的对 ```queryString``` 或 ```postBody``` 的信息进行验证</span><br><span class="line">- [line-reader](https://www.npmjs.com/package/line-reader) - 基于```steam```的按行读文件，偶处理日志时用哒 要不实现一个按行读文件，又得 ```steam```、 又得 ```chunk```，还是比较麻烦的</span><br><span class="line">- [everyauth](https://www.npmjs.com/package/everyauth)| |OAuth 的集成解决方案</span><br><span class="line">- [shelljs](http://documentup.com/shelljs/shelljs) - 写 Node 时难免需要用 shell 去操作些神马 shelljs 是基于 Node 的 shell 工具，API 及其简单</span><br><span class="line">- [hashids](https://www.npmjs.com/package/hashids) - 看名称就懂，给 userid 加解密用的</span><br><span class="line">- [node-pool](https://github.com/coopernurse/node-pool) - 让 ```Node``` 有连接池的概念</span><br><span class="line">- [colors](https://www.npmjs.com/package/colors) - 花俏的小工具 让打印```console.log```时有更好的展示样式</span><br><span class="line">- [n](https://www.npmjs.com/package/n) - 控制Node的版本，想升级一行代码搞定</span><br><span class="line"></span><br><span class="line">&gt; ```supervisor``` 和 ```nodemon``` 这俩都是监控 Node 代码，使得每次修改代码后会，开发 Node 程序必备</span><br><span class="line"></span><br><span class="line">&gt; 以上库俺都有使用过，甚至有不少都是项目开发中、各种特定场景下必用的，有任何使用问题欢迎沟通哈:)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h3 id=&quot;node_project&quot;&gt;Node Project&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">_暂无_</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h2 id=&quot;read&quot;&gt;精选阅读&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3 id=&quot;fedev&quot;&gt;前端技术&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">- [2015D2前端论坛](http://www.imooc.com/learn/590) - Node方向非常值得看，有干货，相信东哥推荐哈</span><br><span class="line">- [前端开发规范手册](http://zhibimo.com/read/Ashu/front-end-style-guide/index.html) -  此手册主要实现的目标：代码一致性和最佳实践</span><br><span class="line">- [《babel-handbook》](https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/README.md) - 可以用新的规范(如 ```ES6```)写代码，经过 ```babel``` 编译后生成没有兼容问题的代码</span><br><span class="line">- [ECMAScript 6入门](http://es6.ruanyifeng.com/) - 阮一峰大神所著，一本开源的JS教程 全面介绍 ECMAScript 6新引入的语法特性</span><br><span class="line">- [ReactNative 中文版](http://wiki.jikexueyuan.com/project/react-native/) - 翻译自官方的中文文档</span><br><span class="line">- [ReactWebpackCookBook](https://fakefish.github.io/react-webpack-cookbook/index.html) |  |此书会引导读者是进入```React```和```Webpack```的世界。 俩都是非常前沿的技术，同时使用会更有趣。</span><br><span class="line">- [ReactNative 学习指南](https://github.com/ele828/react-native-guide) - 新玩意层出不穷... 对于能持续学习的童鞋，这是个美好的时代</span><br><span class="line">- [HTML/CSS 编码规范](http://www.css88.com/doc/codeguide/) - 编写灵活、稳定、高质量的```HTML```和```CSS```代码的规范</span><br><span class="line">- [移动前端入门](http://gold.xitu.io/entry/56c29abfa34131005b8cb1f3) - 入门价值高，移动方向常见问题的较好总结</span><br><span class="line">- [GulpBook](https://github.com/nimojs/gulp-book) - Gulp 是基于 Node 实现 Web 前端自动化开发的工具</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h3 id=&quot;node_read&quot;&gt;Node 学习资料&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">- [Node.js 中文资料导航](https://github.com/youyudehexie/node123) - Node 的中文资料导航，```start1300+</span><br></pre></td></tr></table></figure></p>
</li>
<li><p><a href="http://blog.fens.me/series-nodejs/" target="_blank" rel="external">从零开始 NodeJS 系列文章</a> - 基本上每一篇都看过，强烈推荐</p>
</li>
<li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external">Node.js 包教不包会</a> - 值得阅读，看完绝不用买书鸟</li>
<li><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="external">七天学会 NodeJS</a> - 劳资还没看，不过看目录还不错:)</li>
<li><p><a href="https://github.com/dead-horse/node-style-guide" target="_blank" rel="external">Style Guide</a> - 这是一份关于如何写出一致且美观的 <figure class="highlight plain"><figcaption><span>代码的风格指南</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- [koa实战](http://book.apebook.org/minghe/koa-action/index.html) - “[明河](https://github.com/minghe)出品”这四字已经说明一切。PS：正在连载中</span><br><span class="line">- [stream-handbook](https://github.com/jabez128/stream-handbook) - 如果学习 NodeJS，那么流一定是需要掌握的概念</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h3 id=&quot;interview&quot;&gt;前端面试&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">- [在 LinkedIn 做面试官的故事](http://dongfei.baijia.baidu.com/article/52449) - 非面试题，介绍 LinkedIn 的面试过程 文章有很多中肯的建议和想法，推荐阅读</span><br><span class="line">- [大漠：写给前端面试者](http://www.w3cplus.com/css/write-to-front-end-developer-interview.html) - 这篇文章不涉及任何的面试题 大漠与大家聊聊面试者与被面者之间的感受...</span><br><span class="line">- [前端面试题](https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese) - Git 上非常火的前端面试题，```start17k+</span><br></pre></td></tr></table></figure></p>
</li>
<li><p><a href="https://github.com/paddingme/Front-end-Web-Development-Interview-Question" target="_blank" rel="external">前端面经</a> - 主要内容是些前端面试笔试题和面试套路，值得阅读</p>
</li>
</ul>
<h3 id="otherdev">其他技术</h3>

<ul>
<li><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md" target="_blank" rel="external">MongoDB 极简实践入门</a> - 入门推荐的套路，非常浅显易懂</li>
<li><a href="https://github.com/macdao/ocds-guide-to-setting-up-mac" target="_blank" rel="external">Mac 设置指南</a> - Mac 使用必看 尤其适合 偏执狂/强迫症 患者:)</li>
<li><a href="https://github.com/xirong/my-markdown" target="_blank" rel="external">Markdown 资料</a> - 简单看些语法入门，快速用起来</li>
</ul>
<h2 id="tools">工具/软件</h2>

<h3 id="web">Web</h3>

<ul>
<li><a href="http://caniuse.com/" target="_blank" rel="external">CanIuse</a> - <strong>前端必备</strong>；查看浏览器对各种新特性的兼容情况</li>
<li><a href="http://overapi.com/" target="_blank" rel="external">overapi</a> - 最全的开发人员在线速查手册</li>
<li><a href="http://naotu.baidu.com" target="_blank" rel="external">百度脑图</a> - 非常方便的思维导图工具</li>
<li><a href="https://www.processon.com/" target="_blank" rel="external">ProcessOn</a> - 和百度脑图的功能类似，脑图工具。</li>
<li><a href="http://vimawesome.com/" target="_blank" rel="external">VimAwesome</a> - Vim 插件集合，<strong>Vim 党必备</strong></li>
<li><a href="https://tower.im" target="_blank" rel="external">Tower</a> - 小而美的多人协同工具。 不光只有 Web 版，还有 iPhone、iPad、Android、微信版。</li>
<li><a href="https://slides.com/" target="_blank" rel="external">Slides</a> - 一个所见即所得的 WebPPT 编辑器，非常推荐</li>
<li><a href="http://www.faviconer.co/" target="_blank" rel="external">faviconer.co</a> - 一个所见即所得的icon生成器，很好用</li>
<li><a href="http://smallpdf.com/cn" target="_blank" rel="external">smallpdf</a> - 提供各种格式和 PDF 互相转换</li>
<li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">Cmd Markdown</a> - 好用的 Web 版 Markdown 编辑器</li>
<li><a href="https://stackedit.io/editor" target="_blank" rel="external">StackEdit</a> - 又是一款 Web 版 Markdown 编辑器</li>
<li><a href="https://modao.cc/" target="_blank" rel="external">墨刀</a> - 一个在线移动应用原型制作工具。 旨在帮助产品经理快速制作可在手机端展示的移动应用原型。</li>
<li><a href="http://www.htm2pdf.co.uk" target="_blank" rel="external">htm2pdf</a>| |HTML to PDF</li>
<li><a href="https://speakerdeck.com/p/featured" target="_blank" rel="external">Speaker Deck</a> - 在线的演讲稿展示平台</li>
<li><p><a href="http://runjs.cn/" target="_blank" rel="external">RunJS</a> - 在线编辑、展示、分享、交流你的 <figure class="highlight plain"><figcaption><span>代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">- [Bootswatch](https://bootswatch.com/) - ```Bootstrap``` 的免费模板</span><br><span class="line">- [AdminLTE](https://github.com/almasaeed2010/AdminLTE/) -  又是一个 ```Bootstrap``` 的免费管理后台</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h3 id=&quot;app&quot;&gt;APP&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&gt; 以下列表中的 APP 都是不区分系统平台的</span><br><span class="line"></span><br><span class="line">- [印象笔记](https://www.yinxiang.com/) - 免费账号完全够用，跨平台跨终端的记录软件</span><br><span class="line">- [365日历](http://www.365rili.com/) - 首先肯定比系统自带的日历强大，要不推荐个蛋蛋 俺一般用来搞目标管理，比如学习计划和工作计划 生活中会订阅演唱会、电影首映的信息</span><br><span class="line">- [多看阅读](http://www.duokan.com/) - kindle 确实好，但是懒得随身带着 多看还算不错，书较多且偶尔有特价比较爽</span><br><span class="line">- [Surge](https://itunes.apple.com/cn/app/surge-web-developer-tool-proxy/id1040100637?mt=8&amp;v0=WWW-GCCN-ITSTOP100-PAIDAPPS&amp;l=&amp;ign-mpt=uo%3D4) - 非免费 牛逼的网络开发与调试工具，前端必备</span><br><span class="line">- [Monkey](https://github.com/coderyi/Monkey) - Monkey 是 iPhone 上一个 GitHub 第三方客户端。 展示 GitHub 上的开发者的排名，以及仓库的排名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h3 id=&quot;mac_soft&quot;&gt;Mac 软件篇&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&gt; 对于美好事务的追求无论何时都不算晚，前年公司给配了台 Mac 用做测试开发机，于是开始在 Mac 下办公。 __Windows？__ 回不去鸟...</span><br><span class="line"></span><br><span class="line">- [Alfred](https://www.macupdate.com/app/mac/34344/alfred) - 绝对的Top1。除了打开应用程序之外，查找文件、全文检索、调起浏览器搜索和计数器都是俺经常使用的功能。如果想知道具体咋用，推荐阅读老池(池建强)的一篇文章：[《神兵利器—Alfred》](http://www.cnblogs.com/chijianqiang/p/alfred.html)</span><br><span class="line">- [Homebrew](http://brew.sh/) - 没它程序猿没法好好干活... ```Homebrew```使```OS X```更完美。 使用```gem```来安装```gems```、用```brew```来搞定那些依赖包</span><br><span class="line">- [HyperDock](https://bahoom.com/hyperdock/) - 价格￥68，但感觉还是比较值的。预览和快速切换不说，能用快捷键控制窗口，能让拖拽到边缘的窗口自动调整大小(window早就有的功能)，真心能提高效率。推荐篇中文的文章：[让Mac的窗口飞](http://www.cnblogs.com/ider/p/let-mac-window-fly-with-hyperdock.html)</span><br><span class="line">- [iTerm2](http://www.iterm2.com/) - Mac 终端功能少又不好看，iTerm2 可以解救你~  推荐篇文章：[《让你的命令行丰富多彩》](http://swiftcafe.io/2015/07/25/iterm/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io)</span><br><span class="line">- [BrowseShot](https://itunes.apple.com/cn/app/browseshot/id615916400) - 偶正在使用的网页截图工具，强烈推荐</span><br><span class="line">- [BeyondCompare](http://www.scootersoftware.com) - 在Windows下就开始用了 比对文件和文件夹杠杠好使，Merge必备工具</span><br><span class="line">- [CheatSheet](https://www.mediaatelier.com/CheatSheet/) - 能够显示当前程序的快捷键列表，默认的快捷键是长按 ⌘</span><br><span class="line">- [Sequel Pro](http://www.sequelpro.com) - 免费好用的Mysql工具</span><br><span class="line">- [LICEcap](http://www.cockos.com/licecap/) - 屏幕录制工具，支持导出 GIF 动画图片格式 轻量级、使用简单，录制过程中可以改变录屏范围</span><br><span class="line">- [Bartender](https://www.macbartender.com/) - 有免费试用版(一个月)。Mac右上角菜单的管理工具，试用之后右上角的菜单瞬间清爽了</span><br><span class="line">- [Manico](http://manico.im/) - 快捷启动和切换 APP 的工具，高效的第一步 AppStore 上收费，不过可以免费试用</span><br><span class="line">- [WebStorm](http://www.jetbrains.com/webstorm/) - 功能超强的前端 IDE，不多介绍，谁用谁知道 PS：貌似俺插件装多了，用着卡卡的，风扇呼呼转...</span><br><span class="line">- [Atom](https://atom.io) - 2015 年 7 月之前，在桌面环境下我最喜欢的编辑器是 Sublime。 但之后就是 Atom，俺也专门为它写了篇___[使用纪要](https://github.com/nieweidong/learn-atom)___</span><br><span class="line">- [马克鳗](http://www.getmarkman.com/) - MarkMan，非常强大好用的标注、测量工具。 日常工作免费版就完全可以满足，__强烈推荐__</span><br><span class="line">- [Wireshark](https://www.wireshark.org/) - 说实话，Mac 下木有 Fiddler 挺不习惯，不过在有更强大的替代品</span><br><span class="line">- [SourceTree](https://www.sourcetreeapp.com/) - 一款好用的的 Git 客户端工具，重点是支持中文:)</span><br><span class="line">- [focus booster](https://www.focusboosterapp.com/) - 因为比较在意时间管理，所以这软件是俺工作时间的必备之物</span><br><span class="line">- [Mou](http://25.io/mou/) - 我曾使用过的 mk 编辑器。原本准备去掉这个推荐，但是我想让大家了解下这个有意思的事情：[《一年了，那个闻名遐迩的 Mou 你还记得吗？》](http://matrix.sspai.com/p/c7a3c9c0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h3 id=&quot;mac_dev&quot;&gt;Mac 开发篇&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">__暂无__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h3 id=&quot;linux&quot;&gt;Linux&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">- [oh-my-zsh](http://ohmyz.sh/) - ___终端党___ 必用的好工具，强烈推荐</span><br><span class="line">- [tree](http://www.cnblogs.com/iadanac/p/3859481.html) - linux 以树状图逐级列出目录的内容</span><br><span class="line">- [oneapm](http://www.oneapm.com/) - 强大的运维工具，提供多种监控客户端； 有采集、分析、展示等一套功能； PS：我这用了服务器监控(免费哦)</span><br><span class="line">- [httpie](https://github.com/jkbrzt/httpie) - 一个 CLI 中的 HTTP 客户端 用法简单、易读</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h3 id=&quot;BrowserPlugins&quot;&gt;Chrome 浏览器插件&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&gt; ```Chrome``` 应用商店必定是需要翻墙的哈。</span><br><span class="line"></span><br><span class="line">以下插件都是俺多年积累淘出来的，数量不多，所以就不区分 ```Github``` 插件和非 ```Github``` 插件了。按照俺推荐的强度自上向下展示，且大多数插件就是偶工作和生活必备，希望能对大家有用。后续如有新发现好插件，偶也会及时更新哒。</span><br><span class="line"></span><br><span class="line">- [Postman](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop) - ```POST``` 接口调试终结者，异常强大的接口调试工具。稍稍有一点学习成本，推荐之</span><br><span class="line">- [JSONView](https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc) - 就是个 ```JSON``` 格式的查看工具，可以很方便的展示数据，麻麻再也不用担心偶调试接口啦。PS：同类插件有不少，所以用的开心就行</span><br><span class="line">- [二维码生成器](https://chrome.google.com/webstore/detail/%E4%BA%8C%E7%BB%B4%E7%A0%81qr%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/pflgjjogbmmcmfhfcnlohagkablhbpmg) - RT。PS：这FF早已经自带生成二维码工具了，```Chrome``` 还得装插件才行，任性...</span><br><span class="line">- [WEB前端助手(FeHelper)](https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad) - [百度FE](https://www.baidufe.com/)出品，功能超全的 Chrome 插件。简单列一下其功能：QR码生成器、字符串编解码工具、JSON格式化查看器、前端编码规范检测、代码压缩工具、页面取色工具、统计并分析网页加载性能等等</span><br><span class="line">- [Eye Dropper](https://chrome.google.com/webstore/detail/eye-dropper/hmdcmlfkchdmnmnmheododdhjedfccka) - 前端必备的颜色提取神器，操作简单容易上手</span><br><span class="line">- [Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb) 和 ```Vim``` 快捷键一样，浏览网站时不需要鼠标咯</span><br><span class="line">- [Page Ruler](https://chrome.google.com/webstore/detail/page-ruler/jlpkojjdgbllmedoapgfodplfhcbnbpn) - 前端必备的尺子。计算页面元素间距、位置等信息的时候，你就知道它的好了，无脑上手，你值得拥有</span><br><span class="line">- [FireShot](https://chrome.google.com/webstore/detail/capture-webpage-screensho/mcbpblocgmgfnpjjppndjkmgjaogfceg) - 可以截取整个网页、部分页面，然后支持导出为各种格式。俺微博上发的网页全景图都是靠这个插件截取的</span><br><span class="line">- [Infinity](https://chrome.google.com/webstore/detail/infinity-new-tab/dbfmnekepjoapopniengjbcpnbljalfg) - 好不好用有点见仁见智了，但是我个人比较喜欢。使用后会让你的 **新标签页** 耳目一新，有漂亮的背景和各种常用的功能，比如地图、天气、```Gmail```、```Chrome```商店等等。当然，在这个插件的设置中还可以设置壁纸、动画效果等等</span><br><span class="line">- [Momentum](https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca) - 同样也是 **新标签页** 的插件，但是不管是视觉上(高清大图)还是功能上，都比 [Infinity](https://chrome.google.com/webstore/detail/infinity-new-tab/dbfmnekepjoapopniengjbcpnbljalfg) 高大上不少，```Setting``` 里面有不少设置和快捷键，都很好上手的。[Infinity](https://chrome.google.com/webstore/detail/infinity-new-tab/dbfmnekepjoapopniengjbcpnbljalfg)胜在中文和直观，[Momentum](https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca)胜在视觉冲击。俺基本上这俩款看心情换着用，所以希望你也都能喜欢:)</span><br><span class="line">- [Google翻译](https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb) - 英文不好又得经常浏览英文资料的，一般都准备好了翻译工具。不过能在浏览器里达到划词翻译的方案就不多了，偶推荐这个Google翻译(PS：如不能翻墙，有道词典的扩展也同样支持划词翻译)。</span><br><span class="line">- [Octotree](https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc) - 在浏览器左侧展示 ```Github``` 项目的文件导航，使目录结构一目了然，而且我们国内 ```Github``` 的访问速度又不稳定，用这个工具也就很提效率了。对经常使用 ```Github``` 的同学强烈推荐</span><br><span class="line">- [BuiltWith](https://chrome.google.com/webstore/detail/builtwith-technology-prof/dapjbgnjinbpoindlpdmhochffioedbn) / [wappalyzer](https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg) / [Chrome Sniffer Plus](https://chrome.google.com/webstore/detail/chrome-sniffer-plus/fhhdlnnepfjhlhilgmeepgkhjmhhhjkh) - 几款超强的网站分析工具，可以给出网站非常多的技术栈信息。大到 ```Web Servers```、服务端的 ```Frameworks``` 或 ```JS``` 框架，小到 ```meta```、编码格式甚至 ```Analytics```，非常推荐</span><br><span class="line">- [Adblock Plus](https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb/related) - 非常非常有名的免费的过滤广告的插件。PS：广告屏蔽这个见仁见智，其实俺个人还是比较接受一些个性化推荐的广告</span><br><span class="line">- [Wide Github](https://chrome.google.com/webstore/detail/wide-github/kaalofacklcidaampbokdplbklpeldpj/related) - 无聊又实用的 ```Github``` 插件。无聊是因为这个插件就特么一个功能，**加宽**，能让 ```Github``` 页面变宽，每行展示更多的内容，尤其配合着[Octotree](https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc)，展示效果极佳。非常推荐 ```Mac``` 用户实用，因为屏幕比较不大，变宽后阅读感觉更好</span><br><span class="line">- [Gmail](https://chrome.google.com/webstore/detail/google-mail-checker/mihcahmgecmbnbcchbopgniflfhgnkff) - 方便查看自己的 ```Gmail``` 邮件</span><br><span class="line">- [DevTools Author](https://chrome.google.com/webstore/detail/devtools-author/egfhcfdfnajldliefpdoaojgahefjhhi) - 纯装逼的插件，可以选择你的 ```Chrome``` 开发者工具的主题，且支持的主题超过25种，视觉装逼控必备。设置分大概三步，官网有文字说明，```youtube``` 上的视频教程奉上(Customization With DevTools Author)[https://www.youtube.com/watch?v=AUZagMLMAJc]</span><br><span class="line">- [GitPlug](https://chrome.google.com/webstore/detail/porter-plug/lngoojfoglemfpbeiomhgheccpdheilp) - 在 ```Github``` 项目页中嵌入有关的图表信息，直观的展示当前项目的 ```Star Trend```，能方便看到当前这个开源项目的发起时间，火爆趋势；对比较知名的项目还有相关的 ```News``` 展示</span><br><span class="line">- [OctoLinker](https://chrome.google.com/webstore/detail/octolinker/jlmafbaeoofdegohdhinkhilhclaklkp) - 在 ```package.json``` 或任意 ```.js``` 文件中，可以方便的对 ```require()``` 的 ```package``` 进去点击，跳转去对应的 ```Github``` 页面。PS：特么不太好表达，建议你去这个插件的概述页，里面有个十来秒的视频，看完就明白鸟</span><br><span class="line"></span><br><span class="line">补充：</span><br><span class="line"></span><br><span class="line">1. 翻墙代理的插件偶没使用，偶手机和电脑的翻墙都是配的 ```Surge``` 无脑搞定，不过翻墙代理插件推荐[Proxy SwitchySharp](https://chrome.google.com/webstore/detail/proxy-switchysharp/dpplabbmogkhghncfbfdeeokoefdjegm)，熊掌公司里大多用的都是它</span><br><span class="line">2. 日常开发相关的插件就以上这些，还有几款如知乎的插件、购物插件等这类与开发效率不沾边的，俺就不这上头列了哈</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h3 id=&quot;git&quot;&gt;Git&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">- [Git 教程-廖雪峰](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000) - 俺有看过不少 Git 的文章，确实这个系列是最通俗易懂的</span><br><span class="line">- [GitAwards](http://github-awards.com/) - Git 工具，可以查看 Git 排名</span><br><span class="line">- [Git 速查](https://github.com/flyhigher139/Git-Cheat-Sheet/blob/master/Git%20Cheat%20Sheet-Zh.md) - 分类清晰的速查表</span><br><span class="line">- [Git 简明指南](http://rogerdudler.github.io/git-guide/index.zh.html) - 入门```Github```的简明指南，木有高深内容:)</span><br><span class="line">- [Git 学习资料整理](https://github.com/xirong/my-git)| |内容包括很多 Git 的相关资料，```star 1200+</span><br></pre></td></tr></table></figure></p>
</li>
<li><p><a href="https://github.com/phodal/github-roam" target="_blank" rel="external">GitHub 漫游指南</a> - 一篇还算不错的 Git 学习总结，就是乱了点… 我理解作者<strong><em>漫游</em></strong>的意思是漫无目的想到哪写到哪~ 看到作者为鸟达成 Git 连击的成就，也是蛮拼的:)</p>
</li>
</ul>
<h3 id="servers">服务端</h3>

<p>如 <code>Ruby、Python、Perl</code> 等相似的服务端语言的学习资源。</p>
<p><em>暂无</em></p>
<h3 id="backend">数据端</h3>

<ul>
<li><a href="https://github.com/Automattic/mongoose" target="_blank" rel="external">Mongoose</a> - 让 NodeJS 更容易操作 Mongodb 数据库。  附上一篇<a href="https://cnodejs.org/topic/504b4924e2b84515770103dd" target="_blank" rel="external">Mongoose 学习参考文档</a></li>
</ul>
<h3 id="ux">设计/交互</h3>

<blockquote>
<p>作为负责最终效果呈现的前端工程师，多少得了解些 <strong>设计和交互</strong> 的，这也是为什么 fetool 会单独的存在这一章…当然话又说回来了，偶毕业的第一份工作是设计:)</p>
</blockquote>
<ul>
<li><a href="http://www.zcool.com.cn/works/" target="_blank" rel="external">站酷</a> - 里面好东西太多，俺当年真没少再上面淘素材</li>
<li><a href="http://www.ui.cn/list.html" target="_blank" rel="external">UI中国</a> - 光听名字就知道有多高大上鸟:)</li>
</ul>
<h3 id="handbook">速查手册</h3>

<blockquote>
<p>RT，这篇都是些文档或者API，一般这类东西都在大家浏览器的书签内，偶这也列一下大前端常用的手册地址</p>
</blockquote>
<ul>
<li><a href="https://github.com/joshbuchea/HEAD" target="_blank" rel="external">HEAD</a> - 最全的 <code>&lt;head&gt;</code> 列表，真心佩服这种偏执的整理能力</li>
<li><a href="http://cdn.code.baidu.com/" target="_blank" rel="external">百度CDN公共库</a> - 基本常见的库都收录拉，搞 demo 的时候特方便</li>
<li><a href="http://codeguide.bootcss.com/" target="_blank" rel="external">HTML 和 CSS 代码规范</a> - 编写灵活、稳定、高质量的 HTML 和 CSS 代码的规范</li>
<li><a href="http://linux.51yip.com" target="_blank" rel="external">Linux命令中文手册</a> - 木有系统的好好学习 Linux，所以命令更不熟悉 真羡慕那些CLI玩的飞起的:)</li>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet/blob/master/Git%20Cheat%20Sheet-Zh.md" target="_blank" rel="external">Git 速查</a> - 分类清晰的速查表</li>
<li><a href="http://jquery.cuishifeng.cn/" target="_blank" rel="external">jQueryAPI 1.11.3</a> - ZeptoAPI 基本和 jQuery 一样，所以看一份就好</li>
<li><a href="http://www.php100.com/manual/css3_0/index.html" target="_blank" rel="external">CSS3</a> - CSS3 的在线手册</li>
<li><a href="http://www.expressjs.com.cn/4x/api.html" target="_blank" rel="external">Express API</a> - 中文手册:) 4.x和3.x都有</li>
<li><a href="http://codeigniter.org.cn/user_guide/index.html" target="_blank" rel="external">CI用户指南</a> - 一个轻量级的 PHP 框架用户指南 推荐指数低的原因是劳资PHP比较弱，囧</li>
<li><a href="http://www.laruence.com/manual/" target="_blank" rel="external">Yaf</a> - 鸟哥(惠新宸)所写的 PHP 框架 推荐指数低的原因同上…</li>
</ul>
<h3 id="other">杂七杂八</h3>

<blockquote>
<p>放些开发中较有用的杂物在这儿</p>
</blockquote>
<ul>
<li><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way" target="_blank" rel="external">提問的智慧</a> - RT，<a href="https://github.com/FredWe/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="external">简体版</a>。“當你拋出一個技術問題時，最終是否能得到有用的回答，往往取決於你所提問和追問的方式。本指南將教你如何正確的提問以獲得你滿意的答案。”——摘自原文</li>
<li><a href="https://github.com/soulteary/tenant-point" target="_blank" rel="external">租房要点</a> - 适用于北上广深杭，大城市打拼<strong>租房</strong>确实是硬伤</li>
<li><a href="https://github.com/jsfront/src/blob/master/qq.md" target="_blank" rel="external">QQ 群规</a> - 突然某天，有个 QQ 群让我加群 原本我是拒绝的，但当我看完这篇 QQ 群规后… 劳资真的被感动到了，太牛逼、够专业！ 最后，我默默加群鸟:)</li>
<li><a href="https://github.com/github/gitignore" target="_blank" rel="external">.gitignore 文件</a> - 介绍不同语言项目的 gitignore 模板</li>
<li><a href="https://github.com/easychen/howto-make-more-money" target="_blank" rel="external">程序员如何优雅的挣零花钱？</a> - 中肯的文章，如果读完能有些许收获，那么恭喜你</li>
<li><a href="https://github.com/ben174/git-draw" target="_blank" rel="external">git-draw</a> - 黑魔法，可以修改自己 Git 上的 Contributions</li>
<li><a href="https://www.gitbook.com" target="_blank" rel="external">GitBook</a> - 写记录的好地方</li>
<li><a href="https://codebabes.com/" target="_blank" rel="external">Codebabes</a> - 学编程的网站。 重点是每通过一个测试，尼玛对应的妞会脱一件衣服… PS：要翻墙哦~</li>
<li><a href="http://emailframe.work/" target="_blank" rel="external">emailframe</a> - 邮件展示确实比较坑，建议有需要的收藏</li>
<li><a href="https://github.com/nieweidong/ReadmeSample" target="_blank" rel="external">ReadmeSample</a>| |项目高大上的第一步就是<strong>包装</strong>，所以来看看 <code>README</code> 的书写套路吧 PS：劳资怎么这么无聊…</li>
</ul>
<h3 id="cool">前端炫技-<em>炫酷狂拽叼炸天站点</em></h3>

<ul>
<li><a href="http://www.windows93.net/" target="_blank" rel="external">windows93</a> - 模拟 Win93 桌面，思路、体验和整体效果比较有意思</li>
<li><a href="http://geektyper.com/" target="_blank" rel="external">GeekTyper</a> - 好玩又具有 Geek 精神的网站，虽然创建的目的是个恶作剧 PS：网站需要翻墙</li>
<li><a href="http://2016.makemepulse.com/" target="_blank" rel="external">2016.makemepulse.com</a> - 帅哭了。请使用现代浏览器打开</li>
<li><a href="http://skill.phodal.com/" target="_blank" rel="external">前端技能栈</a> - 好玩的前端技能栈展示</li>
<li><a href="https://www.mapbox.com/" target="_blank" rel="external">Mapbox</a> - 非常叼的开源项目，有方便的 JSAPI(还有 SDK)。 不过免费版只能浅尝，流量有限。 PS：网站需要翻墙</li>
<li><a href="http://www.clarkduvall.com/" target="_blank" rel="external">Clark Duvall</a> - 一枚歪果仁的个人 blog，范儿叼叼的</li>
<li><a href="http://johnpolacek.github.io/superscrollorama/" target="_blank" rel="external">SuperScrollorama</a> - 好玩好看的动画库，链接是 SuperScrollorama 的展示页</li>
<li><a href="http://matthew.wagerfield.com/parallax/" target="_blank" rel="external">parallax.js</a> - 一个视差引擎的官网，在电脑和手机上都有很好的体验</li>
<li><a href="http://yusugomori.com/projects/css-sans/fonts" target="_blank" rel="external">CSS字母</a> - 用 CSS 实现英文字母，叼叼的</li>
<li><a href="https://modao.cc/" target="_blank" rel="external">墨刀</a> - 一个在线移动应用原型制作工具。 旨在帮助产品经理快速制作可在手机端展示的移动应用原型。</li>
</ul>
<h3 id="summary">小结</h3>

<h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><p>  俺算个比较能自我总结的码农，所以偶尔喜欢写点东西做些记录或者自我熏陶陶醉一下。<br>  可写着写着发现<code>Evernote</code>里面的东西太尼玛多(乱)了，于是想着把一些技术相关的资料都整理整理，都丢到<code>Github</code>上沉淀下来。 这样Evernote就可以只需要记录些偏生活方便的，看着清爽一些…</p>
<p>  所以，这篇记录其实只是为偶自己而写，确信以后也一直会这样~~~</p>
<h5 id="说说目标"><a href="#说说目标" class="headerlink" title="说说目标"></a>说说目标</h5><p>  其实与这篇记录类似的文章太多鸟，俺也不愿意成为一个单纯的收集资料，分享资料的这么个东西。<br>  我希望 fetool 能更生动、更个性，最好能更另类点，对于每样工具的思考和解析更多点，吐槽也必须有理有据，然后再配上劳资收集的 low 图，完美！<br>  <strong>希望通过不停的完善这篇记录，能Push劳资多了解业内的新玩具和新创意，然后围绕这些新东西，客观的再写点好东西，比如文章、资料、开源项目这些，让其他伙伴们少走弯路或学的更顺畅点儿</strong></p>
<blockquote>
<p>所以劳资对自己的要求是：这篇记录里列出的每样东西，自己都得的去了解、去尝试，然后再列出来。 能举一反三最好，如果达不到至少也能清楚的认识：列出来的这玩意对程序员有没有卵用，解决了啥痛点。</p>
</blockquote>
<h3 id="todo">TODO</h3>

<ol>
<li><p>继续完善和扩充内容</p>
</li>
<li><p>“备注/说明”这一栏不够犀利，希望再多加入自己的理解、点评、吐槽，让这篇记录更犀利和生动</p>
</li>
<li><p>支持导出多种格式，如<code>.pdf</code>、<code>.epub</code>、<code>.mobi</code>等</p>
</li>
<li><p>后续看看如果有必要，可以单独搞个页面，优化下阅读和展示效果</p>
</li>
</ol>
<hr>
<p>以下是 <a href="http://weibo.com/jayli" target="_blank" rel="external">@拔赤</a> 总结的前端技能图：<br><img src="https://raw.githubusercontent.com/nieweidong/fetool/master/img/fe.jpg" alt="拔赤总结的前端技能图"></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[7大查找算法]]></title>
      <url>http://yoursite.com/2015/01/01/7%E5%A4%A7%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<ol>
<li>顺序查找 2. 二分查找 3. 插值查找 4. 斐波那契查找 5. 树表查找 6. 分块查找 7. 哈希查找</li>
</ol>
</blockquote>
<p>　　查找是在大量的信息中寻找一个特定的信息元素，在计算机应用中，查找是常用的基本运算，例如编译程序中符号表的查找。本文简单概括性的介绍了常见的七种查找算法，说是七种，其实二分查找、插值查找以及斐波那契查找都可以归为一类——插值查找。插值查找和斐波那契查找是在二分查找的基础上的优化查找算法。树表查找和哈希查找会在后续的博文中进行详细介绍。</p>
<a id="more"></a>
<p>　　查找定义：根据给定的某个值，在查找表中确定一个其关键字等于给定值的数据元素（或记录）。</p>
<p>　　查找算法分类：<br>　　1）静态查找和动态查找；<br>　　　　注：静态或者动态都是针对查找表而言的。动态表指查找表中有删除和插入操作的表。<br>　　2）无序查找和有序查找。<br>　　　　无序查找：被查找数列有序无序均可；<br>　　　　有序查找：被查找数列必须为有序数列。<br>　　平均查找长度（Average Search Length，ASL）：需和指定key进行比较的关键字的个数的期望值，称为查找算法在查找成功时的平均查找长度。<br>　　对于含有n个数据元素的查找表，查找成功的平均查找长度为：ASL = Pi*Ci的和。<br>　　Pi：查找表中第i个数据元素的概率。<br>　　Ci：找到第i个数据元素时已经比较过的次数。  </p>
<ol>
<li>顺序查找<br>　　说明：顺序查找适合于存储结构为顺序存储或链接存储的线性表。<br>　　基本思想：顺序查找也称为线形查找，属于无序查找算法。从数据结构线形表的一端开始，顺序扫描，依次将扫描到的结点关键字与给定值k相比较，若相等则表示查找成功；若扫描结束仍没有找到关键字等于k的结点，表示查找失败。<br>　　复杂度分析：  　<br>　　查找成功时的平均查找长度为：（假设每个数据元素的概率相等） ASL = 1/n(1+2+3+…+n) = (n+1)/2 ;<br>　　当查找不成功时，需要n+1次比较，时间复杂度为O(n);<br>　　所以，顺序查找的时间复杂度为O(n)。    </li>
<li>二分查找<br>　　说明：元素必须是有序的，如果是无序的则要先进行排序操作。<br>　　基本思想：也称为是折半查找，属于有序查找算法。用给定值k先与中间结点的关键字比较，中间结点把线形表分成两个子表，若相等则查找成功；若不相等，再根据k与该中间结点关键字的比较结果确定下一步查找哪个子表，这样递归进行，直到查找到或查找结束发现表中没有这样的结点。<br>　　复杂度分析：最坏情况下，关键词比较次数为log2(n+1)，且期望时间复杂度为O(log2n)；<br>　　注：折半查找的前提条件是需要有序表顺序存储，对于静态查找表，一次排序后不再变化，折半查找能得到不错的效率。但对于需要频繁执行插入或删除操作的数据集来说，维护有序的排序会带来不小的工作量，那就不建议使用。——《大话数据结构》  
　</li>
<li>插值查找  </li>
</ol>
<p>　　在介绍插值查找之前，首先考虑一个新问题，为什么上述算法一定要是折半，而不是折四分之一或者折更多呢？<br>　　打个比方，在英文字典里面查“apple”，你下意识翻开字典是翻前面的书页还是后面的书页呢？如果再让你查“zoo”，你又怎么查？很显然，这里你绝对不会是从中间开始查起，而是有一定目的的往前或往后翻。<br>　　同样的，比如要在取值范围1 ~ 10000 之间 100 个元素从小到大均匀分布的数组中查找5， 我们自然会考虑从数组下标较小的开始查找。<br>　　经过以上分析，折半查找这种查找方式，不是自适应的（也就是说是傻瓜式的）。二分查找中查找点计算如下：  </p>
<p>　　mid=(low+high)/2, 即mid=low+1/2<em>(high-low);<br>　　通过类比，我们可以将查找的点改进为如下：<br>　　mid=low+(key-a[low])/(a[high]-a[low])\</em>(high-low);  </p>
<p>　　也就是将上述的比例参数1/2改进为自适应的，根据关键字在整个有序表中所处的位置，让mid值的变化更靠近关键字key，这样也就间接地减少了比较次数。<br>　　基本思想：基于二分查找算法，将查找点的选择改进为自适应选择，可以提高查找效率。当然，差值查找也属于有序查找。<br>　　注：对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好的多。反之，数组中如果分布非常不均匀，那么插值查找未必是很合适的选择。<br>　　复杂度分析：查找成功或者失败的时间复杂度均为O(log2(log2n))。    </p>
<ol>
<li>斐波那契查找  </li>
</ol>
<p>　　在介绍斐波那契查找算法之前，我们先介绍一下很它紧密相连并且大家都熟知的一个概念——黄金分割。<br>　　黄金比例又称黄金分割，是指事物各部分间一定的数学比例关系，即将整体一分为二，较大部分与较小部分之比等于整体与较大部分之比，其比值约为1:0.618或1.618:1。<br>　　0.618被公认为最具有审美意义的比例数字，这个数值的作用不仅仅体现在诸如绘画、雕塑、音乐、建筑等艺术领域，而且在管理、工程设计等方面也有着不可忽视的作用。因此被称为黄金分割。<br>　　大家记不记得斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89…….（从第三个数开始，后边每一个数都是前两个数的和）。然后我们会发现，随着斐波那契数列的递增，前后两个数的比值会越来越接近0.618，利用这个特性，我们就可以将黄金比例运用到查找技术中。  </p>
<p>　　基本思想：也是二分查找的一种提升算法，通过运用黄金比例的概念在数列中选择查找点进行查找，提高查找效率。同样地，斐波那契查找也属于一种有序查找算法。<br>　　相对于折半查找，一般将待比较的key值与第mid=（low+high）/2位置的元素比较，比较结果分三种情况：<br>　　1）相等，mid位置的元素即为所求<br>　　2）&gt;，low=mid+1;<br>   3）&lt;，high=mid-1。<br>　　斐波那契查找与折半查找很相似，他是根据斐波那契序列的特点对有序表进行分割的。他要求开始表中记录的个数为某个斐波那契数小1，及n=F(k)-1;<br> 开始将k值与第F(k-1)位置的记录进行比较(及mid=low+F(k-1)-1),比较结果也分为三种<br>　　1）相等，mid位置的元素即为所求<br>　　2）&gt;，low=mid+1,k-=2;<br>　　说明：low=mid+1说明待查找的元素在[mid+1,high]范围内，k-=2 说明范围[mid+1,high]内的元素个数为n-(F(k-1))= Fk-1-F(k-1)=Fk-F(k-1)-1=F(k-2)-1个，所以可以递归的应用斐波那契查找。<br>　　3）&lt;，high=mid-1,k-=1。<br>　　说明：low=mid+1说明待查找的元素在[low,mid-1]范围内，k-=1 说明范围[low,mid-1]内的元素个数为F(k-1)-1个，所以可以递归的应用斐波那契查找。<br>　　复杂度分析：最坏情况下，时间复杂度为O(log2n)，且其期望复杂度也为O(log2n)。  
　</p>
<ol>
<li><p>树表查找<br>　　5.1 最简单的树表查找算法——二叉树查找算法。<br>　　基本思想：二叉查找树是先对待查找的数据进行生成树，确保树的左分支的值小于右分支的值，然后在就行和每个节点的父节点比较大小，查找最适合的范围。 这个算法的查找效率很高，但是如果使用这种查找方法要首先创建树。<br>　　二叉查找树（BinarySearch Tree，也叫二叉搜索树，或称二叉排序树Binary Sort Tree）或者是一棵空树，或者是具有下列性质的二叉树：<br>　　1）若任意节点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br>　　2）若任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；<br>　　3）任意节点的左、右子树也分别为二叉查找树。<br>　　二叉查找树性质：对二叉查找树进行中序遍历，即可得到有序的数列。<br>　　不同形态的二叉查找树如下图所示：</p>
<p>　　复杂度分析：它和二分查找一样，插入和查找的时间复杂度均为O(logn)，但是在最坏的情况下仍然会有O(n)的时间复杂度。原因在于插入和删除元素的时候，树没有保持平衡（比如，我们查找上图（b）中的“93”，我们需要进行n次查找操作）。我们追求的是在最坏的情况下仍然有较好的时间复杂度，这就是平衡查找树设计的初衷。<br>　　下图为二叉树查找和顺序查找以及二分查找性能的对比图：</p>
</li>
</ol>
<p>　　基于二叉查找树进行优化，进而可以得到其他的树表查找算法，如平衡树、红黑树等高效算法。<br>　　5.2 平衡查找树之2-3查找树（2-3 Tree）<br>　　2-3查找树定义：和二叉树不一样，2-3树运行每个节点保存1个或者两个的值。对于普通的2节点(2-node)，他保存1个key和左右两个自己点。对应3节点(3-node)，保存两个Key，2-3查找树的定义如下：<br>　　1）要么为空，要么：<br>　　2）对于2节点，该节点保存一个key及对应value，以及两个指向左右节点的节点，左节点也是一个2-3节点，所有的值都比key要小，右节点也是一个2-3节点，所有的值比key要大。<br>　　3）对于3节点，该节点保存两个key及对应value，以及三个指向左中右的节点。左节点也是一个2-3节点，所有的值均比两个key中的最小的key还要小；中间节点也是一个2-3节点，中间节点的key值在两个跟节点key值之间；右节点也是一个2-3节点，节点的所有key值比两个key中的最大的key还要大。<br>Definition of 2-3 tree<br>　　2-3查找树的性质：<br>　　1）如果中序遍历2-3查找树，就可以得到排好序的序列；<br>　　2）在一个完全平衡的2-3查找树中，根节点到每一个为空节点的距离都相同。（这也是平衡树中“平衡”一词的概念，根节点到叶节点的最长距离对应于查找算法的最坏情况，而平衡树中根节点到叶节点的距离都一样，最坏情况也具有对数复杂度。）<br>　　性质2）如下图所示：  </p>
<p>　　复杂度分析：<br>　　2-3树的查找效率与树的高度是息息相关的。<br>在最坏的情况下，也就是所有的节点都是2-node节点，查找效率为lgN<br>在最好的情况下，所有的节点都是3-node节点，查找效率为log3N约等于0.631lgN<br>　　距离来说，对于1百万个节点的2-3树，树的高度为12-20之间，对于10亿个节点的2-3树，树的高度为18-30之间。<br>　　对于插入来说，只需要常数次操作即可完成，因为他只需要修改与该节点关联的节点即可，不需要检查其他节点，所以效率和查找类似。下面是2-3查找树的效率：<br>analysis of 2-3 tree  </p>
<p>　　5.3 平衡查找树之红黑树（Red-Black Tree）<br>　　2-3查找树能保证在插入元素之后能保持树的平衡状态，最坏情况下即所有的子节点都是2-node，树的高度为lgn，从而保证了最坏情况下的时间复杂度。但是2-3树实现起来比较复杂，于是就有了一种简单实现2-3树的数据结构，即红黑树（Red-Black Tree）。<br>　　基本思想：红黑树的思想就是对2-3查找树进行编码，尤其是对2-3查找树中的3-nodes节点添加额外的信息。红黑树中将节点之间的链接分为两种不同类型，红色链接，他用来链接两个2-nodes节点来表示一个3-nodes节点。黑色链接用来链接普通的2-3节点。特别的，使用红色链接的两个2-nodes来表示一个3-nodes节点，并且向左倾斜，即一个2-node是另一个2-node的左子节点。这种做法的好处是查找的时候不用做任何修改，和普通的二叉查找树相同。<br>Red black tree<br>　　红黑树的定义：<br>　　红黑树是一种具有红色和黑色链接的平衡查找树，同时满足：<br>红色节点向左倾斜<br>一个节点不可能有两个红色链接<br>整个树完全黑色平衡，即从根节点到所以叶子结点的路径上，黑色链接的个数都相同。<br>　　下图可以看到红黑树其实是2-3树的另外一种表现形式：如果我们将红色的连线水平绘制，那么他链接的两个2-node节点就是2-3树中的一个3-node节点了。<br>1-1 correspondence between 2-3 and LLRB<br>　　红黑树的性质：整个树完全黑色平衡，即从根节点到所以叶子结点的路径上，黑色链接的个数都相同（2-3树的第2）性质，从根节点到叶子节点的距离都相等）。<br>　　复杂度分析：最坏的情况就是，红黑树中除了最左侧路径全部是由3-node节点组成，即红黑相间的路径长度是全黑路径长度的2倍。<br>　　下图是一个典型的红黑树，从中可以看到最长的路径(红黑相间的路径)是最短路径的2倍：<br>a typic red black tree<br>　　红黑树的平均高度大约为logn。<br>　　下图是红黑树在各种情况下的时间复杂度，可以看出红黑树是2-3查找树的一种实现，它能保证最坏情况下仍然具有对数的时间复杂度。  </p>
<p>　　红黑树这种数据结构应用十分广泛，在多种编程语言中被用作符号表的实现，如：<br>Java中的java.util.TreeMap,java.util.TreeSet；<br>C++ STL中的：map,multimap,multiset；<br>.NET中的：SortedDictionary,SortedSet 等。<br>　　5.4 B树和B+树（B Tree/B+ Tree）<br>　　平衡查找树中的2-3树以及其实现红黑树。2-3树种，一个节点最多有2个key，而红黑树则使用染色的方式来标识这两个key。<br>　　维基百科对B树的定义为“在计算机科学中，B树（B-tree）是一种树状数据结构，它能够存储数据、对其进行排序并允许以O(log n)的时间复杂度运行进行查找、顺序读取、插入和删除的数据结构。B树，概括来说是一个节点可以拥有多于2个子节点的二叉查找树。与自平衡二叉查找树不同，B树为系统最优化大块数据的读和写操作。B-tree算法减少定位记录时所经历的中间过程，从而加快存取速度。普遍运用在数据库和文件系统。<br>　　B树定义：<br>　　B树可以看作是对2-3查找树的一种扩展，即他允许每个节点有M-1个子节点。<br>根节点至少有两个子节点<br>每个节点有M-1个key，并且以升序排列<br>位于M-1和M key的子节点的值位于M-1 和M key对应的Value之间<br>其它节点至少有M/2个子节点<br>　　下图是一个M=4 阶的B树:  </p>
<p>　　可以看到B树是2-3树的一种扩展，他允许一个节点有多于2个的元素。B树的插入及平衡化操作和2-3树很相似，这里就不介绍了。<br>　　B+树定义：<br>　　B+树是对B树的一种变形树，它与B树的差异在于：<br>有k个子结点的结点必然有k个关键码；<br>非叶结点仅具有索引作用，跟记录有关的信息均存放在叶结点中。<br>树的所有叶结点构成一个有序链表，可以按照关键码排序的次序遍历全部记录。<br>　<br>　　B和B+树的区别在于，B+树的非叶子结点只包含导航信息，不包含实际的值，所有的叶子结点和相连的节点使用链表相连，便于区间查找和遍历。<br>　　B+ 树的优点在于：<br>由于B+树在内部节点上不好含数据信息，因此在内存页中能够存放更多的key。 数据存放的更加紧密，具有更好的空间局部性。因此访问叶子几点上关联的数据也具有更好的缓存命中率。<br>B+树的叶子结点都是相链的，因此对整棵树的便利只需要一次线性遍历叶子结点即可。而且由于数据顺序排列并且相连，所以便于区间查找和搜索。而B树则需要进行每一层的递归遍历。相邻的元素可能在内存中不相邻，所以缓存命中性没有B+树好。<br>　　但是B树也有优点，其优点在于，由于B树的每一个节点都包含key和value，因此经常访问的元素可能离根节点更近，因此访问也更迅速。<br>　　下面是B 树和B+树的区别图：<br>Different between B tree and B plus tree<br>　　B/B+树常用于文件系统和数据库系统中，它通过对每个节点存储个数的扩展，使得对连续的数据能够进行较快的定位和访问，能够有效减少查找时间，提高存储的空间局部性从而减少IO操作。它广泛用于文件系统及数据库中，如：<br>Windows：HPFS文件系统；<br>Mac：HFS，HFS+文件系统；<br>Linux：ResiserFS，XFS，Ext3FS，JFS文件系统；<br>数据库：ORACLE，MYSQL，SQLSERVER等中。<br>　　树表查找总结：<br>　　二叉查找树平均查找性能不错，为O(logn)，但是最坏情况会退化为O(n)。在二叉查找树的基础上进行优化，我们可以使用平衡查找树。平衡查找树中的2-3查找树，这种数据结构在插入之后能够进行自平衡操作，从而保证了树的高度在一定的范围内进而能够保证最坏情况下的时间复杂度。但是2-3查找树实现起来比较困难，红黑树是2-3树的一种简单高效的实现，他巧妙地使用颜色标记来替代2-3树中比较难处理的3-node节点问题。红黑树是一种比较高效的平衡查找树，应用非常广泛，很多编程语言的内部实现都或多或少的采用了红黑树。<br>　　除此之外，2-3查找树的另一个扩展——B/B+平衡树，在文件系统和数据库系统中有着广泛的应用。  </p>
<ol>
<li><p>分块查找<br>　　分块查找又称索引顺序查找，它是顺序查找的一种改进方法。<br>　　算法思想：将n个数据元素”按块有序”划分为m块（m ≤ n）。每一块中的结点不必有序，但块与块之间必须”按块有序”；即第1块中任一元素的关键字都必须小于第2块中任一元素的关键字；而第2块中任一元素又都必须小于第3块中的任一元素，……<br>　　算法流程：<br>　　step1 先选取各块中的最大关键字构成一个索引表；<br>　　step2 查找分两个部分：先对索引表进行二分查找或顺序查找，以确定待查记录在哪一块中；然后，在已确定的块中用顺序法进行查找。  </p>
</li>
<li><p>哈希查找<br>　　什么是哈希表（Hash）？<br>　　我们使用一个下标范围比较大的数组来存储元素。可以设计一个函数（哈希函数， 也叫做散列函数），使得每个元素的关键字都与一个函数值（即数组下标）相对应，于是用这个数组单元来存储这个元素；也可以简单的理解为，按照关键字为每一个元素”分类”，然后将这个元素存储在相应”类”所对应的地方。但是，不能够保证每个元素的关键字与函数值是一一对应的，因此极有可能出现对于不同的元素，却计算出了相同的函数值，这样就产生了”冲突”，换句话说，就是把不同的元素分在了相同的”类”之中。后面我们将看到一种解决”冲突”的简便做法。<br>　　总的来说，”直接定址”与”解决冲突”是哈希表的两大特点。<br>　　什么是哈希函数？<br>　　哈希函数的规则是：通过某种转换关系，使关键字适度的分散到指定大小的的顺序结构中，越分散，则以后查找的时间复杂度越小，空间复杂度越高。<br>　　算法思想：哈希的思路很简单，如果所有的键都是整数，那么就可以使用一个简单的无序数组来实现：将键作为索引，值即为其对应的值，这样就可以快速访问任意键的值。这是对于简单的键的情况，我们将其扩展到可以处理更加复杂的类型的键。<br>　　算法流程：<br>　　1）用给定的哈希函数构造哈希表；<br>　　2）根据选择的冲突处理方法解决地址冲突；<br>　　　　常见的解决冲突的方法：拉链法和线性探测法。<br>　　3）在哈希表的基础上执行哈希查找。<br>　　哈希表是一个在时间和空间上做出权衡的经典例子。如果没有内存限制，那么可以直接将键作为数组的索引。那么所有的查找时间复杂度为O(1)；如果没有时间限制，那么我们可以使用无序数组并进行顺序查找，这样只需要很少的内存。哈希表使用了适度的时间和空间来在这两个极端之间找到了平衡。只需要调整哈希函数算法即可在时间和空间上做出取舍。<br>　　复杂度分析：<br>　　单纯论查找复杂度：对于无冲突的Hash表而言，查找复杂度为O(1)（注意，在查找之前我们需要构建相应的Hash表）。<br>　　使用Hash，我们付出了什么？<br>　　我们在实际编程中存储一个大规模的数据，最先想到的存储结构可能就是map，也就是我们常说的KV pair，经常使用Python的博友可能更有这种体会。使用map的好处就是，我们在后续处理数据处理时，可以根据数据的key快速的查找到对应的value值。map的本质就是Hash表，那我们在获取了超高查找效率的基础上，我们付出了什么？<br>　　Hash是一种典型以空间换时间的算法，比如原来一个长度为100的数组，对其查找，只需要遍历且匹配相应记录即可，从空间复杂度上来看，假如数组存储的是byte类型数据，那么该数组占用100byte空间。现在我们采用Hash算法，我们前面说的Hash必须有一个规则，约束键与存储位置的关系，那么就需要一个固定长度的hash表，此时，仍然是100byte的数组，假设我们需要的100byte用来记录键与位置的关系，那么总的空间为200byte,而且用于记录规则的表大小会根据规则，大小可能是不定的。  </p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css文本和字体]]></title>
      <url>http://yoursite.com/2014/12/30/css%E6%96%87%E6%9C%AC%E5%92%8C%E5%AD%97%E4%BD%93/</url>
      <content type="html"><![CDATA[<p>字体是“文字的不同体式”或者“字的形体结构”。对于英文而言，每种字体都是由一组具有独特样式的字母、数字和符号组成的。根据外观，字体可以分为不同的类别（font collection），包括衬线字体（serif）、无衬线字体（sans-serif）和等宽字体（monospace）。每一类字体可以分成不同的字体族（font family），比如 Times 和 Helvetica。而字体族中又可以包含不同的字型（font face），反映了相应字体族基本设计的不同变化，例如 Times Roman、 Times Bold、 Helvetica Condensed 和 Bodoni italic。CSS字体属性主要描述一类字体的大小和外观，比如：使用什么字体族（是 Times，还是 Helvitica），多大字号，粗体还是斜体。</p>
<a id="more"></a>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">font</span>-maily：字体簇</span><br><span class="line"><span class="built_in">font</span>-<span class="built_in">size</span>：字体大小</span><br><span class="line"><span class="built_in">font</span>-weight：字体粗细</span><br><span class="line"><span class="built_in">font</span>-style：字体样式</span><br><span class="line"><span class="built_in">font</span>-<span class="built_in">variant</span>：字体变化</span><br><span class="line"><span class="built_in">font</span>：字体简写</span><br><span class="line">字体簇</span><br></pre></td></tr></table></figure>
<p>font-family 用于设定元素中的文本使用什么字体，具体用法参考 font-family ，其常见应用和问题如下：</p>
<h3 id="字体来源"><a href="#字体来源" class="headerlink" title="字体来源"></a>字体来源</h3><p>用户机器中安装的字体；<br>保存在第三方网站上的字体，如：Typeket和Google Fonts<br>保存在自身Web服务器上的字体，这些字体通过@font-face引入；  </p>
<h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>font-family是可以继承的属性，因此它的值会遗传给所有后代元素。在实际应用font-family的时候，应该给整个页面设定一种主字体，然后只对那些需要使用不同字体的元素再应用 font-family。要为整个页面指定字体，可以设定 body 元素的 font-family 属性。  </p>
<h3 id="字体栈"><a href="#字体栈" class="headerlink" title="字体栈"></a>字体栈</h3><p>每种操作系统自带的字体不多，而且用户随时会安装和删除字体，因此不敢保证一定能应用某种字体来显示网页。为此，在指定文本的字体时，需要多列出几种后备字体，以防第一种字体无效。这个列表也叫字体栈，例如： body {font-family:”trebuchet ms”, tahoma, sans-serif;} 。注意，字体栈的最后一项要指定一个通用的字体类，如： sans-serif 。通用的字体类有：<br>serif：衬线字体，字符笔画的末端会有一些装饰线；<br>sans-serif：无衬线字体，字符笔画的末端没有装饰线；<br>monospace：等宽字体，每个字符的宽度相等（也称代码体）；<br>cursive：草书体或手写体；<br>fantasy：不能归入其他类别的字体（一般都是奇形怪状的字体）。  </p>
<h3 id="字体搭配"><a href="#字体搭配" class="headerlink" title="字体搭配"></a>字体搭配</h3><p>常见搭配<br>verdana, tahoma, sans-serif<br>helvetica, arial, sans-serif</p>
<p>如果字体名像 Trebuchet MS 一样多于一个单词（有空格），应该加上引号<br>font-family 的值（字体名）不区分大小写</p>
<h3 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h3><p>浏览器样式表默认为每个 HTML 元素都设定了 font-size，因此你在设定 font-size 的时候，其实是在修改默认值。由于字体大小在标记层次中是可以继承的，假如你对使用的字体大小单位怎么影响继承不十分了解，那很容易碰到有些字体莫名其妙变大或变小的问题。字体的具体用法可以参考 font-size ，常见应用和问题如下：</p>
<p>字体大小的默认值：16px<br>绝对单位 VS 相对单位</p>
<ul>
<li>绝对单位：<br>简介：使用像素、派卡（pica）或英寸设定字体大小，另外<br>优点：实际字体设定多大就多大，与祖先元素的字体大小无关。<br>缺点：在需要调整页面所有元素的字体大小时，必须一个一个地修改样式表中的 font-size，相当麻烦。<br>其他：设定绝对字体大小时，也可以使用关键字值，比如：x-small、medium、x-large等。具体可参考 Using_Keywords</li>
<li>相对单位<br>简介：使用百分比、 em 或 rem（根元素的字体大小）设定字体大小。<br>优点：使用相对大小后，通过调整 body 元素的字体大小，可以成比例地改变所有元素的字体大小。或者，至少能通过改变某个祖先元素，只影响它的所有子元素。在反复修改布局设计的时候，这样显然能节省时间<br>缺点：可能会出现意外的“连锁反应”<br>其他：设定相对字体大小时，也可以使用关键字值，比如：smaller、larger。</li>
<li>使用rem<br>简介：rem(root em)是CSS3新增的字体大小单位，也是相对单位，但rem是相对于HTML根元素的单位。<br>优点：既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。<br>缺点：存在浏览器兼容性问题，除了 IE8 及更早版本外，所有浏览器均已支持rem。<br>实际应用：对于不支持它的浏览器，需要多写一个绝对单位的声明，例如： p {font-size:14px; font-size:.875rem;}<br>浏览器缩放与字体大小调整对字体大小的影响<br>浏览器缩放：整体调整<br>字体大小调整：相对单位调整，绝对单位不变</li>
</ul>
<h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><p>字体样式默认是正体，也可以是斜体，具体用法参考 font-style 。在实际应用中，英文中的斜体主要表示强调，如果是为了表示强调设置font-style，那么在在 HTML 标记中直接使用 <em> 标签即可。</em></p>
<h3 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h3><p>字体粗体的主要作用是表示重要，具体用法参考 font-weight 。<br>在实际应用中，由于浏览器对font-weight的数字值实现各不相同，所以从常规字体到粗体的切换可能发生在不同的数值上——通常是 400。所以，对于font-weight属性来说，最好只用 bold 和 normal 这两个值。<br>此外，HTML 元素 strong 也表示重要，而它的默样式就是粗体，如果要突出文本中的某一个字或次，请使用strong。  </p>
<h3 id="字体变化"><a href="#字体变化" class="headerlink" title="字体变化"></a>字体变化</h3><p>font-variant属性除了normal，就只有一个值，即 small-caps——导致所有小写英文字母变成小型大写字母，具体用法请参考 font-variant</p>
<h3 id="属性简写"><a href="#属性简写" class="headerlink" title="属性简写"></a>属性简写</h3><p>font 属性是一个简写形式，通过它只要一条 CSS 声明就可以设定所有字体属性，例如： p {font: bold italic small-caps .9em helvetica, arial, sans-serif;} 。具体规则如下：</p>
<p>必须声明 font-size 和 font-family 的值<br>所有值必须按如下顺序声明：<br>font-weight、 font-style、 font-variant 不分先后；<br>然后是 font-size；<br>然后是 font-size；<br>font属性除了用于字体属性的简写外，还可以给它指定一些特殊的值，如下所示：</p>
<p>caption：使用有标题的系统控件的文本字体（如按钮，菜单等）（CSS2）<br>icon：使用图标标签的字体（CSS2）<br>menu：使用菜单的字体（CSS2）<br>message-box：使用信息对话框的文本字体（CSS2）<br>small-caption：使用小控件的字体（CSS2）<br>status-bar：使用窗口状态栏的字体（CSS2）</p>
<p>font<br>其他属性</p>
<p>font-stretch<br>font-size-adjust</p>
<h2 id="Web字体"><a href="#Web字体" class="headerlink" title="Web字体"></a>Web字体</h2><p>Web字体指的是非用户机器中的字体。目前，可以通过使用@font-face规则在网页中嵌入Web字体，并且该功能已经得到了浏览器广泛支持。设定Web字体的方式如下所示：<br>使用Google Web Fonts或Adobe的Typekit等公共字体<br>以Google Web Fonts为例，访问 <a href="https://www.google.com/fonts" target="_blank" rel="external">https://www.google.com/fonts</a> ，找到想要的字体，单击“Add To Collection”，然后单击页面底部的 Use 按钮。Google 就会生成一个指向刚刚选定字体的 <link> 标签，直接把它复制粘贴到你的 HTML 文件中即可。例如： <link href="https://fonts.googleapis.com/css?family=Open+Sans|Roboto" rel="stylesheet" type="text/css"> ，在CSS中引用下载的字体： font-family: ‘Open Sans’, Roboto, sans-serif;</p>
<p>使用@font-face规则使用@font-face规则的前提是可以从网站或第三方Web服务器下载到相应的字体包，以这种方式提供的字体，会在使用该字体的页面第一次加载时被浏览器下载并缓存起来，以后就不用下载了。使用@font-face的一个问题是不同的浏览器要求的字体格式不同，具体如下所示：</p>
<p>Firefox/Safari/Chrome/IOS Safari4.1以上版本：OTF——OpeType，TTF——TrueType；<br>IE：EOT——Embedded Open Type；<br>IOS Safari4.1之前版本：SVG——Scalable Vector Graphics；<br>Font Squirrel 提供了很多现成的字体包，每个字体包中都包含所有必要格式的字体和为每款浏览器提供正确格式的 CSS 代码。另外，Font Squirrel还有一个转换程序，能够把你上传的字体转换成字体包。下面就是 Font Squirrel 为 Ubuntu Titling Bold 字体生成的@font-face 代码。对于其他来源的字体，这种格式也是适用的。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="comment">/*这就是将来在字体栈中引用的字体族的名字*/</span></span><br><span class="line">  <span class="attribute">font-family</span>:<span class="string">'UbuntuTitlingBold'</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'UbuntuTitling-Bold-webfont.eot'</span>);</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'UbuntuTitling-Bold-webfont.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'UbuntuTitling-Bold-webfont.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'UbuntuTitling-Bold-webfont.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'UbuntuTitling-Bold-webfont.svg#UbuntuTitlingBold'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Web字体的其他问题：</p>
<p>Web字体可能导致机器中出现同名字体，以至混淆。为此，Web专家Paul Irish写过一个跨跨浏览器@font-face 的“笑脸版”，详细内容请参考 bulletproof-font-face-implementation-syntax ；<br>需要深入入了解@font-face规则的话，可以参考 How to use @font-face ；<br>除非浏览器统一支持一种字体格式，否则必须面对多种字体格式并存问题。如何使用@font-face规则处理多种字体格式，以及保证Internet Explorer取得必要的.eot格式的字体，可以参考 fixing-ie9-font-face-problems 。</p>
<h2 id="文本是什么"><a href="#文本是什么" class="headerlink" title="文本是什么"></a>文本是什么</h2><p>文本就是一组字或字符，比如章标题、段落正文等等，跟使用什么字体无关。CSS文本属性描述对文本的处理方式，比如：行高或者字符间距多大，有没有下划线和缩进。常用的CSS文本属性如下所示：</p>
<p>text-indent<br>letter-spacing<br>word-spacing<br>text-decoration<br>text-align<br>line-height<br>text-transform<br>vertical-align</p>
<h3 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h3><p>text-indent属性设定行内盒子相对于包含元素的起点，具体用法参考 text-indent ，常见问题和注意点如下：</p>
<h3 id="行内盒子"><a href="#行内盒子" class="headerlink" title="行内盒子"></a>行内盒子</h3><p>CSS 会把元素中的文本放在一个不可见的盒子里，比如对 p 元素中的一段文本，CSS 将其视为很长的一行，只不过在遇到容器边界时会折行。例如：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">border</span>:<span class="number">3px</span> solid red;&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;<span class="attribute">border</span>:<span class="number">1px</span> solid green;&#125;</span><br><span class="line">&lt;p&gt;&lt;span&gt;Here is <span class="selector-tag">a</span> long paragraph…&lt;/span&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>总结：实际上缩进的是这个文本盒子的起点位置，后续的行是不会缩进的。如果需要缩进整个段落，可以使用margin或padding。</p>
<p>text-indent适用于块容器，包含inline-block；</p>
<p>text-indent是可继承的，且子元素获得的继承值并不是祖先元素设定的值，而是计算的值。示例代码如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.root</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;    </span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.root</span> &gt; <span class="selector-tag">div</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;span&gt;行内儿子节点&lt;/span&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span&gt;行内块级孙子节点&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>总结：这里没有使用百分比，所以子元素的继承值都是30px。但需要注意示例中的前后两个span，后一个span的缩进较前一个span较大，这是由于后一个span是行内块元素，继承的缩进值起作用了。</p>
<p>text-indent允许设定负值，注意配合padding或margin；  </p>
<h3 id="字符间距"><a href="#字符间距" class="headerlink" title="字符间距"></a>字符间距</h3><p>letter-spacing为正值时增大字符间距，为负值时缩小间距。无论设定字体大小时使用的是什么单位，设定字符间距一定要用相对单位，以便字间距能随字体大小同比例变化。具体用法请参考[letter-spacing]。( <a href="http://css.doyoe.com/properties/text/letter-spacing.htm" target="_blank" rel="external">http://css.doyoe.com/properties/text/letter-spacing.htm</a> )</p>
<h3 id="单词间距"><a href="#单词间距" class="headerlink" title="单词间距"></a>单词间距</h3><p>CSS把任何两边有空白的字符和字符串都视作“单词”，纯汉字文本一段之中没有空格，因此单词间距对中文网页几乎没有用，但对中英混排段落可能有用。单词间距属性具体用法请参考 word-spacing 。</p>
<h3 id="文本装饰"><a href="#文本装饰" class="headerlink" title="文本装饰"></a>文本装饰</h3><p>文本装饰有下划线、上划线、贯串线和闪烁等样式，具体用法可参考 text-decoration</p>
<h3 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h3><p>一般文本对齐方式有：左对齐/left、右对齐/right、居中对齐/center，以及两端对齐/justify，其中两端对齐是CSS3新增的属性。除此之外，CSS3还定义了一些额外的属性，但浏览器都不怎么支持，具体内容请参考 text-align 。</p>
<p>在实际应用中，如果对元素设置了文本对齐属性，而对子元素是如何显示存在疑惑时，只要根据一下规则去计算即可：</p>
<p>文本对齐属性只适用于块容器（包含行内块元素）；<br>文本对齐属性是可继承的<br>如果没有子元素，则文本内容直接根据父元素定义的对齐属性在父元素盒子里显示；<br>如果子元素是行内非块元素，将其当做文本内容处理（虽然该子元素会继承对齐属性，但是该属性不适用于行内非块元素）；<br>如果子元素是行内块元素，则该元素会按照父元素的文本对齐属性在父元素盒子里显示。此外，该元素会继承父元素的对齐属性，按照以上规则处理其子元素<br>如果子元素非行内块元素，则该元素会继承父元素的对齐属性，然后继续按照以上规则处理子元素；<br>行高</p>
<p>CSS 中的行高平均分布在一行文本的上方和下方，具体用法参考 line-height 。常见问题和注意点如下：</p>
<p>适用于所有元素，且可继承；<br>行高小于字体大小时，行与行之间会出现重叠；<br>实际应用时，要使用相对单位（百分比或乘积因子），避免使用绝对单位（如像素）——字体增大时，可能会出现行与行的重叠；<br>font快捷属性：以复合值的形式把 font-size 和 line-height 值写在一块，例如 div#intro {font:1.2em/1.4 helvetica, arial, sans-serif;} ；<br>文本行高为normal不代表就是1倍于字体大小<br>文本转换</p>
<p>文本转换属性用于转换元素中文本的大小写，它可以设定英文文本首字母大写、全部字母大写和全部字母小写。具体用法可参考 text-transform 。</p>
<h3 id="垂直对齐"><a href="#垂直对齐" class="headerlink" title="垂直对齐"></a>垂直对齐</h3><p>垂直对齐属性 vertical-align 以基线为参照上下移动文本， 具体用法参考 vertical-align 。常见问题和注意点：<br>垂直对齐属性只适用于行内元素；<br>HTML标签 <sup> 和 <sub> 有默认的上标和下标样式，但效果不是很好；<br>应用场景：公式或化学分子式中的上标和下标，文本中脚注的角标；</sub></sup></p>
<h3 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h3><p>white-space<br>tab-size<br>word-break<br>word-wrap<br>overflow-wrap<br>text-align-last<br>text-justify<br>text-size-adjust<br>最佳实战</p>
<p>虽然学习了字体和文本属性，但不一定能够在实际应用中搭配好字体和文本样式。文字排版讲求匀称，一般是由看不见的网格，框定页面文字的走向和布局，匀称的版式可以增强页面的可读性。</p>
<p>在线资源：</p>
<ul>
<li><a href="http://ilovetypography.com/" target="_blank" rel="external">http://ilovetypography.com/</a></li>
<li><a href="http://www.thinkingwithtype.com/" target="_blank" rel="external">http://www.thinkingwithtype.com/</a></li>
<li><a href="http://webtypography.net/" target="_blank" rel="external">http://webtypography.net/</a></li>
</ul>
<p>一、字体与文本</p>
<p>字体与文本的区别：</p>
<p>字体主要涉及文字的大小和外观（可应用于单个字符）。<br>文本主要涉及对字体的处理（只能应用于文本块）</p>
<p>二、指定字体</p>
<p>CSS中指定字体的最简单方式，就是使用五种通用的字体集合</p>
<p>serif ：该字体在字符笔画末端有叫做衬线的小细节（Time New Roman、Georgia、Palatino）<br>sans-serif：末端无任何细节（Trebuchet MS、Arial、Verdana）<br>monospace：每个字母宽度相等（例如，i与m具有相同的宽度），通常用于排版代码块或模仿打印效果<br>cursive：手写笔记，但是比手写效果要整洁（Comic Sans MS、Brush Script）<br>fantasy：不能归入其他种类的字体</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*指定通用字体，浏览器会选择默认的Helvetica或者Arial*/</span></span><br><span class="line"><span class="comment">/*font-family是一个可继承的属性，值会传递给所有的后代*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">font-family</span>: sans-serif;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*以首先字母为开头，以通用字体结束 */</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">font-family</span>: <span class="string">"hoefler text"</span>,times,serif;&#125;</span><br></pre></td></tr></table></figure>
<p>三、设置字体大小</p>
<p>设置字体大小，可以使用三种类型的值：</p>
<p>绝对值：像素、英寸<br>相对值：百分比、em<br>运动衫尺码关键字：x-small、small、large、xx-large</p>
<p>使用相对大小字体的优点：</p>
<p>在文字大小中选择了更大或者更小之后，所有字体都能成比例地缩放<br>只需要改变body标签的字体大小，按比例改变文本的大小</p>
<p>使用相对大小字体的缺点</p>
<p>可能因字体大小的继承而导致极小字体的显示<br>用户很容易“破坏”没有考虑到文本缩放因素的CSS页面布局</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: verdana,arial,sans-serif;</span><br><span class="line">    <span class="comment">/*为字体设置了可以调准的基准大小,1em一般为16像素高*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h3</span>&#123;</span><br><span class="line">    <span class="comment">/*h3的默认大小为1.2em(19.2px)，重新设置为0.8em*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.8em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*分别为ol和ul设置大小，而不是为li设置大小，方便后续自定义*/</span></span><br><span class="line"><span class="selector-tag">ol</span>&#123;<span class="attribute">font-size</span>: .<span class="number">75em</span>;&#125;</span><br><span class="line"><span class="selector-tag">ul</span>&#123;<span class="attribute">font-size</span>: .<span class="number">75em</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;<span class="attribute">font-size</span>: .<span class="number">7em</span>;&#125;</span><br><span class="line"><span class="comment">/*规定ul的子元素a从父元素中继承属性值（如果没有使用inherit，a的值就会变成0.75*0.7em，导致过小*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">a</span> &#123;<span class="attribute">font-size</span>: inherit;&#125;</span><br></pre></td></tr></table></figure>
<p>四、字体属性</p>
<p>font-style    定义文本的直立或倾斜    italic、normal、oblique<br>font-weight    定义文本的粗细    100、200、…、900、lighter、normal、bold、bolder<br>font-variant    转换成小型大写字母    small-caps、normal</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*font-style有两个作用：使字体倾斜，或者使倾斜的字体直立*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">font-style</span>: italic;&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;<span class="attribute">font-style</span>: normal;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*加粗超链接的内容*/</span></span><br><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">font-weight</span>: bold;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*将h3标题转换为小型大写字母*/</span></span><br><span class="line"><span class="selector-tag">h3</span>&#123;<span class="attribute">font-variant</span>: small-caps;&#125;</span><br></pre></td></tr></table></figure>
<p>五、字体属性的简写</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="comment">/*始终要保证声明font-size 和 font-family的值*/</span></span><br><span class="line">    <span class="comment">/*指定顺序：先指定font-weight、font-style、font-variant（任意顺序），然后依次指定font-size、font-family*/</span></span><br><span class="line">    <span class="attribute">font</span>:bold italic small-caps .<span class="number">75em</span> verdana, arial, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>六、CSS蛇形文本</p>
<p>CSS会把一个盒子放到位于元素中的文本周围，只在开头和结尾是闭合的<br>text-indent 只能缩进首行<br>要想缩进整个段落，需要使用margin-left将整个容器往右侧推动</p>
<p>七、文本属性</p>
<p>text-indent<br>缩进元素中文本的首行<br>任何长度值</p>
<p>vertical-align<br>相对于基准线将文本向上或者向下方移动<br>任何长度值、sup、sub、top、middle、bottom</p>
<p>letter-spacing<br>设置字符间距<br>任何长度值</p>
<p>word-spacing<br>设置字间距<br>任何长度值</p>
<p>text-decoration<br>向文本添加修饰<br>none、underline、overline、line-through、blink</p>
<p>text-align<br>使文本与包含元素对齐<br>left、right、center、justify</p>
<p>line-height<br>设置行高（行与行基准线之间的距离）<br>任何数字值（不需要指定单位）</p>
<p>text-transform<br>改变元素中文本的大小写形式<br>uppercase、lowercase、capitalize、none</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*缩进首行文本*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">text-indent</span>: <span class="number">3em</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*为段落指定一个大于负缩进值的正左外边距，产生悬挂段落的效果*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">text-indent</span>: -<span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置字符间距*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: .<span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置单词间距*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">word-spacing</span>: .<span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*去掉文本的下划线*/</span></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*需要在包含元素上设置text-align属性，使其子元素内容对齐*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置行高*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#intro</span> &#123;</span><br><span class="line">    <span class="comment">/*行高设置为字体的1.4倍*/</span></span><br><span class="line">    <span class="comment">/*行高比文本高出的部分，会再文本的上方和下方平均分配*/</span></span><br><span class="line">    <span class="attribute">font</span>:<span class="number">1.2em</span>/<span class="number">1.4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*将每个单词的首字母变成大写*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">text-transform</span>: capitalize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: <span class="number">50%</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown语法]]></title>
      <url>http://yoursite.com/2014/12/29/markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>标题能显示出文章的结构。行首插入1-6个 # ，每增加一个 # 表示更深入层次的内容，对应到标题的深度由 1-6 阶。  </p>
</blockquote>
<a id="more"></a>
<h2 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">链接 <span class="symbol">:</span>[Title](URL)  </span><br><span class="line">加粗 <span class="symbol">:**Bold**</span>  </span><br><span class="line">斜体字 <span class="symbol">:*Italics*</span>  </span><br><span class="line">删除线 <span class="symbol">:~~text~~</span>  </span><br><span class="line">高亮 <span class="symbol">:==text=</span>=  </span><br><span class="line">段落 : 段落之间空一行  </span><br><span class="line">换行符 : 一行结束时输入两个空格  </span><br><span class="line">列表 <span class="symbol">:*</span> 添加星号成为一个新的列表项。  </span><br><span class="line">引用 <span class="symbol">:&gt;</span> 引用内容  </span><br><span class="line">内嵌代码 : `alert(<span class="string">'Hello World'</span>);`  </span><br><span class="line">画水平线 (HR) <span class="symbol">:</span>分割线用三个以上的星号 * 、减号-或下划线 <span class="number">_</span> 表示</span><br></pre></td></tr></table></figure>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>具体使用方式请看示例。  </p>
<p>——: 为右对齐。<br>:—— 为左对齐。<br>:——: 为居中对齐。<br>——- 为使用默认居中对齐。  </p>
<table>
<thead>
<tr>
<th style="text-align:right">序号</th>
<th style="text-align:center">交易名</th>
<th style="text-align:left">交易说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:center">prfcfg</td>
<td style="text-align:left">菜单配置</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:center">gentmo</td>
<td style="text-align:left">编译所有交易</td>
</tr>
<tr>
<td style="text-align:right">100000</td>
<td style="text-align:center">sysdba</td>
<td style="text-align:left">数据库表模型汇总</td>
</tr>
</tbody>
</table>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表包括无序列表和有序列表两类。列表的每一项都使用 标记 + 分隔（至少一个空格或制表符） + 段落 的格式，段落的内容可以跨行，用空格缩进，还可以包含代码块、引用块等。如果在一个列表项里添加用空行隔开的多个段落，需要在每个段落开头添加至少两个空格。如果要表示多级列表，需要在下一级列表标记前加上至少两个空格或一个制表符，多级列表可以混用不同的标记。  </p>
<p>无序列表使用星号 * 、加号 + 或是减号 - 作为列表标记，标记不能混用，否则会视为不同的列表。  </p>
<p>有序列表则使用数字和一个英文句点表示，数字的内容是任意的，并不会影响 HTML 显示的数字。有时不需要列表，但在段落开头的文字是数字加句点的格式，为了不被 Markdown 解析成列表，需要在句点前加上反斜线，如： 2016. Something Begin.  </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">+ 无序列表项<span class="number">1</span></span><br><span class="line">+ 无序列表项<span class="number">2</span></span><br><span class="line"> + 下一级列表</span><br><span class="line">   <span class="number">2.</span> 再下一级列表<span class="number">1</span></span><br><span class="line">   <span class="number">2.</span> 再下一级列表<span class="number">2</span></span><br><span class="line">- 不同标记视为不同列表</span><br><span class="line">- 列表还可以</span><br><span class="line">    # 包含代码块</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">- 或者引用</span><br><span class="line">&gt; I have a dream!</span><br><span class="line">- 以及多行或多段。</span><br><span class="line">第二行</span><br><span class="line"></span><br><span class="line">  第二段</span><br><span class="line"></span><br><span class="line"><span class="number">2016</span>\. Something Begin.</span><br></pre></td></tr></table></figure>
<ul>
<li>无序列表项1</li>
<li>无序列表项2<ul>
<li>下一级列表<ol>
<li>再下一级列表1</li>
<li>再下一级列表2</li>
</ol>
</li>
</ul>
</li>
</ul>
<ul>
<li>不同标记视为不同列表</li>
<li>列表还可以</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 包含代码块</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>或者引用<blockquote>
<p>I have a dream!</p>
</blockquote>
</li>
<li><p>以及多行或多段。<br>第二行</p>
<p>第二段</p>
</li>
</ul>
<p>2016. Something Begin.</p>
<h2 id="转义符号"><a href="#转义符号" class="headerlink" title="转义符号"></a>转义符号</h2><p>对于 Markdown 中的语法符号，前面加反斜线 \ 即可显示符号本身。包括</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">\\ 反斜线  </span><br><span class="line">\` 重音号  </span><br><span class="line">\* 星号  </span><br><span class="line">\_ 下划线  </span><br><span class="line">\&#123;\&#125; \[\] \(\) 括号  </span><br><span class="line">\# 井号  </span><br><span class="line">\+ 加号  </span><br><span class="line">\- 减号  </span><br><span class="line">\. 句点  </span><br><span class="line">\! 惊叹号</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">## 任务列表  </span><br><span class="line"></span><br><span class="line">需要在 Markdown 列表项的段落部分用 [ ] 开头，也可以用 [x] 开头表示一个已选择的任务项。  </span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line">- [x] 学习 Markdown</span><br><span class="line">- [ ] 使用 Markdown</span><br><span class="line">  <span class="number">1.</span> [ ] 写博客</span><br></pre></td></tr></table></figure>
<ul>
<li>[x] 学习 Markdown</li>
<li>[ ] 使用 Markdown<ol>
<li>[ ] 写博客</li>
</ol>
</li>
</ul>
<h2 id="emoji表情使用"><a href="#emoji表情使用" class="headerlink" title="emoji表情使用"></a>emoji表情使用</h2><p>:EMOJICODE: 的格式，详细的表情列表参见 EMOJI CHEAT SHEET 。</p>
<pre><code>:man: :thumbsup: :sunny: :bug:
</code></pre><p>:man: :thumbsup: :sunny: :bug:</p>
<h2 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h2><p>Markdown 中可以直接书写大部分HTML标签.其中在HTML的区块类型标签<code>&lt;div&gt;&lt;table&gt;&lt;pre&gt;&lt;p&gt;</code>等内的，Markdown语法会失效，在HTML行内型标签<span><cite><del>等内，Markdown语法仍然有效。<br>需要注意的是，在 HTML 标签内，书写特殊字符 &lt; 和 &amp; 仍然需要用它们的替代形式 &lt;和 &amp;表示。在 Markdown 中，也能用 &lt; 和 &amp; 的这种特殊形式。</del></cite></span></p>
<p>This is <a href="http://cn.bing.com" target="_blank" rel="external">Markdown</a> regular paragraph.<br>1 &lt; 3 &amp; 5<br>2 &lt; 4 &amp; 6  </p>
<table border="1" bgcolor="yellowgreen"><br>    <tr><br>        <td><strong>count</strong> 1 &lt; 3 &amp; 5</td><br>        <td><strong>count</strong> 2 &lt; 4 &amp; 6</td><br>    </tr><br></table>

<h2 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h2><p>链接用于跳转到其他页面，包含行内式和参考式两种样式，还可以使用简单的自动链接。跳转地址可以用 / 开头的相对路径引用本机资源。  </p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">行内式：链接文字和跳转地址写在一起。如：  </span><br><span class="line">[<span class="string">an example</span>](<span class="link">http://www.cnblogs.com/zhuyuanhao/ "链接title"</span>)  </span><br><span class="line"></span><br><span class="line">an example</span><br><span class="line">参考式：链接文字和跳转地址分开写，通过 [id] 标识联系起来。 [id] 标识可以包含字母、数字、空白和标点符号，但是并不区分大小写。跳转地址部分可以出现在文件的任意地方。  </span><br><span class="line"></span><br><span class="line">This is [<span class="string">an example</span>][<span class="symbol">ID 2</span>] reference-style link.  </span><br><span class="line"></span><br><span class="line">[<span class="symbol">id 2</span>]: <span class="link">http://www.cnblogs.com/zhuyuanhao/ "可选title, 可以用单引号'、双引号"或括号()包着，也可以另起一行并缩进"  </span></span><br><span class="line">[<span class="symbol">iD 3</span>]: <span class="link">&lt;http://www.cnblogs.com/zhuyuanhao/&gt;   </span></span><br><span class="line"><span class="code">    '跳转地址也可以用尖括号包起来'</span></span><br><span class="line">隐式参考链接：使用空标识 [] ，在跳转地址处使用链接文字作为标识。</span><br><span class="line"></span><br><span class="line">[<span class="string">Google</span>][<span class="symbol"></span>]  </span><br><span class="line"></span><br><span class="line">[<span class="symbol">Google</span>]: <span class="link">http://google.com/ "Google Inc."  </span></span><br><span class="line">自动链接：对于网址和电子邮件信箱，只要是用尖括号包起来，Markdown 就会自动把它转成链接，链接文字和跳转地址相同。  </span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">www.cnblogs.com</span>/<span class="attr">zhuyuanhao</span>/&gt;</span></span>  </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">address@example.com</span>&gt;</span></span>  </span><br><span class="line">http://www.cnblogs.com/zhuyuanhao/  </span><br><span class="line"></span><br><span class="line">address@example.com  </span><br><span class="line">图片用于在当前页面显示图片，也包含行内式和参考式，只需要在链接的样式前加一个惊叹号 ! ，就会被识别为图片。可以使用相对路径引用本地的图片，也能使用 url 引用其他网站的图片。不过到目前为止，Markdown 还没有办法指定图片的宽高。  </span><br><span class="line"></span><br><span class="line">行内式：</span><br><span class="line">![<span class="string">Alt text</span>](<span class="link">/path/to/img.jpg "Optional title"</span>)  </span><br><span class="line">参考式：</span><br><span class="line">![<span class="string">Alt text</span>][<span class="symbol">id</span>]    </span><br><span class="line">[<span class="symbol">id</span>]: <span class="link">url/to/image  "Optional title attribute"</span></span><br></pre></td></tr></table></figure>
<p>行内式：链接文字和跳转地址写在一起。如：  </p>
<p><a href="http://www.cnblogs.com/zhuyuanhao/" title="链接title" target="_blank" rel="external">an example</a>  </p>
<p>an example<br>参考式：链接文字和跳转地址分开写，通过 <a href="url/to/image" title="Optional title attribute">id</a> 标识联系起来。 <a href="url/to/image" title="Optional title attribute">id</a> 标识可以包含字母、数字、空白和标点符号，但是并不区分大小写。跳转地址部分可以出现在文件的任意地方。  </p>
<p>This is <a href="http://www.cnblogs.com/zhuyuanhao/" title="可选title, 可以用单引号&#39;、双引号&quot;或括号()包着，也可以另起一行并缩进" target="_blank" rel="external">an example</a> reference-style link.  </p>
<pre><code>&apos;跳转地址也可以用尖括号包起来&apos;
</code></pre><p>隐式参考链接：使用空标识 [] ，在跳转地址处使用链接文字作为标识。</p>
<p><a href="http://google.com/" title="Google Inc." target="_blank" rel="external">Google</a>  </p>
<p>自动链接：对于网址和电子邮件信箱，只要是用尖括号包起来，Markdown 就会自动把它转成链接，链接文字和跳转地址相同。  </p>
<p><a href="http://www.cnblogs.com/zhuyuanhao/" target="_blank" rel="external">http://www.cnblogs.com/zhuyuanhao/</a><br><a href="&#109;&#x61;&#105;&#108;&#116;&#x6f;&#58;&#97;&#100;&#x64;&#x72;&#x65;&#x73;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#108;&#x65;&#x2e;&#99;&#111;&#x6d;">&#97;&#100;&#x64;&#x72;&#x65;&#x73;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#108;&#x65;&#x2e;&#99;&#111;&#x6d;</a><br><a href="http://www.cnblogs.com/zhuyuanhao/" target="_blank" rel="external">http://www.cnblogs.com/zhuyuanhao/</a>  </p>
<p>address@example.com<br>图片用于在当前页面显示图片，也包含行内式和参考式，只需要在链接的样式前加一个惊叹号 ! ，就会被识别为图片。可以使用相对路径引用本地的图片，也能使用 url 引用其他网站的图片。不过到目前为止，Markdown 还没有办法指定图片的宽高。  </p>
<p>行内式：<br><img src="/path/to/img.jpg" alt="Alt text" title="Optional title"><br>参考式：<br><img src="url/to/image" alt="Alt text" title="Optional title attribute">    </p>
<h2 id="自动生成目录"><a href="#自动生成目录" class="headerlink" title="自动生成目录"></a>自动生成目录</h2><p>在需要目录出现的地方（一般在文章一开始）放置一个标记，这样会自动生成一个嵌套的包含所有标题的列表。默认的标记是[TOC]。</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[TOC]</span><br><span class="line"></span><br><span class="line"><span class="meta"># 概述</span></span><br><span class="line"></span><br><span class="line"><span class="meta">## 定义</span></span><br><span class="line"></span><br><span class="line"><span class="meta">## 用处</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 结论</span></span><br></pre></td></tr></table></figure>
<p>最前面的那个目录就是用 [TOC]生成的。</p>
<h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注用于为正文中的某个条目添加补充注释，说明该条目的引文出处，跟参考文献一样，脚注一般位于文档的末尾，文章内以数字标注。在Markdown Extra也可以很容易的实现脚注。</p>
<p>语法说明：</p>
<p>在需要标记脚注文字的后面添加一个方括号，方括号中的内容必须以^开头，再接着是数字或字符串标记：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">脚注[ ^1]有一个标签[^label]和该标签的定义[^!DEF].</span><br><span class="line">接着，在文件的任意地方，你可以把这个脚注的内容定义出来：  </span><br><span class="line">[<span class="symbol"> ^1</span>]: <span class="link">这是一个脚注</span></span><br><span class="line">[<span class="symbol">^label</span>]: <span class="link">这是脚注的标签</span></span><br><span class="line">[<span class="symbol">^!DEF</span>]: <span class="link">这是脚注标签的定义</span></span><br></pre></td></tr></table></figure>
<p>脚注<a href="这是一个脚注"> ^1</a>有一个标签<a href="这是脚注的标签">^label</a>和该标签的定义<a href="这是脚注标签的定义">^!DEF</a>.<br>接着，在文件的任意地方，你可以把这个脚注的内容定义出来：  </p>
<p>脚注内容定义的形式：</p>
<p>前面引用脚注的标签符号<br>接着一个冒号<br>再接着一个以上的空格或制表符<br>最后是脚注定义的内容。<br>脚注定义的内容可以包含多行、代码区块、区块引用和大多数其他markdown格式的内容。</p>
<p>例子：</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这是一个脚注[ ^footnote].</span><br><span class="line"></span><br><span class="line">[ ^footnote]: 脚注定义内容的第一行内容.</span><br><span class="line">定义内容的第二行.</span><br><span class="line">&gt; 一个包含多行的</span><br><span class="line">&gt; 区块引用.</span><br></pre></td></tr></table></figure>
<p>转为HTML后为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个脚注<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#fn:footnote"</span> <span class="attr">id</span>=<span class="string">"fnref:footnote"</span> <span class="attr">title</span>=<span class="string">"See footnote"</span> <span class="attr">class</span>=<span class="string">"footnote"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footnotes"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"fn:footnote"</span>&gt;</span>脚注定义内容的第一行内容. <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">定义内容的第二行.</span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span> 一个包含多行的 <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    &gt; 区块引用.</span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#fnref:footnote"</span> <span class="attr">title</span>=<span class="string">"Return to article"</span> <span class="attr">class</span>=<span class="string">"reversefootnote"</span>&gt;</span>↩<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>默认情况下，脚注内容位于生成的 HTML 文档末尾，上面的脚注内容在该文章的末尾可以看到。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>图片链接  公式暂不涉及</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery中的Ajax]]></title>
      <url>http://yoursite.com/2014/12/27/jQuery%E4%B8%AD%E7%9A%84Ajax/</url>
      <content type="html"><![CDATA[<blockquote>
<p>原始ajax的五个步骤</p>
</blockquote>
<ol>
<li>准备发送请求 (调用 new XMLHttpRequest())   (readyState == 0)</li>
<li>打开一个请求  (调用open方法)  (readyState == 1)</li>
<li>发送请求 (调用send方法,并且接收到响应头)  (readyState == 2)</li>
<li>开始接受到请求 (readyState == 3)</li>
<li>接受完成 (readyState == 4)</li>
</ol>
<a id="more"></a>
<h3 id="Ajax核心对象XMLHttpRequest"><a href="#Ajax核心对象XMLHttpRequest" class="headerlink" title="Ajax核心对象XMLHttpRequest"></a>Ajax核心对象XMLHttpRequest</h3><p>这个对象最早在IE中被实现，不过它最早的时候是通过ActiveXObject实现的，如果不需要管兼容的话，IE9或者其他浏览器使用 new XMLHttpRequest() 就能创建了一个 XHR (XMLHttpRequest) 对象,IE中由于存在三个版本的XHR对象，所以如果需要兼容，需要对这三个版本进行处理，从中选出IE浏览器中最新支持对象：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="literal">undefined</span>)&#123;</span><br><span class="line">xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> ActiveXObject != <span class="literal">undefined</span>)&#123;</span><br><span class="line">xhr = (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> versions = [<span class="string">"MSXML2.XMLHttp.6.0"</span>,<span class="string">"MSXML2.XMLHttp.3.0"</span>,<span class="string">"MSXML2.XMLHttp"</span>]();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>,ilen = versions.length;i\&lt;ilen;i++) &#123;</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">//避免不支持当前版本报错</span></span><br><span class="line">  <span class="keyword">new</span> ActiveXObject[versions\[i]()];</span><br><span class="line">  <span class="comment">//保存当前支持的版本</span></span><br><span class="line">  argument.callee.ActiveXString = versions[i]();</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">  &#125;     </span><br><span class="line">  <span class="comment">//返回一个当前浏览器支持的版本的XHR对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(argument.callee.ActiveXString);</span><br><span class="line">&#125;)() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这段代码就做了第一阶段的事情，初始化一个请求</p>
<h3 id="打开一个请求-open"><a href="#打开一个请求-open" class="headerlink" title="打开一个请求 open"></a>打开一个请求 open</h3><p>xhr.open(); // xhr是通过new XMLHttpRequest()返回的对象 并没有发送请求，它只定义了请求的类型，url，以及是否异步，如： xhr.open(“get”,”index.html”, false ); 最常见的请求类型有post和get两种方法，url如果没有指定完整的（带协议前缀的如: <a href="http://,https://" target="_blank" rel="external">http://,https://</a> ）url地址，那么它的地址相对当前执行代码的页面，Ajax最优秀的地方便是可以异步同步发送请求，第三个参数false代表同步，true代表异步。</p>
<h3 id="post跟get的区别"><a href="#post跟get的区别" class="headerlink" title="post跟get的区别"></a>post跟get的区别</h3><p>对于前端，对它能体现对大的区别就是传参不同，get的参数放在url地址后面以 ?abc=1&amp;bcd=2&amp;dd=3&amp;s=4 的形式传递，而post的参数放在请求主体内，通过 xhr.send() 发送，  xhr.send(“任何想发送给服务器的字符串”);<br>url<br>url相对与执行当前代码的页面。<br>在页面<a href="http://mydomin.com/test/obj/index.html中调用了xhr.send()表示请求在index.html页面发送，那么url响应的地址就是http://mydomin.com/test/obj/我的请求的url地址。" target="_blank" rel="external">http://mydomin.com/test/obj/index.html中调用了xhr.send()表示请求在index.html页面发送，那么url响应的地址就是http://mydomin.com/test/obj/我的请求的url地址。</a><br>如果是一个完整的地址，那么必须是同域的情况下才允许发送请求，否在会引发安全报错，同域：同端口同协议的url地址<br><a href="http://baidu.com:80" target="_blank" rel="external">http://baidu.com:80</a><br>协议:http<br>端口:80</p>
<h3 id="同步与异步的区别"><a href="#同步与异步的区别" class="headerlink" title="同步与异步的区别"></a>同步与异步的区别</h3><p>同步请求必须接收完(到达第四阶段)响应才会继续往下执行代码，<br>而异步请求会在发出一个请求继续执行不会阻碍流程，<br>不管是同步或在异步当接收完完响应之后会调用onreadystatechange方法，当xhr属性的readystate的值为4（第四阶段）的时候表示接受完成 xhr.onreadystatechange =function (e){} ，除了第零阶段，几乎每个阶段都对调用onreadystatechange方法，但取决于浏览器的实现。<br>发送一个请求 xhr.send()<br>xhr.send() 阶段才是真真的发起请求阶段，几乎可以用来发送任何数据，在这个阶段，<br>如果是异步请求，那么调用之后就会直接执行下面的代码，<br>如果是同步请求，那么需要等到readyState的值为4也就是接收完所有响应之后才会往下执行。</p>
<h3 id="接受响应"><a href="#接受响应" class="headerlink" title="接受响应"></a>接受响应</h3><p>xhr对象有四个关于响应的属性</p>
<ul>
<li>responseText  (响应文本)</li>
<li>responseXML     （如果响应头是text/xml或在application/xml那么响应数据会添加到这个属性）</li>
<li>status (响应状态码,200,304,404,500等等)</li>
<li>statusText (响应状态说明)<br>无论响应的是什么样的内容，都会把服务器返回的内容存在 xhr.responseText 中，所以有时候只需关注  xhr.responseText ，只有响应头的类型是text/xml或在application/xml的时候 xhr.responseXML 才会填充响应数据</li>
</ul>
<h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><p>statusText：表示对响应状态的说明，不过有时候并不能准确解释状态，如我直接访问一个发起一个跨域的请求的时候， statusText 为空，并且每个浏览器对状态的描述并不是所有的都一致。<br>虽然jQuery已经把所有的步骤都封装好，让技术员指需要关注成功与否，但很多时候了解其中的原理，处理问题会让人更加灵活并且得心应手。</p>
<h2 id="jQuery中的Ajax"><a href="#jQuery中的Ajax" class="headerlink" title="jQuery中的Ajax"></a>jQuery中的Ajax</h2><blockquote>
<p>jQuery 对 Ajax 做了大量的封装，我们使用起来也较为方便，不需要去考虑浏览器兼容性。对于封装的方式，jQuery采用了三层封装：最底层的封装方法为：$.ajax()，而通过这层封装了第二层有三种方法：.load()、$.get()和$.post()，最高层是$.getScript()和$.getJSON()方法。</p>
</blockquote>
<h3 id="Ajax中的load-方法"><a href="#Ajax中的load-方法" class="headerlink" title="Ajax中的load()方法"></a>Ajax中的load()方法</h3><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**   Ajax中的load方法（局部方法，可以直接绑定在需要获取的元素上）</span><br><span class="line">  @<span class="keyword">param</span> &#123;String&#125;        <span class="keyword">url</span>  必须，获取文件地址</span><br><span class="line">  @<span class="keyword">param</span> &#123;JSON <span class="keyword">or</span> String&#125;          可选，键值对方式的请求参数或者（使用键值对   形式，请求将转化成post）</span><br><span class="line">  @<span class="keyword">param</span> &#123;Function&#125;      可选，请求成功的回调函数</span><br><span class="line">  @<span class="keyword">config</span>   &#123;String&#125;   <span class="keyword">responseText</span>         获得字符串形式的响应数据</span><br><span class="line">  @<span class="keyword">config</span>   &#123;String&#125;   <span class="keyword">textStatus</span>            文本方式返回HTTP状态码</span><br><span class="line">  @<span class="keyword">config</span>   &#123;Object&#125;   <span class="keyword">XMLHttpRequest</span>        <span class="keyword">xhr</span>对象，有多种属性</span><br><span class="line"> */</span><br><span class="line">.load(url, data, complete(responseText, textStatus, XMLHttpRequest));</span><br><span class="line"></span><br><span class="line">例如下面这段代码  </span><br><span class="line"></span><br><span class="line">	$(<span class="string">'button'</span>).click(function () &#123;</span><br><span class="line">	$(<span class="string">'#box'</span>).load(<span class="string">'test.php'</span>, &#123;url : <span class="string">'guowen'</span>&#125;);</span><br><span class="line">	&#125;);</span><br></pre></td></tr></table></figure>
<p>在控制台可以看到请求为POST，（注意：这里第二个参数若是字符串的情况，例如”url=guowen”，请求仍然为GET。）<br>所以服务器端php文件应该如此设置：  </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ($_POST[<span class="string">"url"</span>]() == <span class="string">"guowen"</span>) &#123;<span class="comment">//get请求把POST更改一下就好了</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\&lt;a href='http://guowenfh.github.io/'\&gt;三省吾身丶丶\&lt;/a\&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"其他网站"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>关于XHR对象上的属性，和HTTP状态码，参考我原来的博客。</p>
<h3 id="get-和-post"><a href="#get-和-post" class="headerlink" title="$.get()和$.post()"></a>$.get()和$.post()</h3><blockquote>
<p>.load()方法是局部方法，因为他需要一个包含元素的 jQuery 对象作为前缀。而$.get()和$.post()是全局方法，无须指定某个元素。对于用途而言，.load()适合做静态文件的异步获取，而对于需要传递参数到服务器页面的，$.get()和$.post()更加合适。</p>
</blockquote>
<p>$.get()方法有四个参数，前面三个参数和.load()一样，多了一个第四参数type，即服务器返回的内容格式：包括xml、html、script、json、jsonp和text。第一个参数为必选参数，后面三个为可选参数<br>GET方式请求会直接在html后以?Key=value跟随，所以，有三种形式请求数据，  </p>
<ol>
<li>直接跟在url后</li>
<li>键值对形式的{url:”guowen”}</li>
<li>字符串形式的”url=guowen”<br>POST请求方式除去不能直接跟在url后之外，剩余两个，使用方法一样<br>注意: 与.load()方法不同的是：.load()方法根据第二个参数的不同类型，请求方式会改变，但这里已经是两个独立的方法了，所以请求类型不会进行转换。<br>第四个参数一般都不进行设置，jQuery会自动转换其类型。强制设置时，有可能会连标签一起返回。<br>至于POST与GET方式请求的差别，在我原来的博客中也有写到，这里就不赘述了。</li>
</ol>
<h3 id="getScript-和-getJSON"><a href="#getScript-和-getJSON" class="headerlink" title="$.getScript()和$.getJSON()"></a>$.getScript()和$.getJSON()</h3><p>jQuery提供了一组用于特定异步加载的方法：$.getScript()，用于加载特定的JS文件；$.getJSON()，用于专门加载JSON文件。<br>$.getJSON()方法与之前的使用方法类似，就是把第四个参数，类型强制设置成了JSON。<br>有时我们希望能够特定的情况再加载JS文件，而不是一开始把所有JS文件都加载了，这时就可以使用$.getScript()方法。</p>
<p>//点击按钮后再加载 JS 文件<br>$(‘input’).click(function () {<br>$.getScript(‘test.js’);<br>});</p>
<h3 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax()"></a>$.ajax()</h3><p>$.ajax()是所有 ajax 方法中最底层的方法，所有其他方法都是基于$.ajax()方法的封装。这个方法只有一个参数，传递一个各个功能键值对的对象。<br>参数很多有兴趣的自己去看jQuery.ajax()，本来准备写几个常用的。强迫症犯了，去网上找资料做成了表格。。如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">type : <span class="string">'POST'</span>, <span class="comment">//这里可以换成 GET</span></span><br><span class="line">url : <span class="string">'test.php'</span>,</span><br><span class="line">data : &#123;</span><br><span class="line">url : <span class="string">'guowen'</span></span><br><span class="line">&#125;,</span><br><span class="line">success : <span class="function"><span class="keyword">function</span> (<span class="params">response, stutas, xhr</span>) </span>&#123;</span><br><span class="line">$(<span class="string">'#box'</span>).html(response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>注意：对于data属性，如果是GET、模式，可以使用三种之前说所的三种形式。如果是POST模式可以使用之前所说的两种形式。（这里不需要考虑之前的data类型的问题了，因为指定了请求类型，不会转化）</p>
<h3 id="表单序列化"><a href="#表单序列化" class="headerlink" title="表单序列化"></a>表单序列化</h3><p>使用表单序列化方法.serialize()，会智能的获取指定表单内的所有元素。这样，在面对大量表单元素时，会把表单元素内容序列化为字符串，然后再使用Ajax请求。<br>序列化表单内的元素：data : $(‘form’).serialize()，其余部分相同。<br>除此之外还可以直接获取单选框、复选框和下拉列表框等内容除了.serialize()方法，还有一个可以返回 JSON 数据的方法：.serializeArray()。这个方法可以直接把数据整合成键值对的 JSON 对象。<br>使用方法相同$(‘form’).serializeArray().有时，我们可能会在同一个程序中多次调用$.ajax()方法。而它们很多参数都相同，这个时候我们课时使用 jQuery 提供的$.ajaxSetup()请求默认值来初始化参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'form input[type=button]()'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">$.ajaxSetup(&#123;<span class="comment">//初始化多个ajax方法相同部分参数，后面再写ajax的时候，就不用在写了。</span></span><br><span class="line">type : <span class="string">'POST'</span>,</span><br><span class="line">url : <span class="string">'test.php'</span>,</span><br><span class="line">data : $(<span class="string">'form'</span>).serialize()<span class="comment">//表单序列化</span></span><br><span class="line">&#125;);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">success : <span class="function"><span class="keyword">function</span> (<span class="params">response, status, xhr</span>) </span>&#123;</span><br><span class="line">alert(response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在使用 data 属性传递的时候，如果是以对象形式传递键值对，可以使用$.param()方法将对象转换为字符串键值对格式。<br>主要是针对无法直接使用表单序列化方法.serialize()的情况，且传递参数为对象，建议使用该方法进行解析后再进行传递。</p>
<h3 id="Ajax进阶"><a href="#Ajax进阶" class="headerlink" title="Ajax进阶"></a>Ajax进阶</h3><p>加载请求，及错误处理。<br>主要是处理网速较慢的情况，出现请求时间较长的问题。而此时若没有一点提示，用户可能会认为你的网页出现了问题。若是能在请求过程中给用户一些提示，比如：正在努力加载中…… 。 可能会对用户更加友好一些。<br>jQuery提供了两个全局事件，jQuery 提供了两个全局事件，.ajaxStart()和.ajaxStop()。<br>这两个全局事件，只要用户触发了 Ajax，请求开始时（未完成其他请求）激活.ajaxStart()，请求结束时（所有请求都结束了）激活.ajaxStop()。<br>值得注意的是，因为是全局事件，所以这两个方法是直接需要直接绑定到document上的。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ajaxStart(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">".loading"</span>).show();</span><br><span class="line">&#125;).ajaxStop(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">".loading"</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当然你也可以自行在ajax内部进行一些设置,如请求超时时间，该ajax函数是否触发全局事件等等。以键值对的方式写明就可以了。<br>错误处理也特别简单</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line"><span class="comment">//…………</span></span><br><span class="line">timeout : <span class="number">500</span>,<span class="comment">//如果请求时间太长，可以设置超时</span></span><br><span class="line">global : <span class="literal">false</span>,<span class="comment">//如果某个 ajax 不想触发全局事件，可以设置取消</span></span><br><span class="line">error : <span class="function"><span class="keyword">function</span>(<span class="params">xhr,errorText,errorType</span>)</span>&#123;<span class="comment">//一般都直接用xhr对象</span></span><br><span class="line">alert(<span class="string">"发生错误："</span>+xhr.status);<span class="comment">//返回错误状态码</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>除此之外$.get()、$.post()和.load(),可以通过连缀处理使用局部.error()方法来处理错误，当然还有一个全局的方法：通过全局.ajaxError()事件方法来返回错误信息。即可</p>
<h3 id="请求全局事件"><a href="#请求全局事件" class="headerlink" title="请求全局事件"></a>请求全局事件</h3><p>jQuery 对于 Ajax 操作提供了很多全局事件方法，除去上面已经提到的.ajaxStart()、.ajaxStop()、.ajaxError()等事件方法。他们都属于请求时触发的全局事件，除了这些，还有一些其他全局事件：</p>
<ol>
<li>.ajaxSuccess()，对应一个局部方法：.success()，请求成功完成时执行。</li>
<li>.ajaxComplete()，对应一个局部方法：.complete()，请求完成后注册一个回调函数。</li>
<li>.ajaxSend()，没有对应的局部方法，只有属性 beforeSend，请求发送之前要绑定的函数。<br><strong>注意</strong>：全局事件方法是所有 Ajax 请求都会触发到，并且只能绑定在 document 上。而局部方法，则针对某个 Ajax。<br>对于一些全局事件方法的参数，大部分为对象，而这些对象有哪些属性或方法能调用，可以通过遍历方法得到。如：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历 settings 对象的属性</span></span><br><span class="line">$(<span class="built_in">document</span>).ajaxSuccess(<span class="function"><span class="keyword">function</span> (<span class="params">event, xhr, settings</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> settings) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这些全局方法，在$.ajax()方法中都可以直接以参数中的键值对的形式来完成</p>
<h3 id="JSON和JSONP"><a href="#JSON和JSONP" class="headerlink" title="JSON和JSONP"></a>JSON和JSONP</h3><p>其实在同一个域中时，只要url的后缀是json的文件的，默认就是json。当然你还可以使用$.ajax()方法设置 dataType属性加载 JSON 文件。<br>先来试试本地JSON:<br>php如下：  </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span><br><span class="line">$_arr= <span class="keyword">array</span>(<span class="string">'a'</span>=\&gt;<span class="number">1</span>,<span class="string">'b'</span>=\&gt;<span class="number">2</span>,<span class="string">'c'</span>=\&gt;<span class="number">3</span>);</span><br><span class="line">$_result = json_encode($_arr);</span><br><span class="line"><span class="keyword">echo</span> $_result;</span><br><span class="line">?\&gt;</span></span><br></pre></td></tr></table></figure>
<p>js:  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">type:<span class="string">"post"</span>,</span><br><span class="line">url:<span class="string">"test.php"</span>,</span><br><span class="line">dataType:<span class="string">"json"</span>,<span class="comment">//因为文件类型是php。但是返回的数据是json，所以必须设置类型，否则返回字符串</span></span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">response,staus,xhr</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(response.a);<span class="comment">//打印出来1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>实现跨域：这部分需要服务器端配合。  </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span><br><span class="line">$_arr= <span class="keyword">array</span>(<span class="string">'a'</span>=\&gt;<span class="number">1</span>,<span class="string">'b'</span>=\&gt;<span class="number">2</span>,<span class="string">'c'</span>=\&gt;<span class="number">3</span>);</span><br><span class="line">$_result = json_encode($_arr);</span><br><span class="line">$_callback = $_GET[<span class="string">'callback'</span>]();<span class="comment">//关键在这。配合客户端JS使用</span></span><br><span class="line"><span class="keyword">echo</span> $_callback.<span class="string">"($_result)"</span>;<span class="comment">//php用点号实现字符串拼接</span></span><br><span class="line">?\&gt;</span></span><br></pre></td></tr></table></figure>
<p>客户端实现：  </p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;//我本地地址为http://<span class="number">127.0.0.1:8020</span>/ajax.html</span><br><span class="line">type:<span class="string">"<span class="keyword">GET</span>"</span>,</span><br><span class="line">url:<span class="string">"http://localhost/test.php?callback=?"</span>,//这样就可以实现跨域资源的访问了，最后的？号，jQuery会自动转化成字符串</span><br><span class="line">dataType:<span class="string">"json"</span>,//若这里使用JSONP的话，可以删除上面url的“?callback=?”，jQuery会自动处理。</span><br><span class="line">success:function(response,staus,xhr)&#123;</span><br><span class="line">alert(response.a);</span><br><span class="line">console.log(response)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当然我们还可以进行使用$.getJSON()。使用方式同上。</p>
<h3 id="jqXHR对象"><a href="#jqXHR对象" class="headerlink" title="jqXHR对象"></a>jqXHR对象</h3><p>在之前，我们使用了局部方法：.success()、.complete()和.error()。这三个局部方法并不是 XMLHttpRequest 对象调用的，而是$.ajax()之类的全局方法返回的对象调用的。这个对象，就是 jqXHR 对象，它是原生对象 XHR 的一个超集。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取 jqXHR 对象，查看属性和方法</span></span><br><span class="line"><span class="keyword">var</span> jqXHR = $.ajax(&#123;</span><br><span class="line"><span class="keyword">type</span> : <span class="string">'POST'</span>,</span><br><span class="line">url : <span class="string">'test.php'</span>,</span><br><span class="line">data : $(<span class="string">'form'</span>).serialize()</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> jqXHR) &#123;</span><br><span class="line"><span class="built_in">document</span>.write(i + <span class="string">'\&lt;br /\&gt;'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：如果使用 jqXHR 对象的话，那么建议用.done()、.always()和.fail()代<br>替.success()、.complete()和.error()。以为在未来版本中，很可能将这三种方法废弃取消。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//成功后回调函数</span></span><br><span class="line">jqXHR.done(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">$(<span class="string">'#box'</span>).html(response);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>使用 jqXHR 的连缀方式比$.ajax()的属性方式有三大好处：</p>
<ol>
<li>可连缀操作，可读性大大提高；</li>
<li>可以多次执行同一个回调函数；</li>
<li>为多个操作指定回调函数；</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css设计指南-定位]]></title>
      <url>http://yoursite.com/2014/12/26/css%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97-%E5%AE%9A%E4%BD%8D/</url>
      <content type="html"><![CDATA[<p>其实 HTML 页面中每个元素其实都是一个「盒子」，默认情况下这些盒子的边框不可见，背景也是透明的，所以我们不能直接的看到页面中盒子的结构，但是我们可以借助一些 Web Developer 工具条可以方便地显示盒子的边框和背景，让我们能很直观的看到这些盒子的结构。  </p>
<a id="more"></a>
<h2 id="理解盒模型"><a href="#理解盒模型" class="headerlink" title="理解盒模型"></a>理解盒模型</h2><p>每个盒子都有三组属性：  </p>
<ol>
<li>外边距(margin)： 可以设置盒子与相邻盒子之间的距离。</li>
<li>边框(border)： 可以设置边框的宽度、样式和颜色。</li>
<li><p>内边距(padding)：可以设置盒子内容区和边框之间的距离。<br>一个盒子有四条边，所以这些属性也各有四个属性，分别是上(top)、右(right)、下(bottom)和左(left)，尽管这三组属性共有 12 个属性值，但我们也可以对它们进行简写，这里以margin 为例：  </p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin-top</span>:<span class="number">1px</span>;</span><br><span class="line"><span class="attribute">margin-right</span>:<span class="number">1px</span>;</span><br><span class="line"><span class="attribute">margin</span>-botton:<span class="number">1px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>:<span class="number">1px</span>;</span><br></pre></td></tr></table></figure>
<p>缩写后的代码如下:<br><code>margin:1px 1px 1px 1px;</code><br>缩写的顺序是<strong>上 -> 右 -> 下 -> 左，顺时针的方向</strong>。相对的边的值相同，则可以省掉，代码如下:</p>
</li>
</ol>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>:<span class="number">1px</span>;<span class="comment">// 四个方向的边距相同，等同于margin:1px 1px 1px 1px;</span></span><br><span class="line"><span class="attribute">margin</span>:<span class="number">1px</span> <span class="number">2px</span>;<span class="comment">// 上下边距都为1px，左右边距均为2px，等同于margin:1px 2px 1px 2px</span></span><br><span class="line"><span class="attribute">margin</span>:<span class="number">1px</span> <span class="number">2px</span> <span class="number">3px</span>;<span class="comment">// 右边距和左边距相同，等同于margin:1px 2px 3px 2px;</span></span><br><span class="line"><span class="attribute">margin</span>:<span class="number">1px</span> <span class="number">2px</span> <span class="number">1px</span> <span class="number">3px</span>;<span class="comment">// 注意，这里虽然上下边距都为1px，但是这里不能缩写。</span></span><br></pre></td></tr></table></figure>
<h3 id="盒子的边框-border"><a href="#盒子的边框-border" class="headerlink" title="盒子的边框(border)"></a>盒子的边框(border)</h3><p>边框(border)有四个相关属性：</p>
<ol>
<li>宽度(border-width)：可以使用 thin、 medium 和 thick 等文本值，也可以使用 除百分比和负值以外 的任何绝对值。</li>
<li>样式(border-style)：有 none、 hidden、 dotted、 dashed、 solid、 double、 groove、 ridge、 inset 和 outset 等文本值。</li>
<li>颜色(border-color)：可以使用任何颜色值，包括 rgb、 hsl、十六进制颜色值和颜色关键字。</li>
<li>圆角(border-radius)：属于 CSS3 新增属性，可使用百分比、相对值和绝对值。<br>CSS 推荐标准并没有明确规定 border-width 的几个文本值的确切宽度，所以实际宽度会因浏览器而异。border-radius 不影响盒子的定位。<h3 id="盒子的内边距-padding"><a href="#盒子的内边距-padding" class="headerlink" title="盒子的内边距(padding)"></a>盒子的内边距(padding)</h3>内边距是盒子内容区与盒子边框之间的距离。在没有设置内边距的情况下，内容紧挨着边框：设置内边距后，内容区与边框有一定的距离(padding 的大小)：<h3 id="盒子外边距-margin"><a href="#盒子外边距-margin" class="headerlink" title="盒子外边距(margin)"></a>盒子外边距(margin)</h3>与内边距和边框相比，外边距就要显得复杂的多了，首先是外边距叠加， 垂直方向上的外边距会叠加 ，例如有三个段落应用了如下规则：</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于第一段的下边距与第二段的上边距相邻，你可能会觉得它们两个盒子边框之间的外边距只和是 80px，但实际上是 50px，像这样上下外边距相遇时，它们会相互重叠，直到一个外边距碰到另一个盒子的边框。就上面例子而言，第二段较宽的上外边距会碰到第一段的边框，也就是说较宽的外边距决定两个盒子之间的距离。</p>
<h3 id="外边距的单位"><a href="#外边距的单位" class="headerlink" title="外边距的单位"></a>外边距的单位</h3><p>在设置段落文本外边距时应该注意，为了避免因增大字号导致段落间外边距不变引起的整体不协调的问题，在设置段落的上下外边距是应该使用 em 单位，这样当字体大小调整时，段落的上下外边距也会根据字体的大小来调整距离，这样页面的整体布局就会比较协调一致，而左右外边距则可以用 px 绝对单位，确保左右外边距不会因字体大小的调整而发生改变，比如可以这么设置：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line"><span class="attribute">margin</span>: .<span class="number">75em</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样段落垂直距离就会始终保持字体高度的四分之三的高度，水平外边距不会因字体的调整而发生改变了。</p>
<h2 id="盒子有多大"><a href="#盒子有多大" class="headerlink" title="盒子有多大"></a>盒子有多大</h2><p>作者在本章介绍了块级元素和行内元素的不同行为。</p>
<h3 id="没有宽度的盒子"><a href="#没有宽度的盒子" class="headerlink" title="没有宽度的盒子"></a>没有宽度的盒子</h3><p>作者在这一节中专门提到了一个 「没有宽度」的概念：没有显式地设置元素的width 属性。如果不设置块级元素的 width 属性，那么这个属性的默认值就是auto ，结果就是会让元素的宽度扩展到与父元素同宽，对于块级元素和行内元素更具体的介绍请看笔者的上一篇文章 CSS 设计指南 学习笔记 一 。<br><strong>盒模型结论一：</strong><br>没有设置宽度的元素始终会扩展到填满其父元素的宽度为止，添加水平外边距、水平边框和水平内边距都会导致内容宽度的减少，减少量等于水平外边距、水平边框和水平内边距的和。</p>
<h3 id="有宽度的盒子"><a href="#有宽度的盒子" class="headerlink" title="有宽度的盒子"></a>有宽度的盒子</h3><p><strong>盒模型结论二：</strong><br>为设定了宽度的盒子添加外边距、边框和内边距，会导致盒子扩展的更宽，实际上，盒子的 width 属性设定的只是盒子内容区的宽度，而不是盒子要占据的( margin-left + border-left + padding-left + width + padding-right + border-right + margin-right )水平宽度。<br>所以一定要记住的是，给设定了 width 的元素添加外边距、边框和内边距所展示的行为与默认的 auto 状态下的行为会有截然不同的表现。<br>拓展：<br>但是与布局相关的元素大部分都同时设置了 margin 、 border 、 padding 和width ，这就导致了在布局时的各种计算保证总宽度( margin-left + border-left + padding-left + width + padding-right + border-right + margin-right )保持不变，这样不仅麻烦，有的时候还比较容易出错，为了解决这一问题， CSS3 新增了一个 box-sizing 属性，通过它可以将设置了 width 的元素也设定成具有默认的 auto 状态下的行为。这样就省去了许多计算 width 的时间，同时也不会出错，而且它的浏览器支持情况也是一片大好（ 除了 IE 6 和 IE 7 不支持，其他个别老版本的浏览器需要添加浏览器私有前缀才支持 ）。<br>可以这样使用这个属性：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> *&#123;</span><br><span class="line"><span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">   <span class="attribute">-moz-box-sizing</span>: border-box;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="浮动与清除"><a href="#浮动与清除" class="headerlink" title="浮动与清除"></a>浮动与清除</h2><p>浮动和清除是页面布局的一大利剑，分别是 float 和 clear ，浮动可以让原来上下堆叠的块级元素变成左右并列，可以实现文字绕图片排列效果。浮动的元素会脱离常规的文档流，原来紧跟其后的元素会在空间允许的情况下向上提升到与浮动元素平起平坐。如果浮动元素后面有两个段落，而你只想让第一段与浮动元素并列（就算旁边还能放下第二段，也不想让它上来），就可以使用 clear 属性清除浮动。</p>
<h3 id="围住浮动元素的三种方法"><a href="#围住浮动元素的三种方法" class="headerlink" title="围住浮动元素的三种方法"></a>围住浮动元素的三种方法</h3><p>浮动元素脱离了文档流，所以我们看不到包含它的父元素了，这种情况有时候并不是我们想要的，所以作者在本章介绍了如何围住浮动元素的三种方法。<br><strong>方法一：</strong> 为父元素添加 overflow: hidden; 强制它包围浮动元素。<br>这种方法在某些情况下也不适用，比如通过浮动设置的水平排列的菜单，对其父元素设置 overflow: hidden; 后，尽管父元素围住了它，但是如果菜单有下拉选项的话，当鼠标移动到上面的时候下拉菜单并不会显示，因为设置了 overflow: hidden; ，所以超出父元素范围的内容都被隐藏掉了。  </p>
<p><strong>方法二：</strong> 同时浮动父元素</p>
<p>父元素设置浮动后，不管其子元素是否是浮动，父元素都会紧紧地包围住它的子元素，因此需要用 width: 100%; 再让父元素的宽度与浏览器容器同宽。同样，尽管父元素围住了它，但是这样会导致页面中出现大量的浮动元素，而浮动元素有往往不好控制，并不利于页面的布局。</p>
<p><strong>方法三：</strong> 添加非浮动的清除元素</p>
<p>第三种强制父元素包含其浮动的子元素的方式就是给父元素的最后添加一个非浮动的子元素，然后清除该子元素，因此父元素一定会包含这个子元素以及前面的浮动元素：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CSS</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>尽管这个方法能解决上面提到的两种方法中的问题，但它还不是最好的方法，因为它会在文档中添加无意义的标签，这违反了标签语义化的规则，对搜索引擎并不友好。所以如果你要清楚浮动但既不想浮动父元素又不想对父元素设置 overflow: hidden; 也不想增加无意义的标签的话，可以使用伪元素来清除浮动：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line"><span class="attribute">display</span>: table;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在父元素中添加 clearfix 类，因为搜索引擎并不会抓取伪元素，所以这种方法并没有增加无意义的标签，这里应该注意的是，CSS3 标准是用两个冒号来区别伪元素和伪类，而 CSS2.1 中不管是伪元素还是伪类都是用单个冒号表示，然而 IE8 并不支持双冒号的伪元素，所以问题就来了，如果你要遵循 CSS3 的标准使用双冒号的话就不兼容 IE8 了，如果使用但冒号的话又不符合 CSS3 标准规范，当然现在大多数还是使用但冒号的，选择哪种还是看个人的选择。</p>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>CSS 布局的核心是 position 属性，对元素应用这个属性可以相对于它在常规文档流中的位置重新定位， position 属性有 4 个值： static 、 relative 、absolute 和 fixed 。</p>
<h3 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位(static)"></a>静态定位(static)</h3><p>静态定位下的块级元素会在默认文档流中上下堆叠，想要突破 static 定位提供的这种按顺序布局元素的方式，就必须对元素的 position 属性的值改为其他三个值。</p>
<h3 id="相对定位-relative"><a href="#相对定位-relative" class="headerlink" title="相对定位(relative)"></a>相对定位(relative)</h3><p>所谓的相对定位就是相对于元素原来的位置（static 状态下的位置）进行定位，也就是说在不设置 top 、 right 、 bottom 或 left 的话，和它在默认(static)情况下的表现是相同的，但是如果对它设置了 top 、 right 、 bottom 或 left 的话，就会相对与它默认的位置进行定位。相对定位的元素可以遮住静态(static)定位的元素。可以给 top 和 left 属性设定负值，把元素向上和向左移动。</p>
<h3 id="绝对定位-absolute"><a href="#绝对定位-absolute" class="headerlink" title="绝对定位(absolute)"></a>绝对定位(absolute)</h3><p>绝对定位跟静态定位和相对定位是绝对不一样的，静态定位和相对定位并不会脱离文档流，会占居原来的位置，而绝对定位会把元素彻底从文档流中拿出来，然后再相对于其他元素（这里的其他元素指的是定位上下文，默认是 body 元素）定位。<br>绝对定位的一个重要的概念就是 定位上下文 ，把元素的 position 属性设定为relative 、 absolute 或 fixed 后，继而可以使用 top 、 right 、bottom 和 left 属性，相对于「另一个元素」移动该元素的位置。这里的「另一个元素」就是该元素的定位上下文。<br>绝对定位的默认定位上下文是 body ，这是因为 body 是标记中所有元素的唯一的祖先元素，而实际上，绝对定位元素的任何祖先元素都可以成为该绝对定位元素的定位上下文，只要把相应的祖先元素的 position 属性的值设定为 relative 即可。</p>
<h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><p>从完全脱离文档流的角度说，固定定位与绝对定位类似。但不同之处在于，固定定位的定位上下文是视口（浏览器窗口），因此它不会随页面的滚动而移动。最常见的情况是用它来创建不随页面滚动而移动的导航元素。</p>
<h3 id="定位上下文"><a href="#定位上下文" class="headerlink" title="定位上下文"></a>定位上下文</h3><p>在讲绝对定位的时候，我们了解到绝对定位元素默认的定位上下文是body元素，因为body是标记中所有元素唯一的祖先元素。而实际上， 绝对定位元素的所有祖先元素都可以成为它的定位上下文，只要把相应祖先元素的position设定为relative即可 。<br>只有将元素的position属性设置为relative、absolute、fixed，这个元素的top、right、bottom和left属性才会起作用。<br>设置了内部div的position属性为absolute之后，内部div就会脱离原来的位置，默认相对于body重新定位。<br>设置了外部div的position属性为relative值之后，它就变成了内部div的定位上下文。 此时内部div的top、left属性参照的就是外部div了。如果你再用left和top属性重新定位外部div，内部div也会跟着移动相同的距离，以保住它与外部div之间的位置关系。<br>事实上，只要把元素的外边距和内边距设定好，多数情况下只用默认的静态定位就足以实现页面布局了。很多刚接触CSS的初学者(include myself)都会错误的设定position属性,最终发现从文档流中挪出来的元素很难控制。因此，除非真需要那么做，否则不要轻易修改元素默认的position属性。</p>
<h2 id="显示属性"><a href="#显示属性" class="headerlink" title="显示属性"></a>显示属性</h2><p>display 属性的值很多，但常用的除了前面提到的控制块级元素、行内元素和行内块级元素的 block 、 inline 和 inline-block 以外，还有一个比较常用的就是 none ，把元素的 display 属性的值设定为 none 后，该元素及所包含在其中的元素，都不会在页面中显示。他们原先战局的所有空间都会被「回收」，就好像相关元素根本不存在一样。<br>与此类似的属性还有 visibility ，这个属性常用的两个值是 visible (默认值) 和 hidden ，把元素的 visibility 属性的值设定成 hidden ，元素会被隐藏，但它还会占据页面中原来的空间位置。<br>笔者觉得有点类似定位中 absolute 和 relative 的感觉，就是 absolute 定位的元素的原来的位置会被「回收」（脱离文档流），就好像元素根本不存在一样（指的是原来占据的位置不存在一样）， relative 定位的元素还会占据页面中原来的空间位置。</p>
<p><strong>总结</strong>  </p>
<blockquote>
<p>本章的内容不少，都是一些很重要的概念，比如盒模型、定位元素、浮动与清除浮动和元素背景属性。</p>
<ol>
<li>margin、padding的属性值顺序均为 上右下左</li>
<li>垂直方向上的margin外边距会叠加，取较大值。水平方向则不会，两者之间间距为两者之间margin外间距之和。</li>
<li>围住浮动元素的三种方法： 一：为父元素添加overflow:hidden   二：同时浮动父元素   三：添加非浮动的清除元素(写一个class，里面包含clear属性)</li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从右向左阅读r的定义]]></title>
      <url>http://yoursite.com/2014/12/25/%E4%BB%8E%E5%8F%B3%E5%90%91%E5%B7%A6%E9%98%85%E8%AF%BBr%E7%9A%84%E5%AE%9A%E4%B9%89/</url>
      <content type="html"><![CDATA[<h3 id="指向指针的引用-从右向左"><a href="#指向指针的引用-从右向左" class="headerlink" title="指向指针的引用(从右向左)"></a>指向指针的引用(从右向左)</h3><p>引用本身不是对象，所以不能定义指向引用的指针，但指针是对象，所以存在对指针的引用  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>；</span><br><span class="line"><span class="keyword">int</span> *p;      <span class="comment">//p是int 指针</span></span><br><span class="line"><span class="keyword">int</span> *&amp;r = p; <span class="comment">//r是一个对指针p的引用</span></span><br><span class="line">r = &amp;i;      <span class="comment">//r引用了一个指针，因此给r赋值&amp;i就是令p指向i</span></span><br><span class="line">*r = <span class="number">0</span>;      <span class="comment">//解引用r得到i,也就是p指向的对象，将i值改为0</span></span><br></pre></td></tr></table></figure>
 <a id="more"></a>
<p> 要理解一个变量类型到底是什么，最简单的就是从右向左阅读r的定义，离变量名进的符号对变量的类型有直接的影响。因此r是一个引用，声明符的其余部分用来确定r引用的类型是什么，*说明r引用的是一个指针。最后声明的基本数据类型指出r引用的是一个int指针.</p>
<h3 id="const指针-从右向左"><a href="#const指针-从右向左" class="headerlink" title="const指针(从右向左)"></a>const指针(从右向左)</h3><p> 所以的指针的类型都要和它所指的对象严格匹配，除了(1)允许令一个指向常量的指针指向一个非常量对象(2)暂时不需知道</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">double</span> *ptr = &amp;pi;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> *cptr = &amp;pi;</span><br><span class="line">*cptr = <span class="number">42</span>;</span><br></pre></td></tr></table></figure>
<p>谓指向常量的指针仅仅要求不能通过该指针改变对象的值，而没有规定那个对象的值不能通过其他途径改变</p>
<hr>
<p>指针是对象,const修饰符修饰一个变量，则此变量的值在初始化之后无法改变。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> errNumb = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> curErr = &amp;errNumb;<span class="comment">//curErr将一直指向errNumb</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.1415</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> *<span class="keyword">const</span> pip = &amp;pi;<span class="comment">//pip是一个指向常量对象的常量指针</span></span><br></pre></td></tr></table></figure>
<p> 指针本身是一个常量并不意味着不通过指针修改其所指对象的值，能否这样做完全取决于所指对象的类型.所</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2014/12/24/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
