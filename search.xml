<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[css文本和字体]]></title>
      <url>http://yoursite.com/2014/12/30/css%E6%96%87%E6%9C%AC%E5%92%8C%E5%AD%97%E4%BD%93/</url>
      <content type="html"><![CDATA[<p>字体是“文字的不同体式”或者“字的形体结构”。对于英文而言，每种字体都是由一组具有独特样式的字母、数字和符号组成的。根据外观，字体可以分为不同的类别（font collection），包括衬线字体（serif）、无衬线字体（sans-serif）和等宽字体（monospace）。每一类字体可以分成不同的字体族（font family），比如 Times 和 Helvetica。而字体族中又可以包含不同的字型（font face），反映了相应字体族基本设计的不同变化，例如 Times Roman、 Times Bold、 Helvetica Condensed 和 Bodoni italic。CSS字体属性主要描述一类字体的大小和外观，比如：使用什么字体族（是 Times，还是 Helvitica），多大字号，粗体还是斜体。</p>
<a id="more"></a>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">font</span>-maily：字体簇</span><br><span class="line"><span class="built_in">font</span>-<span class="built_in">size</span>：字体大小</span><br><span class="line"><span class="built_in">font</span>-weight：字体粗细</span><br><span class="line"><span class="built_in">font</span>-style：字体样式</span><br><span class="line"><span class="built_in">font</span>-<span class="built_in">variant</span>：字体变化</span><br><span class="line"><span class="built_in">font</span>：字体简写</span><br><span class="line">字体簇</span><br></pre></td></tr></table></figure>
<p>font-family 用于设定元素中的文本使用什么字体，具体用法参考 font-family ，其常见应用和问题如下：</p>
<h3 id="字体来源"><a href="#字体来源" class="headerlink" title="字体来源"></a>字体来源</h3><p>用户机器中安装的字体；<br>保存在第三方网站上的字体，如：Typeket和Google Fonts<br>保存在自身Web服务器上的字体，这些字体通过@font-face引入；  </p>
<h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>font-family是可以继承的属性，因此它的值会遗传给所有后代元素。在实际应用font-family的时候，应该给整个页面设定一种主字体，然后只对那些需要使用不同字体的元素再应用 font-family。要为整个页面指定字体，可以设定 body 元素的 font-family 属性。  </p>
<h3 id="字体栈"><a href="#字体栈" class="headerlink" title="字体栈"></a>字体栈</h3><p>每种操作系统自带的字体不多，而且用户随时会安装和删除字体，因此不敢保证一定能应用某种字体来显示网页。为此，在指定文本的字体时，需要多列出几种后备字体，以防第一种字体无效。这个列表也叫字体栈，例如： body {font-family:”trebuchet ms”, tahoma, sans-serif;} 。注意，字体栈的最后一项要指定一个通用的字体类，如： sans-serif 。通用的字体类有：<br>serif：衬线字体，字符笔画的末端会有一些装饰线；<br>sans-serif：无衬线字体，字符笔画的末端没有装饰线；<br>monospace：等宽字体，每个字符的宽度相等（也称代码体）；<br>cursive：草书体或手写体；<br>fantasy：不能归入其他类别的字体（一般都是奇形怪状的字体）。  </p>
<h3 id="字体搭配"><a href="#字体搭配" class="headerlink" title="字体搭配"></a>字体搭配</h3><p>常见搭配<br>verdana, tahoma, sans-serif<br>helvetica, arial, sans-serif</p>
<p>如果字体名像 Trebuchet MS 一样多于一个单词（有空格），应该加上引号<br>font-family 的值（字体名）不区分大小写</p>
<h3 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h3><p>浏览器样式表默认为每个 HTML 元素都设定了 font-size，因此你在设定 font-size 的时候，其实是在修改默认值。由于字体大小在标记层次中是可以继承的，假如你对使用的字体大小单位怎么影响继承不十分了解，那很容易碰到有些字体莫名其妙变大或变小的问题。字体的具体用法可以参考 font-size ，常见应用和问题如下：</p>
<p>字体大小的默认值：16px<br>绝对单位 VS 相对单位</p>
<ul>
<li>绝对单位：<br>简介：使用像素、派卡（pica）或英寸设定字体大小，另外<br>优点：实际字体设定多大就多大，与祖先元素的字体大小无关。<br>缺点：在需要调整页面所有元素的字体大小时，必须一个一个地修改样式表中的 font-size，相当麻烦。<br>其他：设定绝对字体大小时，也可以使用关键字值，比如：x-small、medium、x-large等。具体可参考 Using_Keywords</li>
<li>相对单位<br>简介：使用百分比、 em 或 rem（根元素的字体大小）设定字体大小。<br>优点：使用相对大小后，通过调整 body 元素的字体大小，可以成比例地改变所有元素的字体大小。或者，至少能通过改变某个祖先元素，只影响它的所有子元素。在反复修改布局设计的时候，这样显然能节省时间<br>缺点：可能会出现意外的“连锁反应”<br>其他：设定相对字体大小时，也可以使用关键字值，比如：smaller、larger。</li>
<li>使用rem<br>简介：rem(root em)是CSS3新增的字体大小单位，也是相对单位，但rem是相对于HTML根元素的单位。<br>优点：既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。<br>缺点：存在浏览器兼容性问题，除了 IE8 及更早版本外，所有浏览器均已支持rem。<br>实际应用：对于不支持它的浏览器，需要多写一个绝对单位的声明，例如： p {font-size:14px; font-size:.875rem;}<br>浏览器缩放与字体大小调整对字体大小的影响<br>浏览器缩放：整体调整<br>字体大小调整：相对单位调整，绝对单位不变</li>
</ul>
<h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><p>字体样式默认是正体，也可以是斜体，具体用法参考 font-style 。在实际应用中，英文中的斜体主要表示强调，如果是为了表示强调设置font-style，那么在在 HTML 标记中直接使用 <em> 标签即可。</em></p>
<h3 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h3><p>字体粗体的主要作用是表示重要，具体用法参考 font-weight 。<br>在实际应用中，由于浏览器对font-weight的数字值实现各不相同，所以从常规字体到粗体的切换可能发生在不同的数值上——通常是 400。所以，对于font-weight属性来说，最好只用 bold 和 normal 这两个值。<br>此外，HTML 元素 strong 也表示重要，而它的默样式就是粗体，如果要突出文本中的某一个字或次，请使用strong。  </p>
<h3 id="字体变化"><a href="#字体变化" class="headerlink" title="字体变化"></a>字体变化</h3><p>font-variant属性除了normal，就只有一个值，即 small-caps——导致所有小写英文字母变成小型大写字母，具体用法请参考 font-variant</p>
<h3 id="属性简写"><a href="#属性简写" class="headerlink" title="属性简写"></a>属性简写</h3><p>font 属性是一个简写形式，通过它只要一条 CSS 声明就可以设定所有字体属性，例如： p {font: bold italic small-caps .9em helvetica, arial, sans-serif;} 。具体规则如下：</p>
<p>必须声明 font-size 和 font-family 的值<br>所有值必须按如下顺序声明：<br>font-weight、 font-style、 font-variant 不分先后；<br>然后是 font-size；<br>然后是 font-size；<br>font属性除了用于字体属性的简写外，还可以给它指定一些特殊的值，如下所示：</p>
<p>caption：使用有标题的系统控件的文本字体（如按钮，菜单等）（CSS2）<br>icon：使用图标标签的字体（CSS2）<br>menu：使用菜单的字体（CSS2）<br>message-box：使用信息对话框的文本字体（CSS2）<br>small-caption：使用小控件的字体（CSS2）<br>status-bar：使用窗口状态栏的字体（CSS2）</p>
<p>font<br>其他属性</p>
<p>font-stretch<br>font-size-adjust</p>
<h2 id="Web字体"><a href="#Web字体" class="headerlink" title="Web字体"></a>Web字体</h2><p>Web字体指的是非用户机器中的字体。目前，可以通过使用@font-face规则在网页中嵌入Web字体，并且该功能已经得到了浏览器广泛支持。设定Web字体的方式如下所示：<br>使用Google Web Fonts或Adobe的Typekit等公共字体<br>以Google Web Fonts为例，访问 <a href="https://www.google.com/fonts" target="_blank" rel="external">https://www.google.com/fonts</a> ，找到想要的字体，单击“Add To Collection”，然后单击页面底部的 Use 按钮。Google 就会生成一个指向刚刚选定字体的 <link> 标签，直接把它复制粘贴到你的 HTML 文件中即可。例如： <link href="https://fonts.googleapis.com/css?family=Open+Sans|Roboto" rel="stylesheet" type="text/css"> ，在CSS中引用下载的字体： font-family: ‘Open Sans’, Roboto, sans-serif;</p>
<p>使用@font-face规则使用@font-face规则的前提是可以从网站或第三方Web服务器下载到相应的字体包，以这种方式提供的字体，会在使用该字体的页面第一次加载时被浏览器下载并缓存起来，以后就不用下载了。使用@font-face的一个问题是不同的浏览器要求的字体格式不同，具体如下所示：</p>
<p>Firefox/Safari/Chrome/IOS Safari4.1以上版本：OTF——OpeType，TTF——TrueType；<br>IE：EOT——Embedded Open Type；<br>IOS Safari4.1之前版本：SVG——Scalable Vector Graphics；<br>Font Squirrel 提供了很多现成的字体包，每个字体包中都包含所有必要格式的字体和为每款浏览器提供正确格式的 CSS 代码。另外，Font Squirrel还有一个转换程序，能够把你上传的字体转换成字体包。下面就是 Font Squirrel 为 Ubuntu Titling Bold 字体生成的@font-face 代码。对于其他来源的字体，这种格式也是适用的。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="comment">/*这就是将来在字体栈中引用的字体族的名字*/</span></span><br><span class="line">  <span class="attribute">font-family</span>:<span class="string">'UbuntuTitlingBold'</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'UbuntuTitling-Bold-webfont.eot'</span>);</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'UbuntuTitling-Bold-webfont.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'UbuntuTitling-Bold-webfont.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'UbuntuTitling-Bold-webfont.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'UbuntuTitling-Bold-webfont.svg#UbuntuTitlingBold'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Web字体的其他问题：</p>
<p>Web字体可能导致机器中出现同名字体，以至混淆。为此，Web专家Paul Irish写过一个跨跨浏览器@font-face 的“笑脸版”，详细内容请参考 bulletproof-font-face-implementation-syntax ；<br>需要深入入了解@font-face规则的话，可以参考 How to use @font-face ；<br>除非浏览器统一支持一种字体格式，否则必须面对多种字体格式并存问题。如何使用@font-face规则处理多种字体格式，以及保证Internet Explorer取得必要的.eot格式的字体，可以参考 fixing-ie9-font-face-problems 。</p>
<h2 id="文本是什么"><a href="#文本是什么" class="headerlink" title="文本是什么"></a>文本是什么</h2><p>文本就是一组字或字符，比如章标题、段落正文等等，跟使用什么字体无关。CSS文本属性描述对文本的处理方式，比如：行高或者字符间距多大，有没有下划线和缩进。常用的CSS文本属性如下所示：</p>
<p>text-indent<br>letter-spacing<br>word-spacing<br>text-decoration<br>text-align<br>line-height<br>text-transform<br>vertical-align</p>
<h3 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h3><p>text-indent属性设定行内盒子相对于包含元素的起点，具体用法参考 text-indent ，常见问题和注意点如下：</p>
<h3 id="行内盒子"><a href="#行内盒子" class="headerlink" title="行内盒子"></a>行内盒子</h3><p>CSS 会把元素中的文本放在一个不可见的盒子里，比如对 p 元素中的一段文本，CSS 将其视为很长的一行，只不过在遇到容器边界时会折行。例如：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">border</span>:<span class="number">3px</span> solid red;&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;<span class="attribute">border</span>:<span class="number">1px</span> solid green;&#125;</span><br><span class="line">&lt;p&gt;&lt;span&gt;Here is <span class="selector-tag">a</span> long paragraph…&lt;/span&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>总结：实际上缩进的是这个文本盒子的起点位置，后续的行是不会缩进的。如果需要缩进整个段落，可以使用margin或padding。</p>
<p>text-indent适用于块容器，包含inline-block；</p>
<p>text-indent是可继承的，且子元素获得的继承值并不是祖先元素设定的值，而是计算的值。示例代码如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.root</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;    </span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.root</span> &gt; <span class="selector-tag">div</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"root"</span>&gt;</span><br><span class="line">    &lt;span&gt;行内儿子节点&lt;/span&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span&gt;行内块级孙子节点&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>总结：这里没有使用百分比，所以子元素的继承值都是30px。但需要注意示例中的前后两个span，后一个span的缩进较前一个span较大，这是由于后一个span是行内块元素，继承的缩进值起作用了。</p>
<p>text-indent允许设定负值，注意配合padding或margin；  </p>
<h3 id="字符间距"><a href="#字符间距" class="headerlink" title="字符间距"></a>字符间距</h3><p>letter-spacing为正值时增大字符间距，为负值时缩小间距。无论设定字体大小时使用的是什么单位，设定字符间距一定要用相对单位，以便字间距能随字体大小同比例变化。具体用法请参考[letter-spacing]。( <a href="http://css.doyoe.com/properties/text/letter-spacing.htm" target="_blank" rel="external">http://css.doyoe.com/properties/text/letter-spacing.htm</a> )</p>
<h3 id="单词间距"><a href="#单词间距" class="headerlink" title="单词间距"></a>单词间距</h3><p>CSS把任何两边有空白的字符和字符串都视作“单词”，纯汉字文本一段之中没有空格，因此单词间距对中文网页几乎没有用，但对中英混排段落可能有用。单词间距属性具体用法请参考 word-spacing 。</p>
<h3 id="文本装饰"><a href="#文本装饰" class="headerlink" title="文本装饰"></a>文本装饰</h3><p>文本装饰有下划线、上划线、贯串线和闪烁等样式，具体用法可参考 text-decoration</p>
<h3 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h3><p>一般文本对齐方式有：左对齐/left、右对齐/right、居中对齐/center，以及两端对齐/justify，其中两端对齐是CSS3新增的属性。除此之外，CSS3还定义了一些额外的属性，但浏览器都不怎么支持，具体内容请参考 text-align 。</p>
<p>在实际应用中，如果对元素设置了文本对齐属性，而对子元素是如何显示存在疑惑时，只要根据一下规则去计算即可：</p>
<p>文本对齐属性只适用于块容器（包含行内块元素）；<br>文本对齐属性是可继承的<br>如果没有子元素，则文本内容直接根据父元素定义的对齐属性在父元素盒子里显示；<br>如果子元素是行内非块元素，将其当做文本内容处理（虽然该子元素会继承对齐属性，但是该属性不适用于行内非块元素）；<br>如果子元素是行内块元素，则该元素会按照父元素的文本对齐属性在父元素盒子里显示。此外，该元素会继承父元素的对齐属性，按照以上规则处理其子元素<br>如果子元素非行内块元素，则该元素会继承父元素的对齐属性，然后继续按照以上规则处理子元素；<br>行高</p>
<p>CSS 中的行高平均分布在一行文本的上方和下方，具体用法参考 line-height 。常见问题和注意点如下：</p>
<p>适用于所有元素，且可继承；<br>行高小于字体大小时，行与行之间会出现重叠；<br>实际应用时，要使用相对单位（百分比或乘积因子），避免使用绝对单位（如像素）——字体增大时，可能会出现行与行的重叠；<br>font快捷属性：以复合值的形式把 font-size 和 line-height 值写在一块，例如 div#intro {font:1.2em/1.4 helvetica, arial, sans-serif;} ；<br>文本行高为normal不代表就是1倍于字体大小<br>文本转换</p>
<p>文本转换属性用于转换元素中文本的大小写，它可以设定英文文本首字母大写、全部字母大写和全部字母小写。具体用法可参考 text-transform 。</p>
<h3 id="垂直对齐"><a href="#垂直对齐" class="headerlink" title="垂直对齐"></a>垂直对齐</h3><p>垂直对齐属性 vertical-align 以基线为参照上下移动文本， 具体用法参考 vertical-align 。常见问题和注意点：<br>垂直对齐属性只适用于行内元素；<br>HTML标签 <sup> 和 <sub> 有默认的上标和下标样式，但效果不是很好；<br>应用场景：公式或化学分子式中的上标和下标，文本中脚注的角标；</sub></sup></p>
<h3 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h3><p>white-space<br>tab-size<br>word-break<br>word-wrap<br>overflow-wrap<br>text-align-last<br>text-justify<br>text-size-adjust<br>最佳实战</p>
<p>虽然学习了字体和文本属性，但不一定能够在实际应用中搭配好字体和文本样式。文字排版讲求匀称，一般是由看不见的网格，框定页面文字的走向和布局，匀称的版式可以增强页面的可读性。</p>
<p>在线资源：</p>
<ul>
<li><a href="http://ilovetypography.com/" target="_blank" rel="external">http://ilovetypography.com/</a></li>
<li><a href="http://www.thinkingwithtype.com/" target="_blank" rel="external">http://www.thinkingwithtype.com/</a></li>
<li><a href="http://webtypography.net/" target="_blank" rel="external">http://webtypography.net/</a></li>
</ul>
<p>一、字体与文本</p>
<p>字体与文本的区别：</p>
<p>字体主要涉及文字的大小和外观（可应用于单个字符）。<br>文本主要涉及对字体的处理（只能应用于文本块）</p>
<p>二、指定字体</p>
<p>CSS中指定字体的最简单方式，就是使用五种通用的字体集合</p>
<p>serif ：该字体在字符笔画末端有叫做衬线的小细节（Time New Roman、Georgia、Palatino）<br>sans-serif：末端无任何细节（Trebuchet MS、Arial、Verdana）<br>monospace：每个字母宽度相等（例如，i与m具有相同的宽度），通常用于排版代码块或模仿打印效果<br>cursive：手写笔记，但是比手写效果要整洁（Comic Sans MS、Brush Script）<br>fantasy：不能归入其他种类的字体</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*指定通用字体，浏览器会选择默认的Helvetica或者Arial*/</span></span><br><span class="line"><span class="comment">/*font-family是一个可继承的属性，值会传递给所有的后代*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">font-family</span>: sans-serif;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*以首先字母为开头，以通用字体结束 */</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">font-family</span>: <span class="string">"hoefler text"</span>,times,serif;&#125;</span><br></pre></td></tr></table></figure>
<p>三、设置字体大小</p>
<p>设置字体大小，可以使用三种类型的值：</p>
<p>绝对值：像素、英寸<br>相对值：百分比、em<br>运动衫尺码关键字：x-small、small、large、xx-large</p>
<p>使用相对大小字体的优点：</p>
<p>在文字大小中选择了更大或者更小之后，所有字体都能成比例地缩放<br>只需要改变body标签的字体大小，按比例改变文本的大小</p>
<p>使用相对大小字体的缺点</p>
<p>可能因字体大小的继承而导致极小字体的显示<br>用户很容易“破坏”没有考虑到文本缩放因素的CSS页面布局</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: verdana,arial,sans-serif;</span><br><span class="line">    <span class="comment">/*为字体设置了可以调准的基准大小,1em一般为16像素高*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h3</span>&#123;</span><br><span class="line">    <span class="comment">/*h3的默认大小为1.2em(19.2px)，重新设置为0.8em*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.8em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*分别为ol和ul设置大小，而不是为li设置大小，方便后续自定义*/</span></span><br><span class="line"><span class="selector-tag">ol</span>&#123;<span class="attribute">font-size</span>: .<span class="number">75em</span>;&#125;</span><br><span class="line"><span class="selector-tag">ul</span>&#123;<span class="attribute">font-size</span>: .<span class="number">75em</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;<span class="attribute">font-size</span>: .<span class="number">7em</span>;&#125;</span><br><span class="line"><span class="comment">/*规定ul的子元素a从父元素中继承属性值（如果没有使用inherit，a的值就会变成0.75*0.7em，导致过小*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">a</span> &#123;<span class="attribute">font-size</span>: inherit;&#125;</span><br></pre></td></tr></table></figure>
<p>四、字体属性</p>
<p>font-style    定义文本的直立或倾斜    italic、normal、oblique<br>font-weight    定义文本的粗细    100、200、…、900、lighter、normal、bold、bolder<br>font-variant    转换成小型大写字母    small-caps、normal</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*font-style有两个作用：使字体倾斜，或者使倾斜的字体直立*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">font-style</span>: italic;&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;<span class="attribute">font-style</span>: normal;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*加粗超链接的内容*/</span></span><br><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">font-weight</span>: bold;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*将h3标题转换为小型大写字母*/</span></span><br><span class="line"><span class="selector-tag">h3</span>&#123;<span class="attribute">font-variant</span>: small-caps;&#125;</span><br></pre></td></tr></table></figure>
<p>五、字体属性的简写</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="comment">/*始终要保证声明font-size 和 font-family的值*/</span></span><br><span class="line">    <span class="comment">/*指定顺序：先指定font-weight、font-style、font-variant（任意顺序），然后依次指定font-size、font-family*/</span></span><br><span class="line">    <span class="attribute">font</span>:bold italic small-caps .<span class="number">75em</span> verdana, arial, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>六、CSS蛇形文本</p>
<p>CSS会把一个盒子放到位于元素中的文本周围，只在开头和结尾是闭合的<br>text-indent 只能缩进首行<br>要想缩进整个段落，需要使用margin-left将整个容器往右侧推动</p>
<p>七、文本属性</p>
<p>text-indent<br>缩进元素中文本的首行<br>任何长度值</p>
<p>vertical-align<br>相对于基准线将文本向上或者向下方移动<br>任何长度值、sup、sub、top、middle、bottom</p>
<p>letter-spacing<br>设置字符间距<br>任何长度值</p>
<p>word-spacing<br>设置字间距<br>任何长度值</p>
<p>text-decoration<br>向文本添加修饰<br>none、underline、overline、line-through、blink</p>
<p>text-align<br>使文本与包含元素对齐<br>left、right、center、justify</p>
<p>line-height<br>设置行高（行与行基准线之间的距离）<br>任何数字值（不需要指定单位）</p>
<p>text-transform<br>改变元素中文本的大小写形式<br>uppercase、lowercase、capitalize、none</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*缩进首行文本*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">text-indent</span>: <span class="number">3em</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*为段落指定一个大于负缩进值的正左外边距，产生悬挂段落的效果*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">text-indent</span>: -<span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置字符间距*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: .<span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置单词间距*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">word-spacing</span>: .<span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*去掉文本的下划线*/</span></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*需要在包含元素上设置text-align属性，使其子元素内容对齐*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置行高*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#intro</span> &#123;</span><br><span class="line">    <span class="comment">/*行高设置为字体的1.4倍*/</span></span><br><span class="line">    <span class="comment">/*行高比文本高出的部分，会再文本的上方和下方平均分配*/</span></span><br><span class="line">    <span class="attribute">font</span>:<span class="number">1.2em</span>/<span class="number">1.4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*将每个单词的首字母变成大写*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">text-transform</span>: capitalize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: <span class="number">50%</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown语法]]></title>
      <url>http://yoursite.com/2014/12/29/markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>标题能显示出文章的结构。行首插入1-6个 # ，每增加一个 # 表示更深入层次的内容，对应到标题的深度由 1-6 阶。  </p>
</blockquote>
<a id="more"></a>
<h2 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">链接 <span class="symbol">:</span>[Title](URL)  </span><br><span class="line">加粗 <span class="symbol">:**Bold**</span>  </span><br><span class="line">斜体字 <span class="symbol">:*Italics*</span>  </span><br><span class="line">删除线 <span class="symbol">:~~text~~</span>  </span><br><span class="line">高亮 <span class="symbol">:==text=</span>=  </span><br><span class="line">段落 : 段落之间空一行  </span><br><span class="line">换行符 : 一行结束时输入两个空格  </span><br><span class="line">列表 <span class="symbol">:*</span> 添加星号成为一个新的列表项。  </span><br><span class="line">引用 <span class="symbol">:&gt;</span> 引用内容  </span><br><span class="line">内嵌代码 : `alert(<span class="string">'Hello World'</span>);`  </span><br><span class="line">画水平线 (HR) <span class="symbol">:</span>分割线用三个以上的星号 * 、减号-或下划线 <span class="number">_</span> 表示</span><br></pre></td></tr></table></figure>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>具体使用方式请看示例。  </p>
<p>——: 为右对齐。<br>:—— 为左对齐。<br>:——: 为居中对齐。<br>——- 为使用默认居中对齐。  </p>
<table>
<thead>
<tr>
<th style="text-align:right">序号</th>
<th style="text-align:center">交易名</th>
<th style="text-align:left">交易说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:center">prfcfg</td>
<td style="text-align:left">菜单配置</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:center">gentmo</td>
<td style="text-align:left">编译所有交易</td>
</tr>
<tr>
<td style="text-align:right">100000</td>
<td style="text-align:center">sysdba</td>
<td style="text-align:left">数据库表模型汇总</td>
</tr>
</tbody>
</table>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表包括无序列表和有序列表两类。列表的每一项都使用 标记 + 分隔（至少一个空格或制表符） + 段落 的格式，段落的内容可以跨行，用空格缩进，还可以包含代码块、引用块等。如果在一个列表项里添加用空行隔开的多个段落，需要在每个段落开头添加至少两个空格。如果要表示多级列表，需要在下一级列表标记前加上至少两个空格或一个制表符，多级列表可以混用不同的标记。  </p>
<p>无序列表使用星号 * 、加号 + 或是减号 - 作为列表标记，标记不能混用，否则会视为不同的列表。  </p>
<p>有序列表则使用数字和一个英文句点表示，数字的内容是任意的，并不会影响 HTML 显示的数字。有时不需要列表，但在段落开头的文字是数字加句点的格式，为了不被 Markdown 解析成列表，需要在句点前加上反斜线，如： 2016. Something Begin.  </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">+ 无序列表项<span class="number">1</span></span><br><span class="line">+ 无序列表项<span class="number">2</span></span><br><span class="line"> + 下一级列表</span><br><span class="line">   <span class="number">2.</span> 再下一级列表<span class="number">1</span></span><br><span class="line">   <span class="number">2.</span> 再下一级列表<span class="number">2</span></span><br><span class="line">- 不同标记视为不同列表</span><br><span class="line">- 列表还可以</span><br><span class="line">    # 包含代码块</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">- 或者引用</span><br><span class="line">&gt; I have a dream!</span><br><span class="line">- 以及多行或多段。</span><br><span class="line">第二行</span><br><span class="line"></span><br><span class="line">  第二段</span><br><span class="line"></span><br><span class="line"><span class="number">2016</span>\. Something Begin.</span><br></pre></td></tr></table></figure>
<ul>
<li>无序列表项1</li>
<li>无序列表项2<ul>
<li>下一级列表<ol>
<li>再下一级列表1</li>
<li>再下一级列表2</li>
</ol>
</li>
</ul>
</li>
</ul>
<ul>
<li>不同标记视为不同列表</li>
<li>列表还可以</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 包含代码块</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>或者引用<blockquote>
<p>I have a dream!</p>
</blockquote>
</li>
<li><p>以及多行或多段。<br>第二行</p>
<p>第二段</p>
</li>
</ul>
<p>2016. Something Begin.</p>
<h2 id="转义符号"><a href="#转义符号" class="headerlink" title="转义符号"></a>转义符号</h2><p>对于 Markdown 中的语法符号，前面加反斜线 \ 即可显示符号本身。包括</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">\\ 反斜线  </span><br><span class="line">\` 重音号  </span><br><span class="line">\* 星号  </span><br><span class="line">\_ 下划线  </span><br><span class="line">\&#123;\&#125; \[\] \(\) 括号  </span><br><span class="line">\# 井号  </span><br><span class="line">\+ 加号  </span><br><span class="line">\- 减号  </span><br><span class="line">\. 句点  </span><br><span class="line">\! 惊叹号</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">## 任务列表  </span><br><span class="line"></span><br><span class="line">需要在 Markdown 列表项的段落部分用 [ ] 开头，也可以用 [x] 开头表示一个已选择的任务项。  </span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line">- [x] 学习 Markdown</span><br><span class="line">- [ ] 使用 Markdown</span><br><span class="line">  <span class="number">1.</span> [ ] 写博客</span><br></pre></td></tr></table></figure>
<ul>
<li>[x] 学习 Markdown</li>
<li>[ ] 使用 Markdown<ol>
<li>[ ] 写博客</li>
</ol>
</li>
</ul>
<h2 id="emoji表情使用"><a href="#emoji表情使用" class="headerlink" title="emoji表情使用"></a>emoji表情使用</h2><p>:EMOJICODE: 的格式，详细的表情列表参见 EMOJI CHEAT SHEET 。</p>
<pre><code>:man: :thumbsup: :sunny: :bug:
</code></pre><p>:man: :thumbsup: :sunny: :bug:</p>
<h2 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h2><p>Markdown 中可以直接书写大部分HTML标签.其中在HTML的区块类型标签<code>&lt;div&gt;&lt;table&gt;&lt;pre&gt;&lt;p&gt;</code>等内的，Markdown语法会失效，在HTML行内型标签<span><cite><del>等内，Markdown语法仍然有效。<br>需要注意的是，在 HTML 标签内，书写特殊字符 &lt; 和 &amp; 仍然需要用它们的替代形式 &lt;和 &amp;表示。在 Markdown 中，也能用 &lt; 和 &amp; 的这种特殊形式。</del></cite></span></p>
<p>This is <a href="http://cn.bing.com" target="_blank" rel="external">Markdown</a> regular paragraph.<br>1 &lt; 3 &amp; 5<br>2 &lt; 4 &amp; 6  </p>
<table border="1" bgcolor="yellowgreen"><br>    <tr><br>        <td><strong>count</strong> 1 &lt; 3 &amp; 5</td><br>        <td><strong>count</strong> 2 &lt; 4 &amp; 6</td><br>    </tr><br></table>

<h2 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h2><p>链接用于跳转到其他页面，包含行内式和参考式两种样式，还可以使用简单的自动链接。跳转地址可以用 / 开头的相对路径引用本机资源。  </p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">行内式：链接文字和跳转地址写在一起。如：  </span><br><span class="line">[<span class="string">an example</span>](<span class="link">http://www.cnblogs.com/zhuyuanhao/ "链接title"</span>)  </span><br><span class="line"></span><br><span class="line">an example</span><br><span class="line">参考式：链接文字和跳转地址分开写，通过 [id] 标识联系起来。 [id] 标识可以包含字母、数字、空白和标点符号，但是并不区分大小写。跳转地址部分可以出现在文件的任意地方。  </span><br><span class="line"></span><br><span class="line">This is [<span class="string">an example</span>][<span class="symbol">ID 2</span>] reference-style link.  </span><br><span class="line"></span><br><span class="line">[<span class="symbol">id 2</span>]: <span class="link">http://www.cnblogs.com/zhuyuanhao/ "可选title, 可以用单引号'、双引号"或括号()包着，也可以另起一行并缩进"  </span></span><br><span class="line">[<span class="symbol">iD 3</span>]: <span class="link">&lt;http://www.cnblogs.com/zhuyuanhao/&gt;   </span></span><br><span class="line"><span class="code">    '跳转地址也可以用尖括号包起来'</span></span><br><span class="line">隐式参考链接：使用空标识 [] ，在跳转地址处使用链接文字作为标识。</span><br><span class="line"></span><br><span class="line">[<span class="string">Google</span>][<span class="symbol"></span>]  </span><br><span class="line"></span><br><span class="line">[<span class="symbol">Google</span>]: <span class="link">http://google.com/ "Google Inc."  </span></span><br><span class="line">自动链接：对于网址和电子邮件信箱，只要是用尖括号包起来，Markdown 就会自动把它转成链接，链接文字和跳转地址相同。  </span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">www.cnblogs.com</span>/<span class="attr">zhuyuanhao</span>/&gt;</span></span>  </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">address@example.com</span>&gt;</span></span>  </span><br><span class="line">http://www.cnblogs.com/zhuyuanhao/  </span><br><span class="line"></span><br><span class="line">address@example.com  </span><br><span class="line">图片用于在当前页面显示图片，也包含行内式和参考式，只需要在链接的样式前加一个惊叹号 ! ，就会被识别为图片。可以使用相对路径引用本地的图片，也能使用 url 引用其他网站的图片。不过到目前为止，Markdown 还没有办法指定图片的宽高。  </span><br><span class="line"></span><br><span class="line">行内式：</span><br><span class="line">![<span class="string">Alt text</span>](<span class="link">/path/to/img.jpg "Optional title"</span>)  </span><br><span class="line">参考式：</span><br><span class="line">![<span class="string">Alt text</span>][<span class="symbol">id</span>]    </span><br><span class="line">[<span class="symbol">id</span>]: <span class="link">url/to/image  "Optional title attribute"</span></span><br></pre></td></tr></table></figure>
<p>行内式：链接文字和跳转地址写在一起。如：  </p>
<p><a href="http://www.cnblogs.com/zhuyuanhao/" title="链接title" target="_blank" rel="external">an example</a>  </p>
<p>an example<br>参考式：链接文字和跳转地址分开写，通过 <a href="url/to/image" title="Optional title attribute">id</a> 标识联系起来。 <a href="url/to/image" title="Optional title attribute">id</a> 标识可以包含字母、数字、空白和标点符号，但是并不区分大小写。跳转地址部分可以出现在文件的任意地方。  </p>
<p>This is <a href="http://www.cnblogs.com/zhuyuanhao/" title="可选title, 可以用单引号&#39;、双引号&quot;或括号()包着，也可以另起一行并缩进" target="_blank" rel="external">an example</a> reference-style link.  </p>
<pre><code>&apos;跳转地址也可以用尖括号包起来&apos;
</code></pre><p>隐式参考链接：使用空标识 [] ，在跳转地址处使用链接文字作为标识。</p>
<p><a href="http://google.com/" title="Google Inc." target="_blank" rel="external">Google</a>  </p>
<p>自动链接：对于网址和电子邮件信箱，只要是用尖括号包起来，Markdown 就会自动把它转成链接，链接文字和跳转地址相同。  </p>
<p><a href="http://www.cnblogs.com/zhuyuanhao/" target="_blank" rel="external">http://www.cnblogs.com/zhuyuanhao/</a><br><a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#97;&#100;&#100;&#114;&#x65;&#x73;&#x73;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#101;&#46;&#99;&#x6f;&#109;">&#97;&#100;&#100;&#114;&#x65;&#x73;&#x73;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#101;&#46;&#99;&#x6f;&#109;</a><br><a href="http://www.cnblogs.com/zhuyuanhao/" target="_blank" rel="external">http://www.cnblogs.com/zhuyuanhao/</a>  </p>
<p>address@example.com<br>图片用于在当前页面显示图片，也包含行内式和参考式，只需要在链接的样式前加一个惊叹号 ! ，就会被识别为图片。可以使用相对路径引用本地的图片，也能使用 url 引用其他网站的图片。不过到目前为止，Markdown 还没有办法指定图片的宽高。  </p>
<p>行内式：<br><img src="/path/to/img.jpg" alt="Alt text" title="Optional title"><br>参考式：<br><img src="url/to/image" alt="Alt text" title="Optional title attribute">    </p>
<h2 id="自动生成目录"><a href="#自动生成目录" class="headerlink" title="自动生成目录"></a>自动生成目录</h2><p>在需要目录出现的地方（一般在文章一开始）放置一个标记，这样会自动生成一个嵌套的包含所有标题的列表。默认的标记是[TOC]。</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[TOC]</span><br><span class="line"></span><br><span class="line"><span class="meta"># 概述</span></span><br><span class="line"></span><br><span class="line"><span class="meta">## 定义</span></span><br><span class="line"></span><br><span class="line"><span class="meta">## 用处</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 结论</span></span><br></pre></td></tr></table></figure>
<p>最前面的那个目录就是用 [TOC]生成的。</p>
<h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注用于为正文中的某个条目添加补充注释，说明该条目的引文出处，跟参考文献一样，脚注一般位于文档的末尾，文章内以数字标注。在Markdown Extra也可以很容易的实现脚注。</p>
<p>语法说明：</p>
<p>在需要标记脚注文字的后面添加一个方括号，方括号中的内容必须以^开头，再接着是数字或字符串标记：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">脚注[ ^1]有一个标签[^label]和该标签的定义[^!DEF].</span><br><span class="line">接着，在文件的任意地方，你可以把这个脚注的内容定义出来：  </span><br><span class="line">[<span class="symbol"> ^1</span>]: <span class="link">这是一个脚注</span></span><br><span class="line">[<span class="symbol">^label</span>]: <span class="link">这是脚注的标签</span></span><br><span class="line">[<span class="symbol">^!DEF</span>]: <span class="link">这是脚注标签的定义</span></span><br></pre></td></tr></table></figure>
<p>脚注<a href="这是一个脚注"> ^1</a>有一个标签<a href="这是脚注的标签">^label</a>和该标签的定义<a href="这是脚注标签的定义">^!DEF</a>.<br>接着，在文件的任意地方，你可以把这个脚注的内容定义出来：  </p>
<p>脚注内容定义的形式：</p>
<p>前面引用脚注的标签符号<br>接着一个冒号<br>再接着一个以上的空格或制表符<br>最后是脚注定义的内容。<br>脚注定义的内容可以包含多行、代码区块、区块引用和大多数其他markdown格式的内容。</p>
<p>例子：</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这是一个脚注[ ^footnote].</span><br><span class="line"></span><br><span class="line">[ ^footnote]: 脚注定义内容的第一行内容.</span><br><span class="line">定义内容的第二行.</span><br><span class="line">&gt; 一个包含多行的</span><br><span class="line">&gt; 区块引用.</span><br></pre></td></tr></table></figure>
<p>转为HTML后为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个脚注<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#fn:footnote"</span> <span class="attr">id</span>=<span class="string">"fnref:footnote"</span> <span class="attr">title</span>=<span class="string">"See footnote"</span> <span class="attr">class</span>=<span class="string">"footnote"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footnotes"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"fn:footnote"</span>&gt;</span>脚注定义内容的第一行内容. <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">定义内容的第二行.</span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span> 一个包含多行的 <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    &gt; 区块引用.</span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#fnref:footnote"</span> <span class="attr">title</span>=<span class="string">"Return to article"</span> <span class="attr">class</span>=<span class="string">"reversefootnote"</span>&gt;</span>↩<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>默认情况下，脚注内容位于生成的 HTML 文档末尾，上面的脚注内容在该文章的末尾可以看到。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>图片链接  公式暂不涉及</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery中的Ajax]]></title>
      <url>http://yoursite.com/2014/12/27/jQuery%E4%B8%AD%E7%9A%84Ajax/</url>
      <content type="html"><![CDATA[<blockquote>
<p>原始ajax的五个步骤</p>
</blockquote>
<ol>
<li>准备发送请求 (调用 new XMLHttpRequest())   (readyState == 0)</li>
<li>打开一个请求  (调用open方法)  (readyState == 1)</li>
<li>发送请求 (调用send方法,并且接收到响应头)  (readyState == 2)</li>
<li>开始接受到请求 (readyState == 3)</li>
<li>接受完成 (readyState == 4)</li>
</ol>
<a id="more"></a>
<h3 id="Ajax核心对象XMLHttpRequest"><a href="#Ajax核心对象XMLHttpRequest" class="headerlink" title="Ajax核心对象XMLHttpRequest"></a>Ajax核心对象XMLHttpRequest</h3><p>这个对象最早在IE中被实现，不过它最早的时候是通过ActiveXObject实现的，如果不需要管兼容的话，IE9或者其他浏览器使用 new XMLHttpRequest() 就能创建了一个 XHR (XMLHttpRequest) 对象,IE中由于存在三个版本的XHR对象，所以如果需要兼容，需要对这三个版本进行处理，从中选出IE浏览器中最新支持对象：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="literal">undefined</span>)&#123;</span><br><span class="line">xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> ActiveXObject != <span class="literal">undefined</span>)&#123;</span><br><span class="line">xhr = (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> versions = [<span class="string">"MSXML2.XMLHttp.6.0"</span>,<span class="string">"MSXML2.XMLHttp.3.0"</span>,<span class="string">"MSXML2.XMLHttp"</span>]();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>,ilen = versions.length;i\&lt;ilen;i++) &#123;</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">//避免不支持当前版本报错</span></span><br><span class="line">  <span class="keyword">new</span> ActiveXObject[versions\[i]()];</span><br><span class="line">  <span class="comment">//保存当前支持的版本</span></span><br><span class="line">  argument.callee.ActiveXString = versions[i]();</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">  &#125;     </span><br><span class="line">  <span class="comment">//返回一个当前浏览器支持的版本的XHR对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(argument.callee.ActiveXString);</span><br><span class="line">&#125;)() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这段代码就做了第一阶段的事情，初始化一个请求</p>
<h3 id="打开一个请求-open"><a href="#打开一个请求-open" class="headerlink" title="打开一个请求 open"></a>打开一个请求 open</h3><p>xhr.open(); // xhr是通过new XMLHttpRequest()返回的对象 并没有发送请求，它只定义了请求的类型，url，以及是否异步，如： xhr.open(“get”,”index.html”, false ); 最常见的请求类型有post和get两种方法，url如果没有指定完整的（带协议前缀的如: <a href="http://,https://" target="_blank" rel="external">http://,https://</a> ）url地址，那么它的地址相对当前执行代码的页面，Ajax最优秀的地方便是可以异步同步发送请求，第三个参数false代表同步，true代表异步。</p>
<h3 id="post跟get的区别"><a href="#post跟get的区别" class="headerlink" title="post跟get的区别"></a>post跟get的区别</h3><p>对于前端，对它能体现对大的区别就是传参不同，get的参数放在url地址后面以 ?abc=1&amp;bcd=2&amp;dd=3&amp;s=4 的形式传递，而post的参数放在请求主体内，通过 xhr.send() 发送，  xhr.send(“任何想发送给服务器的字符串”);<br>url<br>url相对与执行当前代码的页面。<br>在页面<a href="http://mydomin.com/test/obj/index.html中调用了xhr.send()表示请求在index.html页面发送，那么url响应的地址就是http://mydomin.com/test/obj/我的请求的url地址。" target="_blank" rel="external">http://mydomin.com/test/obj/index.html中调用了xhr.send()表示请求在index.html页面发送，那么url响应的地址就是http://mydomin.com/test/obj/我的请求的url地址。</a><br>如果是一个完整的地址，那么必须是同域的情况下才允许发送请求，否在会引发安全报错，同域：同端口同协议的url地址<br><a href="http://baidu.com:80" target="_blank" rel="external">http://baidu.com:80</a><br>协议:http<br>端口:80</p>
<h3 id="同步与异步的区别"><a href="#同步与异步的区别" class="headerlink" title="同步与异步的区别"></a>同步与异步的区别</h3><p>同步请求必须接收完(到达第四阶段)响应才会继续往下执行代码，<br>而异步请求会在发出一个请求继续执行不会阻碍流程，<br>不管是同步或在异步当接收完完响应之后会调用onreadystatechange方法，当xhr属性的readystate的值为4（第四阶段）的时候表示接受完成 xhr.onreadystatechange =function (e){} ，除了第零阶段，几乎每个阶段都对调用onreadystatechange方法，但取决于浏览器的实现。<br>发送一个请求 xhr.send()<br>xhr.send() 阶段才是真真的发起请求阶段，几乎可以用来发送任何数据，在这个阶段，<br>如果是异步请求，那么调用之后就会直接执行下面的代码，<br>如果是同步请求，那么需要等到readyState的值为4也就是接收完所有响应之后才会往下执行。</p>
<h3 id="接受响应"><a href="#接受响应" class="headerlink" title="接受响应"></a>接受响应</h3><p>xhr对象有四个关于响应的属性</p>
<ul>
<li>responseText  (响应文本)</li>
<li>responseXML     （如果响应头是text/xml或在application/xml那么响应数据会添加到这个属性）</li>
<li>status (响应状态码,200,304,404,500等等)</li>
<li>statusText (响应状态说明)<br>无论响应的是什么样的内容，都会把服务器返回的内容存在 xhr.responseText 中，所以有时候只需关注  xhr.responseText ，只有响应头的类型是text/xml或在application/xml的时候 xhr.responseXML 才会填充响应数据</li>
</ul>
<h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><p>statusText：表示对响应状态的说明，不过有时候并不能准确解释状态，如我直接访问一个发起一个跨域的请求的时候， statusText 为空，并且每个浏览器对状态的描述并不是所有的都一致。<br>虽然jQuery已经把所有的步骤都封装好，让技术员指需要关注成功与否，但很多时候了解其中的原理，处理问题会让人更加灵活并且得心应手。</p>
<h2 id="jQuery中的Ajax"><a href="#jQuery中的Ajax" class="headerlink" title="jQuery中的Ajax"></a>jQuery中的Ajax</h2><blockquote>
<p>jQuery 对 Ajax 做了大量的封装，我们使用起来也较为方便，不需要去考虑浏览器兼容性。对于封装的方式，jQuery采用了三层封装：最底层的封装方法为：$.ajax()，而通过这层封装了第二层有三种方法：.load()、$.get()和$.post()，最高层是$.getScript()和$.getJSON()方法。</p>
</blockquote>
<h3 id="Ajax中的load-方法"><a href="#Ajax中的load-方法" class="headerlink" title="Ajax中的load()方法"></a>Ajax中的load()方法</h3><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**   Ajax中的load方法（局部方法，可以直接绑定在需要获取的元素上）</span><br><span class="line">  @<span class="keyword">param</span> &#123;String&#125;        <span class="keyword">url</span>  必须，获取文件地址</span><br><span class="line">  @<span class="keyword">param</span> &#123;JSON <span class="keyword">or</span> String&#125;          可选，键值对方式的请求参数或者（使用键值对   形式，请求将转化成post）</span><br><span class="line">  @<span class="keyword">param</span> &#123;Function&#125;      可选，请求成功的回调函数</span><br><span class="line">  @<span class="keyword">config</span>   &#123;String&#125;   <span class="keyword">responseText</span>         获得字符串形式的响应数据</span><br><span class="line">  @<span class="keyword">config</span>   &#123;String&#125;   <span class="keyword">textStatus</span>            文本方式返回HTTP状态码</span><br><span class="line">  @<span class="keyword">config</span>   &#123;Object&#125;   <span class="keyword">XMLHttpRequest</span>        <span class="keyword">xhr</span>对象，有多种属性</span><br><span class="line"> */</span><br><span class="line">.load(url, data, complete(responseText, textStatus, XMLHttpRequest));</span><br><span class="line"></span><br><span class="line">例如下面这段代码  </span><br><span class="line"></span><br><span class="line">	$(<span class="string">'button'</span>).click(function () &#123;</span><br><span class="line">	$(<span class="string">'#box'</span>).load(<span class="string">'test.php'</span>, &#123;url : <span class="string">'guowen'</span>&#125;);</span><br><span class="line">	&#125;);</span><br></pre></td></tr></table></figure>
<p>在控制台可以看到请求为POST，（注意：这里第二个参数若是字符串的情况，例如”url=guowen”，请求仍然为GET。）<br>所以服务器端php文件应该如此设置：  </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ($_POST[<span class="string">"url"</span>]() == <span class="string">"guowen"</span>) &#123;<span class="comment">//get请求把POST更改一下就好了</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\&lt;a href='http://guowenfh.github.io/'\&gt;三省吾身丶丶\&lt;/a\&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"其他网站"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>关于XHR对象上的属性，和HTTP状态码，参考我原来的博客。</p>
<h3 id="get-和-post"><a href="#get-和-post" class="headerlink" title="$.get()和$.post()"></a>$.get()和$.post()</h3><blockquote>
<p>.load()方法是局部方法，因为他需要一个包含元素的 jQuery 对象作为前缀。而$.get()和$.post()是全局方法，无须指定某个元素。对于用途而言，.load()适合做静态文件的异步获取，而对于需要传递参数到服务器页面的，$.get()和$.post()更加合适。</p>
</blockquote>
<p>$.get()方法有四个参数，前面三个参数和.load()一样，多了一个第四参数type，即服务器返回的内容格式：包括xml、html、script、json、jsonp和text。第一个参数为必选参数，后面三个为可选参数<br>GET方式请求会直接在html后以?Key=value跟随，所以，有三种形式请求数据，  </p>
<ol>
<li>直接跟在url后</li>
<li>键值对形式的{url:”guowen”}</li>
<li>字符串形式的”url=guowen”<br>POST请求方式除去不能直接跟在url后之外，剩余两个，使用方法一样<br>注意: 与.load()方法不同的是：.load()方法根据第二个参数的不同类型，请求方式会改变，但这里已经是两个独立的方法了，所以请求类型不会进行转换。<br>第四个参数一般都不进行设置，jQuery会自动转换其类型。强制设置时，有可能会连标签一起返回。<br>至于POST与GET方式请求的差别，在我原来的博客中也有写到，这里就不赘述了。</li>
</ol>
<h3 id="getScript-和-getJSON"><a href="#getScript-和-getJSON" class="headerlink" title="$.getScript()和$.getJSON()"></a>$.getScript()和$.getJSON()</h3><p>jQuery提供了一组用于特定异步加载的方法：$.getScript()，用于加载特定的JS文件；$.getJSON()，用于专门加载JSON文件。<br>$.getJSON()方法与之前的使用方法类似，就是把第四个参数，类型强制设置成了JSON。<br>有时我们希望能够特定的情况再加载JS文件，而不是一开始把所有JS文件都加载了，这时就可以使用$.getScript()方法。</p>
<p>//点击按钮后再加载 JS 文件<br>$(‘input’).click(function () {<br>$.getScript(‘test.js’);<br>});</p>
<h3 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax()"></a>$.ajax()</h3><p>$.ajax()是所有 ajax 方法中最底层的方法，所有其他方法都是基于$.ajax()方法的封装。这个方法只有一个参数，传递一个各个功能键值对的对象。<br>参数很多有兴趣的自己去看jQuery.ajax()，本来准备写几个常用的。强迫症犯了，去网上找资料做成了表格。。如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">type : <span class="string">'POST'</span>, <span class="comment">//这里可以换成 GET</span></span><br><span class="line">url : <span class="string">'test.php'</span>,</span><br><span class="line">data : &#123;</span><br><span class="line">url : <span class="string">'guowen'</span></span><br><span class="line">&#125;,</span><br><span class="line">success : <span class="function"><span class="keyword">function</span> (<span class="params">response, stutas, xhr</span>) </span>&#123;</span><br><span class="line">$(<span class="string">'#box'</span>).html(response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>注意：对于data属性，如果是GET、模式，可以使用三种之前说所的三种形式。如果是POST模式可以使用之前所说的两种形式。（这里不需要考虑之前的data类型的问题了，因为指定了请求类型，不会转化）</p>
<h3 id="表单序列化"><a href="#表单序列化" class="headerlink" title="表单序列化"></a>表单序列化</h3><p>使用表单序列化方法.serialize()，会智能的获取指定表单内的所有元素。这样，在面对大量表单元素时，会把表单元素内容序列化为字符串，然后再使用Ajax请求。<br>序列化表单内的元素：data : $(‘form’).serialize()，其余部分相同。<br>除此之外还可以直接获取单选框、复选框和下拉列表框等内容除了.serialize()方法，还有一个可以返回 JSON 数据的方法：.serializeArray()。这个方法可以直接把数据整合成键值对的 JSON 对象。<br>使用方法相同$(‘form’).serializeArray().有时，我们可能会在同一个程序中多次调用$.ajax()方法。而它们很多参数都相同，这个时候我们课时使用 jQuery 提供的$.ajaxSetup()请求默认值来初始化参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'form input[type=button]()'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">$.ajaxSetup(&#123;<span class="comment">//初始化多个ajax方法相同部分参数，后面再写ajax的时候，就不用在写了。</span></span><br><span class="line">type : <span class="string">'POST'</span>,</span><br><span class="line">url : <span class="string">'test.php'</span>,</span><br><span class="line">data : $(<span class="string">'form'</span>).serialize()<span class="comment">//表单序列化</span></span><br><span class="line">&#125;);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">success : <span class="function"><span class="keyword">function</span> (<span class="params">response, status, xhr</span>) </span>&#123;</span><br><span class="line">alert(response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在使用 data 属性传递的时候，如果是以对象形式传递键值对，可以使用$.param()方法将对象转换为字符串键值对格式。<br>主要是针对无法直接使用表单序列化方法.serialize()的情况，且传递参数为对象，建议使用该方法进行解析后再进行传递。</p>
<h3 id="Ajax进阶"><a href="#Ajax进阶" class="headerlink" title="Ajax进阶"></a>Ajax进阶</h3><p>加载请求，及错误处理。<br>主要是处理网速较慢的情况，出现请求时间较长的问题。而此时若没有一点提示，用户可能会认为你的网页出现了问题。若是能在请求过程中给用户一些提示，比如：正在努力加载中…… 。 可能会对用户更加友好一些。<br>jQuery提供了两个全局事件，jQuery 提供了两个全局事件，.ajaxStart()和.ajaxStop()。<br>这两个全局事件，只要用户触发了 Ajax，请求开始时（未完成其他请求）激活.ajaxStart()，请求结束时（所有请求都结束了）激活.ajaxStop()。<br>值得注意的是，因为是全局事件，所以这两个方法是直接需要直接绑定到document上的。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ajaxStart(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">".loading"</span>).show();</span><br><span class="line">&#125;).ajaxStop(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">".loading"</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当然你也可以自行在ajax内部进行一些设置,如请求超时时间，该ajax函数是否触发全局事件等等。以键值对的方式写明就可以了。<br>错误处理也特别简单</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line"><span class="comment">//…………</span></span><br><span class="line">timeout : <span class="number">500</span>,<span class="comment">//如果请求时间太长，可以设置超时</span></span><br><span class="line">global : <span class="literal">false</span>,<span class="comment">//如果某个 ajax 不想触发全局事件，可以设置取消</span></span><br><span class="line">error : <span class="function"><span class="keyword">function</span>(<span class="params">xhr,errorText,errorType</span>)</span>&#123;<span class="comment">//一般都直接用xhr对象</span></span><br><span class="line">alert(<span class="string">"发生错误："</span>+xhr.status);<span class="comment">//返回错误状态码</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>除此之外$.get()、$.post()和.load(),可以通过连缀处理使用局部.error()方法来处理错误，当然还有一个全局的方法：通过全局.ajaxError()事件方法来返回错误信息。即可</p>
<h3 id="请求全局事件"><a href="#请求全局事件" class="headerlink" title="请求全局事件"></a>请求全局事件</h3><p>jQuery 对于 Ajax 操作提供了很多全局事件方法，除去上面已经提到的.ajaxStart()、.ajaxStop()、.ajaxError()等事件方法。他们都属于请求时触发的全局事件，除了这些，还有一些其他全局事件：</p>
<ol>
<li>.ajaxSuccess()，对应一个局部方法：.success()，请求成功完成时执行。</li>
<li>.ajaxComplete()，对应一个局部方法：.complete()，请求完成后注册一个回调函数。</li>
<li>.ajaxSend()，没有对应的局部方法，只有属性 beforeSend，请求发送之前要绑定的函数。<br><strong>注意</strong>：全局事件方法是所有 Ajax 请求都会触发到，并且只能绑定在 document 上。而局部方法，则针对某个 Ajax。<br>对于一些全局事件方法的参数，大部分为对象，而这些对象有哪些属性或方法能调用，可以通过遍历方法得到。如：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历 settings 对象的属性</span></span><br><span class="line">$(<span class="built_in">document</span>).ajaxSuccess(<span class="function"><span class="keyword">function</span> (<span class="params">event, xhr, settings</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> settings) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这些全局方法，在$.ajax()方法中都可以直接以参数中的键值对的形式来完成</p>
<h3 id="JSON和JSONP"><a href="#JSON和JSONP" class="headerlink" title="JSON和JSONP"></a>JSON和JSONP</h3><p>其实在同一个域中时，只要url的后缀是json的文件的，默认就是json。当然你还可以使用$.ajax()方法设置 dataType属性加载 JSON 文件。<br>先来试试本地JSON:<br>php如下：  </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span><br><span class="line">$_arr= <span class="keyword">array</span>(<span class="string">'a'</span>=\&gt;<span class="number">1</span>,<span class="string">'b'</span>=\&gt;<span class="number">2</span>,<span class="string">'c'</span>=\&gt;<span class="number">3</span>);</span><br><span class="line">$_result = json_encode($_arr);</span><br><span class="line"><span class="keyword">echo</span> $_result;</span><br><span class="line">?\&gt;</span></span><br></pre></td></tr></table></figure>
<p>js:  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">type:<span class="string">"post"</span>,</span><br><span class="line">url:<span class="string">"test.php"</span>,</span><br><span class="line">dataType:<span class="string">"json"</span>,<span class="comment">//因为文件类型是php。但是返回的数据是json，所以必须设置类型，否则返回字符串</span></span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">response,staus,xhr</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(response.a);<span class="comment">//打印出来1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>实现跨域：这部分需要服务器端配合。  </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span><br><span class="line">$_arr= <span class="keyword">array</span>(<span class="string">'a'</span>=\&gt;<span class="number">1</span>,<span class="string">'b'</span>=\&gt;<span class="number">2</span>,<span class="string">'c'</span>=\&gt;<span class="number">3</span>);</span><br><span class="line">$_result = json_encode($_arr);</span><br><span class="line">$_callback = $_GET[<span class="string">'callback'</span>]();<span class="comment">//关键在这。配合客户端JS使用</span></span><br><span class="line"><span class="keyword">echo</span> $_callback.<span class="string">"($_result)"</span>;<span class="comment">//php用点号实现字符串拼接</span></span><br><span class="line">?\&gt;</span></span><br></pre></td></tr></table></figure>
<p>客户端实现：  </p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;//我本地地址为http://<span class="number">127.0.0.1:8020</span>/ajax.html</span><br><span class="line">type:<span class="string">"<span class="keyword">GET</span>"</span>,</span><br><span class="line">url:<span class="string">"http://localhost/test.php?callback=?"</span>,//这样就可以实现跨域资源的访问了，最后的？号，jQuery会自动转化成字符串</span><br><span class="line">dataType:<span class="string">"json"</span>,//若这里使用JSONP的话，可以删除上面url的“?callback=?”，jQuery会自动处理。</span><br><span class="line">success:function(response,staus,xhr)&#123;</span><br><span class="line">alert(response.a);</span><br><span class="line">console.log(response)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当然我们还可以进行使用$.getJSON()。使用方式同上。</p>
<h3 id="jqXHR对象"><a href="#jqXHR对象" class="headerlink" title="jqXHR对象"></a>jqXHR对象</h3><p>在之前，我们使用了局部方法：.success()、.complete()和.error()。这三个局部方法并不是 XMLHttpRequest 对象调用的，而是$.ajax()之类的全局方法返回的对象调用的。这个对象，就是 jqXHR 对象，它是原生对象 XHR 的一个超集。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取 jqXHR 对象，查看属性和方法</span></span><br><span class="line"><span class="keyword">var</span> jqXHR = $.ajax(&#123;</span><br><span class="line"><span class="keyword">type</span> : <span class="string">'POST'</span>,</span><br><span class="line">url : <span class="string">'test.php'</span>,</span><br><span class="line">data : $(<span class="string">'form'</span>).serialize()</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> jqXHR) &#123;</span><br><span class="line"><span class="built_in">document</span>.write(i + <span class="string">'\&lt;br /\&gt;'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：如果使用 jqXHR 对象的话，那么建议用.done()、.always()和.fail()代<br>替.success()、.complete()和.error()。以为在未来版本中，很可能将这三种方法废弃取消。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//成功后回调函数</span></span><br><span class="line">jqXHR.done(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">$(<span class="string">'#box'</span>).html(response);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>使用 jqXHR 的连缀方式比$.ajax()的属性方式有三大好处：</p>
<ol>
<li>可连缀操作，可读性大大提高；</li>
<li>可以多次执行同一个回调函数；</li>
<li>为多个操作指定回调函数；</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css设计指南-定位]]></title>
      <url>http://yoursite.com/2014/12/26/css%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97-%E5%AE%9A%E4%BD%8D/</url>
      <content type="html"><![CDATA[<p>其实 HTML 页面中每个元素其实都是一个「盒子」，默认情况下这些盒子的边框不可见，背景也是透明的，所以我们不能直接的看到页面中盒子的结构，但是我们可以借助一些 Web Developer 工具条可以方便地显示盒子的边框和背景，让我们能很直观的看到这些盒子的结构。  </p>
<a id="more"></a>
<h2 id="理解盒模型"><a href="#理解盒模型" class="headerlink" title="理解盒模型"></a>理解盒模型</h2><p>每个盒子都有三组属性：  </p>
<ol>
<li>外边距(margin)： 可以设置盒子与相邻盒子之间的距离。</li>
<li>边框(border)： 可以设置边框的宽度、样式和颜色。</li>
<li><p>内边距(padding)：可以设置盒子内容区和边框之间的距离。<br>一个盒子有四条边，所以这些属性也各有四个属性，分别是上(top)、右(right)、下(bottom)和左(left)，尽管这三组属性共有 12 个属性值，但我们也可以对它们进行简写，这里以margin 为例：  </p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin-top</span>:<span class="number">1px</span>;</span><br><span class="line"><span class="attribute">margin-right</span>:<span class="number">1px</span>;</span><br><span class="line"><span class="attribute">margin</span>-botton:<span class="number">1px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>:<span class="number">1px</span>;</span><br></pre></td></tr></table></figure>
<p>缩写后的代码如下:<br><code>margin:1px 1px 1px 1px;</code><br>缩写的顺序是<strong>上 -> 右 -> 下 -> 左，顺时针的方向</strong>。相对的边的值相同，则可以省掉，代码如下:</p>
</li>
</ol>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>:<span class="number">1px</span>;<span class="comment">// 四个方向的边距相同，等同于margin:1px 1px 1px 1px;</span></span><br><span class="line"><span class="attribute">margin</span>:<span class="number">1px</span> <span class="number">2px</span>;<span class="comment">// 上下边距都为1px，左右边距均为2px，等同于margin:1px 2px 1px 2px</span></span><br><span class="line"><span class="attribute">margin</span>:<span class="number">1px</span> <span class="number">2px</span> <span class="number">3px</span>;<span class="comment">// 右边距和左边距相同，等同于margin:1px 2px 3px 2px;</span></span><br><span class="line"><span class="attribute">margin</span>:<span class="number">1px</span> <span class="number">2px</span> <span class="number">1px</span> <span class="number">3px</span>;<span class="comment">// 注意，这里虽然上下边距都为1px，但是这里不能缩写。</span></span><br></pre></td></tr></table></figure>
<h3 id="盒子的边框-border"><a href="#盒子的边框-border" class="headerlink" title="盒子的边框(border)"></a>盒子的边框(border)</h3><p>边框(border)有四个相关属性：</p>
<ol>
<li>宽度(border-width)：可以使用 thin、 medium 和 thick 等文本值，也可以使用 除百分比和负值以外 的任何绝对值。</li>
<li>样式(border-style)：有 none、 hidden、 dotted、 dashed、 solid、 double、 groove、 ridge、 inset 和 outset 等文本值。</li>
<li>颜色(border-color)：可以使用任何颜色值，包括 rgb、 hsl、十六进制颜色值和颜色关键字。</li>
<li>圆角(border-radius)：属于 CSS3 新增属性，可使用百分比、相对值和绝对值。<br>CSS 推荐标准并没有明确规定 border-width 的几个文本值的确切宽度，所以实际宽度会因浏览器而异。border-radius 不影响盒子的定位。<h3 id="盒子的内边距-padding"><a href="#盒子的内边距-padding" class="headerlink" title="盒子的内边距(padding)"></a>盒子的内边距(padding)</h3>内边距是盒子内容区与盒子边框之间的距离。在没有设置内边距的情况下，内容紧挨着边框：设置内边距后，内容区与边框有一定的距离(padding 的大小)：<h3 id="盒子外边距-margin"><a href="#盒子外边距-margin" class="headerlink" title="盒子外边距(margin)"></a>盒子外边距(margin)</h3>与内边距和边框相比，外边距就要显得复杂的多了，首先是外边距叠加， 垂直方向上的外边距会叠加 ，例如有三个段落应用了如下规则：</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于第一段的下边距与第二段的上边距相邻，你可能会觉得它们两个盒子边框之间的外边距只和是 80px，但实际上是 50px，像这样上下外边距相遇时，它们会相互重叠，直到一个外边距碰到另一个盒子的边框。就上面例子而言，第二段较宽的上外边距会碰到第一段的边框，也就是说较宽的外边距决定两个盒子之间的距离。</p>
<h3 id="外边距的单位"><a href="#外边距的单位" class="headerlink" title="外边距的单位"></a>外边距的单位</h3><p>在设置段落文本外边距时应该注意，为了避免因增大字号导致段落间外边距不变引起的整体不协调的问题，在设置段落的上下外边距是应该使用 em 单位，这样当字体大小调整时，段落的上下外边距也会根据字体的大小来调整距离，这样页面的整体布局就会比较协调一致，而左右外边距则可以用 px 绝对单位，确保左右外边距不会因字体大小的调整而发生改变，比如可以这么设置：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line"><span class="attribute">margin</span>: .<span class="number">75em</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样段落垂直距离就会始终保持字体高度的四分之三的高度，水平外边距不会因字体的调整而发生改变了。</p>
<h2 id="盒子有多大"><a href="#盒子有多大" class="headerlink" title="盒子有多大"></a>盒子有多大</h2><p>作者在本章介绍了块级元素和行内元素的不同行为。</p>
<h3 id="没有宽度的盒子"><a href="#没有宽度的盒子" class="headerlink" title="没有宽度的盒子"></a>没有宽度的盒子</h3><p>作者在这一节中专门提到了一个 「没有宽度」的概念：没有显式地设置元素的width 属性。如果不设置块级元素的 width 属性，那么这个属性的默认值就是auto ，结果就是会让元素的宽度扩展到与父元素同宽，对于块级元素和行内元素更具体的介绍请看笔者的上一篇文章 CSS 设计指南 学习笔记 一 。<br><strong>盒模型结论一：</strong><br>没有设置宽度的元素始终会扩展到填满其父元素的宽度为止，添加水平外边距、水平边框和水平内边距都会导致内容宽度的减少，减少量等于水平外边距、水平边框和水平内边距的和。</p>
<h3 id="有宽度的盒子"><a href="#有宽度的盒子" class="headerlink" title="有宽度的盒子"></a>有宽度的盒子</h3><p><strong>盒模型结论二：</strong><br>为设定了宽度的盒子添加外边距、边框和内边距，会导致盒子扩展的更宽，实际上，盒子的 width 属性设定的只是盒子内容区的宽度，而不是盒子要占据的( margin-left + border-left + padding-left + width + padding-right + border-right + margin-right )水平宽度。<br>所以一定要记住的是，给设定了 width 的元素添加外边距、边框和内边距所展示的行为与默认的 auto 状态下的行为会有截然不同的表现。<br>拓展：<br>但是与布局相关的元素大部分都同时设置了 margin 、 border 、 padding 和width ，这就导致了在布局时的各种计算保证总宽度( margin-left + border-left + padding-left + width + padding-right + border-right + margin-right )保持不变，这样不仅麻烦，有的时候还比较容易出错，为了解决这一问题， CSS3 新增了一个 box-sizing 属性，通过它可以将设置了 width 的元素也设定成具有默认的 auto 状态下的行为。这样就省去了许多计算 width 的时间，同时也不会出错，而且它的浏览器支持情况也是一片大好（ 除了 IE 6 和 IE 7 不支持，其他个别老版本的浏览器需要添加浏览器私有前缀才支持 ）。<br>可以这样使用这个属性：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> *&#123;</span><br><span class="line"><span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">   <span class="attribute">-moz-box-sizing</span>: border-box;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="浮动与清除"><a href="#浮动与清除" class="headerlink" title="浮动与清除"></a>浮动与清除</h2><p>浮动和清除是页面布局的一大利剑，分别是 float 和 clear ，浮动可以让原来上下堆叠的块级元素变成左右并列，可以实现文字绕图片排列效果。浮动的元素会脱离常规的文档流，原来紧跟其后的元素会在空间允许的情况下向上提升到与浮动元素平起平坐。如果浮动元素后面有两个段落，而你只想让第一段与浮动元素并列（就算旁边还能放下第二段，也不想让它上来），就可以使用 clear 属性清除浮动。</p>
<h3 id="围住浮动元素的三种方法"><a href="#围住浮动元素的三种方法" class="headerlink" title="围住浮动元素的三种方法"></a>围住浮动元素的三种方法</h3><p>浮动元素脱离了文档流，所以我们看不到包含它的父元素了，这种情况有时候并不是我们想要的，所以作者在本章介绍了如何围住浮动元素的三种方法。<br><strong>方法一：</strong> 为父元素添加 overflow: hidden; 强制它包围浮动元素。<br>这种方法在某些情况下也不适用，比如通过浮动设置的水平排列的菜单，对其父元素设置 overflow: hidden; 后，尽管父元素围住了它，但是如果菜单有下拉选项的话，当鼠标移动到上面的时候下拉菜单并不会显示，因为设置了 overflow: hidden; ，所以超出父元素范围的内容都被隐藏掉了。  </p>
<p><strong>方法二：</strong> 同时浮动父元素</p>
<p>父元素设置浮动后，不管其子元素是否是浮动，父元素都会紧紧地包围住它的子元素，因此需要用 width: 100%; 再让父元素的宽度与浏览器容器同宽。同样，尽管父元素围住了它，但是这样会导致页面中出现大量的浮动元素，而浮动元素有往往不好控制，并不利于页面的布局。</p>
<p><strong>方法三：</strong> 添加非浮动的清除元素</p>
<p>第三种强制父元素包含其浮动的子元素的方式就是给父元素的最后添加一个非浮动的子元素，然后清除该子元素，因此父元素一定会包含这个子元素以及前面的浮动元素：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CSS</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>尽管这个方法能解决上面提到的两种方法中的问题，但它还不是最好的方法，因为它会在文档中添加无意义的标签，这违反了标签语义化的规则，对搜索引擎并不友好。所以如果你要清楚浮动但既不想浮动父元素又不想对父元素设置 overflow: hidden; 也不想增加无意义的标签的话，可以使用伪元素来清除浮动：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line"><span class="attribute">display</span>: table;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在父元素中添加 clearfix 类，因为搜索引擎并不会抓取伪元素，所以这种方法并没有增加无意义的标签，这里应该注意的是，CSS3 标准是用两个冒号来区别伪元素和伪类，而 CSS2.1 中不管是伪元素还是伪类都是用单个冒号表示，然而 IE8 并不支持双冒号的伪元素，所以问题就来了，如果你要遵循 CSS3 的标准使用双冒号的话就不兼容 IE8 了，如果使用但冒号的话又不符合 CSS3 标准规范，当然现在大多数还是使用但冒号的，选择哪种还是看个人的选择。</p>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>CSS 布局的核心是 position 属性，对元素应用这个属性可以相对于它在常规文档流中的位置重新定位， position 属性有 4 个值： static 、 relative 、absolute 和 fixed 。</p>
<h3 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位(static)"></a>静态定位(static)</h3><p>静态定位下的块级元素会在默认文档流中上下堆叠，想要突破 static 定位提供的这种按顺序布局元素的方式，就必须对元素的 position 属性的值改为其他三个值。</p>
<h3 id="相对定位-relative"><a href="#相对定位-relative" class="headerlink" title="相对定位(relative)"></a>相对定位(relative)</h3><p>所谓的相对定位就是相对于元素原来的位置（static 状态下的位置）进行定位，也就是说在不设置 top 、 right 、 bottom 或 left 的话，和它在默认(static)情况下的表现是相同的，但是如果对它设置了 top 、 right 、 bottom 或 left 的话，就会相对与它默认的位置进行定位。相对定位的元素可以遮住静态(static)定位的元素。可以给 top 和 left 属性设定负值，把元素向上和向左移动。</p>
<h3 id="绝对定位-absolute"><a href="#绝对定位-absolute" class="headerlink" title="绝对定位(absolute)"></a>绝对定位(absolute)</h3><p>绝对定位跟静态定位和相对定位是绝对不一样的，静态定位和相对定位并不会脱离文档流，会占居原来的位置，而绝对定位会把元素彻底从文档流中拿出来，然后再相对于其他元素（这里的其他元素指的是定位上下文，默认是 body 元素）定位。<br>绝对定位的一个重要的概念就是 定位上下文 ，把元素的 position 属性设定为relative 、 absolute 或 fixed 后，继而可以使用 top 、 right 、bottom 和 left 属性，相对于「另一个元素」移动该元素的位置。这里的「另一个元素」就是该元素的定位上下文。<br>绝对定位的默认定位上下文是 body ，这是因为 body 是标记中所有元素的唯一的祖先元素，而实际上，绝对定位元素的任何祖先元素都可以成为该绝对定位元素的定位上下文，只要把相应的祖先元素的 position 属性的值设定为 relative 即可。</p>
<h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><p>从完全脱离文档流的角度说，固定定位与绝对定位类似。但不同之处在于，固定定位的定位上下文是视口（浏览器窗口），因此它不会随页面的滚动而移动。最常见的情况是用它来创建不随页面滚动而移动的导航元素。</p>
<h3 id="定位上下文"><a href="#定位上下文" class="headerlink" title="定位上下文"></a>定位上下文</h3><p>在讲绝对定位的时候，我们了解到绝对定位元素默认的定位上下文是body元素，因为body是标记中所有元素唯一的祖先元素。而实际上， 绝对定位元素的所有祖先元素都可以成为它的定位上下文，只要把相应祖先元素的position设定为relative即可 。<br>只有将元素的position属性设置为relative、absolute、fixed，这个元素的top、right、bottom和left属性才会起作用。<br>设置了内部div的position属性为absolute之后，内部div就会脱离原来的位置，默认相对于body重新定位。<br>设置了外部div的position属性为relative值之后，它就变成了内部div的定位上下文。 此时内部div的top、left属性参照的就是外部div了。如果你再用left和top属性重新定位外部div，内部div也会跟着移动相同的距离，以保住它与外部div之间的位置关系。<br>事实上，只要把元素的外边距和内边距设定好，多数情况下只用默认的静态定位就足以实现页面布局了。很多刚接触CSS的初学者(include myself)都会错误的设定position属性,最终发现从文档流中挪出来的元素很难控制。因此，除非真需要那么做，否则不要轻易修改元素默认的position属性。</p>
<h2 id="显示属性"><a href="#显示属性" class="headerlink" title="显示属性"></a>显示属性</h2><p>display 属性的值很多，但常用的除了前面提到的控制块级元素、行内元素和行内块级元素的 block 、 inline 和 inline-block 以外，还有一个比较常用的就是 none ，把元素的 display 属性的值设定为 none 后，该元素及所包含在其中的元素，都不会在页面中显示。他们原先战局的所有空间都会被「回收」，就好像相关元素根本不存在一样。<br>与此类似的属性还有 visibility ，这个属性常用的两个值是 visible (默认值) 和 hidden ，把元素的 visibility 属性的值设定成 hidden ，元素会被隐藏，但它还会占据页面中原来的空间位置。<br>笔者觉得有点类似定位中 absolute 和 relative 的感觉，就是 absolute 定位的元素的原来的位置会被「回收」（脱离文档流），就好像元素根本不存在一样（指的是原来占据的位置不存在一样）， relative 定位的元素还会占据页面中原来的空间位置。</p>
<p><strong>总结</strong>  </p>
<blockquote>
<p>本章的内容不少，都是一些很重要的概念，比如盒模型、定位元素、浮动与清除浮动和元素背景属性。</p>
<ol>
<li>margin、padding的属性值顺序均为 上右下左</li>
<li>垂直方向上的margin外边距会叠加，取较大值。水平方向则不会，两者之间间距为两者之间margin外间距之和。</li>
<li>围住浮动元素的三种方法： 一：为父元素添加overflow:hidden   二：同时浮动父元素   三：添加非浮动的清除元素(写一个class，里面包含clear属性)</li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从右向左阅读r的定义]]></title>
      <url>http://yoursite.com/2014/12/25/%E4%BB%8E%E5%8F%B3%E5%90%91%E5%B7%A6%E9%98%85%E8%AF%BBr%E7%9A%84%E5%AE%9A%E4%B9%89/</url>
      <content type="html"><![CDATA[<h3 id="指向指针的引用-从右向左"><a href="#指向指针的引用-从右向左" class="headerlink" title="指向指针的引用(从右向左)"></a>指向指针的引用(从右向左)</h3><p>引用本身不是对象，所以不能定义指向引用的指针，但指针是对象，所以存在对指针的引用  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>；</span><br><span class="line"><span class="keyword">int</span> *p;      <span class="comment">//p是int 指针</span></span><br><span class="line"><span class="keyword">int</span> *&amp;r = p; <span class="comment">//r是一个对指针p的引用</span></span><br><span class="line">r = &amp;i;      <span class="comment">//r引用了一个指针，因此给r赋值&amp;i就是令p指向i</span></span><br><span class="line">*r = <span class="number">0</span>;      <span class="comment">//解引用r得到i,也就是p指向的对象，将i值改为0</span></span><br></pre></td></tr></table></figure>
 <a id="more"></a>
<p> 要理解一个变量类型到底是什么，最简单的就是从右向左阅读r的定义，离变量名进的符号对变量的类型有直接的影响。因此r是一个引用，声明符的其余部分用来确定r引用的类型是什么，*说明r引用的是一个指针。最后声明的基本数据类型指出r引用的是一个int指针.</p>
<h3 id="const指针-从右向左"><a href="#const指针-从右向左" class="headerlink" title="const指针(从右向左)"></a>const指针(从右向左)</h3><p> 所以的指针的类型都要和它所指的对象严格匹配，除了(1)允许令一个指向常量的指针指向一个非常量对象(2)暂时不需知道</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">double</span> *ptr = &amp;pi;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> *cptr = &amp;pi;</span><br><span class="line">*cptr = <span class="number">42</span>;</span><br></pre></td></tr></table></figure>
<p>谓指向常量的指针仅仅要求不能通过该指针改变对象的值，而没有规定那个对象的值不能通过其他途径改变</p>
<hr>
<p>指针是对象,const修饰符修饰一个变量，则此变量的值在初始化之后无法改变。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> errNumb = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> curErr = &amp;errNumb;<span class="comment">//curErr将一直指向errNumb</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.1415</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> *<span class="keyword">const</span> pip = &amp;pi;<span class="comment">//pip是一个指向常量对象的常量指针</span></span><br></pre></td></tr></table></figure>
<p> 指针本身是一个常量并不意味着不通过指针修改其所指对象的值，能否这样做完全取决于所指对象的类型.所</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2014/12/24/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
